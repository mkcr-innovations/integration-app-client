/*
Integration Engine API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionDto{}

// ActionDto struct for ActionDto
type ActionDto struct {
	Type string `json:"type"`
	InputSchema map[string]interface{} `json:"inputSchema,omitempty"`
	Config map[string]interface{} `json:"config,omitempty"`
	OutputMapping map[string]interface{} `json:"outputMapping,omitempty"`
	CustomOutputSchema map[string]interface{} `json:"customOutputSchema,omitempty"`
	DefaultOutputSchema map[string]interface{} `json:"defaultOutputSchema,omitempty"`
	TransformedOutputSchema map[string]interface{} `json:"transformedOutputSchema,omitempty"`
	OutputSchema map[string]interface{} `json:"outputSchema,omitempty"`
	IsConfigurationMissing *bool `json:"isConfigurationMissing,omitempty"`
	Dependencies []map[string]interface{} `json:"dependencies,omitempty"`
	IsDeployed *bool `json:"isDeployed,omitempty"`
}

type _ActionDto ActionDto

// NewActionDto instantiates a new ActionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionDto(type_ string) *ActionDto {
	this := ActionDto{}
	this.Type = type_
	return &this
}

// NewActionDtoWithDefaults instantiates a new ActionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionDtoWithDefaults() *ActionDto {
	this := ActionDto{}
	return &this
}

// GetType returns the Type field value
func (o *ActionDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ActionDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ActionDto) SetType(v string) {
	o.Type = v
}

// GetInputSchema returns the InputSchema field value if set, zero value otherwise.
func (o *ActionDto) GetInputSchema() map[string]interface{} {
	if o == nil || IsNil(o.InputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.InputSchema
}

// GetInputSchemaOk returns a tuple with the InputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDto) GetInputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.InputSchema) {
		return map[string]interface{}{}, false
	}
	return o.InputSchema, true
}

// HasInputSchema returns a boolean if a field has been set.
func (o *ActionDto) HasInputSchema() bool {
	if o != nil && !IsNil(o.InputSchema) {
		return true
	}

	return false
}

// SetInputSchema gets a reference to the given map[string]interface{} and assigns it to the InputSchema field.
func (o *ActionDto) SetInputSchema(v map[string]interface{}) {
	o.InputSchema = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ActionDto) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDto) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ActionDto) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *ActionDto) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetOutputMapping returns the OutputMapping field value if set, zero value otherwise.
func (o *ActionDto) GetOutputMapping() map[string]interface{} {
	if o == nil || IsNil(o.OutputMapping) {
		var ret map[string]interface{}
		return ret
	}
	return o.OutputMapping
}

// GetOutputMappingOk returns a tuple with the OutputMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDto) GetOutputMappingOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OutputMapping) {
		return map[string]interface{}{}, false
	}
	return o.OutputMapping, true
}

// HasOutputMapping returns a boolean if a field has been set.
func (o *ActionDto) HasOutputMapping() bool {
	if o != nil && !IsNil(o.OutputMapping) {
		return true
	}

	return false
}

// SetOutputMapping gets a reference to the given map[string]interface{} and assigns it to the OutputMapping field.
func (o *ActionDto) SetOutputMapping(v map[string]interface{}) {
	o.OutputMapping = v
}

// GetCustomOutputSchema returns the CustomOutputSchema field value if set, zero value otherwise.
func (o *ActionDto) GetCustomOutputSchema() map[string]interface{} {
	if o == nil || IsNil(o.CustomOutputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomOutputSchema
}

// GetCustomOutputSchemaOk returns a tuple with the CustomOutputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDto) GetCustomOutputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomOutputSchema) {
		return map[string]interface{}{}, false
	}
	return o.CustomOutputSchema, true
}

// HasCustomOutputSchema returns a boolean if a field has been set.
func (o *ActionDto) HasCustomOutputSchema() bool {
	if o != nil && !IsNil(o.CustomOutputSchema) {
		return true
	}

	return false
}

// SetCustomOutputSchema gets a reference to the given map[string]interface{} and assigns it to the CustomOutputSchema field.
func (o *ActionDto) SetCustomOutputSchema(v map[string]interface{}) {
	o.CustomOutputSchema = v
}

// GetDefaultOutputSchema returns the DefaultOutputSchema field value if set, zero value otherwise.
func (o *ActionDto) GetDefaultOutputSchema() map[string]interface{} {
	if o == nil || IsNil(o.DefaultOutputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultOutputSchema
}

// GetDefaultOutputSchemaOk returns a tuple with the DefaultOutputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDto) GetDefaultOutputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultOutputSchema) {
		return map[string]interface{}{}, false
	}
	return o.DefaultOutputSchema, true
}

// HasDefaultOutputSchema returns a boolean if a field has been set.
func (o *ActionDto) HasDefaultOutputSchema() bool {
	if o != nil && !IsNil(o.DefaultOutputSchema) {
		return true
	}

	return false
}

// SetDefaultOutputSchema gets a reference to the given map[string]interface{} and assigns it to the DefaultOutputSchema field.
func (o *ActionDto) SetDefaultOutputSchema(v map[string]interface{}) {
	o.DefaultOutputSchema = v
}

// GetTransformedOutputSchema returns the TransformedOutputSchema field value if set, zero value otherwise.
func (o *ActionDto) GetTransformedOutputSchema() map[string]interface{} {
	if o == nil || IsNil(o.TransformedOutputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.TransformedOutputSchema
}

// GetTransformedOutputSchemaOk returns a tuple with the TransformedOutputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDto) GetTransformedOutputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TransformedOutputSchema) {
		return map[string]interface{}{}, false
	}
	return o.TransformedOutputSchema, true
}

// HasTransformedOutputSchema returns a boolean if a field has been set.
func (o *ActionDto) HasTransformedOutputSchema() bool {
	if o != nil && !IsNil(o.TransformedOutputSchema) {
		return true
	}

	return false
}

// SetTransformedOutputSchema gets a reference to the given map[string]interface{} and assigns it to the TransformedOutputSchema field.
func (o *ActionDto) SetTransformedOutputSchema(v map[string]interface{}) {
	o.TransformedOutputSchema = v
}

// GetOutputSchema returns the OutputSchema field value if set, zero value otherwise.
func (o *ActionDto) GetOutputSchema() map[string]interface{} {
	if o == nil || IsNil(o.OutputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.OutputSchema
}

// GetOutputSchemaOk returns a tuple with the OutputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDto) GetOutputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OutputSchema) {
		return map[string]interface{}{}, false
	}
	return o.OutputSchema, true
}

// HasOutputSchema returns a boolean if a field has been set.
func (o *ActionDto) HasOutputSchema() bool {
	if o != nil && !IsNil(o.OutputSchema) {
		return true
	}

	return false
}

// SetOutputSchema gets a reference to the given map[string]interface{} and assigns it to the OutputSchema field.
func (o *ActionDto) SetOutputSchema(v map[string]interface{}) {
	o.OutputSchema = v
}

// GetIsConfigurationMissing returns the IsConfigurationMissing field value if set, zero value otherwise.
func (o *ActionDto) GetIsConfigurationMissing() bool {
	if o == nil || IsNil(o.IsConfigurationMissing) {
		var ret bool
		return ret
	}
	return *o.IsConfigurationMissing
}

// GetIsConfigurationMissingOk returns a tuple with the IsConfigurationMissing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDto) GetIsConfigurationMissingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsConfigurationMissing) {
		return nil, false
	}
	return o.IsConfigurationMissing, true
}

// HasIsConfigurationMissing returns a boolean if a field has been set.
func (o *ActionDto) HasIsConfigurationMissing() bool {
	if o != nil && !IsNil(o.IsConfigurationMissing) {
		return true
	}

	return false
}

// SetIsConfigurationMissing gets a reference to the given bool and assigns it to the IsConfigurationMissing field.
func (o *ActionDto) SetIsConfigurationMissing(v bool) {
	o.IsConfigurationMissing = &v
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *ActionDto) GetDependencies() []map[string]interface{} {
	if o == nil || IsNil(o.Dependencies) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDto) GetDependenciesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Dependencies) {
		return nil, false
	}
	return o.Dependencies, true
}

// HasDependencies returns a boolean if a field has been set.
func (o *ActionDto) HasDependencies() bool {
	if o != nil && !IsNil(o.Dependencies) {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given []map[string]interface{} and assigns it to the Dependencies field.
func (o *ActionDto) SetDependencies(v []map[string]interface{}) {
	o.Dependencies = v
}

// GetIsDeployed returns the IsDeployed field value if set, zero value otherwise.
func (o *ActionDto) GetIsDeployed() bool {
	if o == nil || IsNil(o.IsDeployed) {
		var ret bool
		return ret
	}
	return *o.IsDeployed
}

// GetIsDeployedOk returns a tuple with the IsDeployed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDto) GetIsDeployedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeployed) {
		return nil, false
	}
	return o.IsDeployed, true
}

// HasIsDeployed returns a boolean if a field has been set.
func (o *ActionDto) HasIsDeployed() bool {
	if o != nil && !IsNil(o.IsDeployed) {
		return true
	}

	return false
}

// SetIsDeployed gets a reference to the given bool and assigns it to the IsDeployed field.
func (o *ActionDto) SetIsDeployed(v bool) {
	o.IsDeployed = &v
}

func (o ActionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.InputSchema) {
		toSerialize["inputSchema"] = o.InputSchema
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.OutputMapping) {
		toSerialize["outputMapping"] = o.OutputMapping
	}
	if !IsNil(o.CustomOutputSchema) {
		toSerialize["customOutputSchema"] = o.CustomOutputSchema
	}
	if !IsNil(o.DefaultOutputSchema) {
		toSerialize["defaultOutputSchema"] = o.DefaultOutputSchema
	}
	if !IsNil(o.TransformedOutputSchema) {
		toSerialize["transformedOutputSchema"] = o.TransformedOutputSchema
	}
	if !IsNil(o.OutputSchema) {
		toSerialize["outputSchema"] = o.OutputSchema
	}
	if !IsNil(o.IsConfigurationMissing) {
		toSerialize["isConfigurationMissing"] = o.IsConfigurationMissing
	}
	if !IsNil(o.Dependencies) {
		toSerialize["dependencies"] = o.Dependencies
	}
	if !IsNil(o.IsDeployed) {
		toSerialize["isDeployed"] = o.IsDeployed
	}
	return toSerialize, nil
}

func (o *ActionDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActionDto := _ActionDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActionDto)

	if err != nil {
		return err
	}

	*o = ActionDto(varActionDto)

	return err
}

type NullableActionDto struct {
	value *ActionDto
	isSet bool
}

func (v NullableActionDto) Get() *ActionDto {
	return v.value
}

func (v *NullableActionDto) Set(val *ActionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableActionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableActionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionDto(val *ActionDto) *NullableActionDto {
	return &NullableActionDto{value: val, isSet: true}
}

func (v NullableActionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


