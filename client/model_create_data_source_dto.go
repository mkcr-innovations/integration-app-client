/*
Integration Engine API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateDataSourceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDataSourceDto{}

// CreateDataSourceDto struct for CreateDataSourceDto
type CreateDataSourceDto struct {
	Key string `json:"key"`
	Name string `json:"name"`
	IntegrationId *string `json:"integrationId,omitempty"`
	Udm *string `json:"udm,omitempty"`
	PullUpdatesIntervalSeconds *float32 `json:"pullUpdatesIntervalSeconds,omitempty"`
	FullSyncIntervalSeconds *float32 `json:"fullSyncIntervalSeconds,omitempty"`
	DefaultPath *string `json:"defaultPath,omitempty"`
	CollectionKey map[string]interface{} `json:"collectionKey,omitempty"`
	CollectionParameters map[string]interface{} `json:"collectionParameters,omitempty"`
}

type _CreateDataSourceDto CreateDataSourceDto

// NewCreateDataSourceDto instantiates a new CreateDataSourceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDataSourceDto(key string, name string) *CreateDataSourceDto {
	this := CreateDataSourceDto{}
	this.Key = key
	this.Name = name
	return &this
}

// NewCreateDataSourceDtoWithDefaults instantiates a new CreateDataSourceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDataSourceDtoWithDefaults() *CreateDataSourceDto {
	this := CreateDataSourceDto{}
	return &this
}

// GetKey returns the Key field value
func (o *CreateDataSourceDto) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *CreateDataSourceDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *CreateDataSourceDto) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *CreateDataSourceDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateDataSourceDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateDataSourceDto) SetName(v string) {
	o.Name = v
}

// GetIntegrationId returns the IntegrationId field value if set, zero value otherwise.
func (o *CreateDataSourceDto) GetIntegrationId() string {
	if o == nil || IsNil(o.IntegrationId) {
		var ret string
		return ret
	}
	return *o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataSourceDto) GetIntegrationIdOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationId) {
		return nil, false
	}
	return o.IntegrationId, true
}

// HasIntegrationId returns a boolean if a field has been set.
func (o *CreateDataSourceDto) HasIntegrationId() bool {
	if o != nil && !IsNil(o.IntegrationId) {
		return true
	}

	return false
}

// SetIntegrationId gets a reference to the given string and assigns it to the IntegrationId field.
func (o *CreateDataSourceDto) SetIntegrationId(v string) {
	o.IntegrationId = &v
}

// GetUdm returns the Udm field value if set, zero value otherwise.
func (o *CreateDataSourceDto) GetUdm() string {
	if o == nil || IsNil(o.Udm) {
		var ret string
		return ret
	}
	return *o.Udm
}

// GetUdmOk returns a tuple with the Udm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataSourceDto) GetUdmOk() (*string, bool) {
	if o == nil || IsNil(o.Udm) {
		return nil, false
	}
	return o.Udm, true
}

// HasUdm returns a boolean if a field has been set.
func (o *CreateDataSourceDto) HasUdm() bool {
	if o != nil && !IsNil(o.Udm) {
		return true
	}

	return false
}

// SetUdm gets a reference to the given string and assigns it to the Udm field.
func (o *CreateDataSourceDto) SetUdm(v string) {
	o.Udm = &v
}

// GetPullUpdatesIntervalSeconds returns the PullUpdatesIntervalSeconds field value if set, zero value otherwise.
func (o *CreateDataSourceDto) GetPullUpdatesIntervalSeconds() float32 {
	if o == nil || IsNil(o.PullUpdatesIntervalSeconds) {
		var ret float32
		return ret
	}
	return *o.PullUpdatesIntervalSeconds
}

// GetPullUpdatesIntervalSecondsOk returns a tuple with the PullUpdatesIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataSourceDto) GetPullUpdatesIntervalSecondsOk() (*float32, bool) {
	if o == nil || IsNil(o.PullUpdatesIntervalSeconds) {
		return nil, false
	}
	return o.PullUpdatesIntervalSeconds, true
}

// HasPullUpdatesIntervalSeconds returns a boolean if a field has been set.
func (o *CreateDataSourceDto) HasPullUpdatesIntervalSeconds() bool {
	if o != nil && !IsNil(o.PullUpdatesIntervalSeconds) {
		return true
	}

	return false
}

// SetPullUpdatesIntervalSeconds gets a reference to the given float32 and assigns it to the PullUpdatesIntervalSeconds field.
func (o *CreateDataSourceDto) SetPullUpdatesIntervalSeconds(v float32) {
	o.PullUpdatesIntervalSeconds = &v
}

// GetFullSyncIntervalSeconds returns the FullSyncIntervalSeconds field value if set, zero value otherwise.
func (o *CreateDataSourceDto) GetFullSyncIntervalSeconds() float32 {
	if o == nil || IsNil(o.FullSyncIntervalSeconds) {
		var ret float32
		return ret
	}
	return *o.FullSyncIntervalSeconds
}

// GetFullSyncIntervalSecondsOk returns a tuple with the FullSyncIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataSourceDto) GetFullSyncIntervalSecondsOk() (*float32, bool) {
	if o == nil || IsNil(o.FullSyncIntervalSeconds) {
		return nil, false
	}
	return o.FullSyncIntervalSeconds, true
}

// HasFullSyncIntervalSeconds returns a boolean if a field has been set.
func (o *CreateDataSourceDto) HasFullSyncIntervalSeconds() bool {
	if o != nil && !IsNil(o.FullSyncIntervalSeconds) {
		return true
	}

	return false
}

// SetFullSyncIntervalSeconds gets a reference to the given float32 and assigns it to the FullSyncIntervalSeconds field.
func (o *CreateDataSourceDto) SetFullSyncIntervalSeconds(v float32) {
	o.FullSyncIntervalSeconds = &v
}

// GetDefaultPath returns the DefaultPath field value if set, zero value otherwise.
func (o *CreateDataSourceDto) GetDefaultPath() string {
	if o == nil || IsNil(o.DefaultPath) {
		var ret string
		return ret
	}
	return *o.DefaultPath
}

// GetDefaultPathOk returns a tuple with the DefaultPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataSourceDto) GetDefaultPathOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultPath) {
		return nil, false
	}
	return o.DefaultPath, true
}

// HasDefaultPath returns a boolean if a field has been set.
func (o *CreateDataSourceDto) HasDefaultPath() bool {
	if o != nil && !IsNil(o.DefaultPath) {
		return true
	}

	return false
}

// SetDefaultPath gets a reference to the given string and assigns it to the DefaultPath field.
func (o *CreateDataSourceDto) SetDefaultPath(v string) {
	o.DefaultPath = &v
}

// GetCollectionKey returns the CollectionKey field value if set, zero value otherwise.
func (o *CreateDataSourceDto) GetCollectionKey() map[string]interface{} {
	if o == nil || IsNil(o.CollectionKey) {
		var ret map[string]interface{}
		return ret
	}
	return o.CollectionKey
}

// GetCollectionKeyOk returns a tuple with the CollectionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataSourceDto) GetCollectionKeyOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CollectionKey) {
		return map[string]interface{}{}, false
	}
	return o.CollectionKey, true
}

// HasCollectionKey returns a boolean if a field has been set.
func (o *CreateDataSourceDto) HasCollectionKey() bool {
	if o != nil && !IsNil(o.CollectionKey) {
		return true
	}

	return false
}

// SetCollectionKey gets a reference to the given map[string]interface{} and assigns it to the CollectionKey field.
func (o *CreateDataSourceDto) SetCollectionKey(v map[string]interface{}) {
	o.CollectionKey = v
}

// GetCollectionParameters returns the CollectionParameters field value if set, zero value otherwise.
func (o *CreateDataSourceDto) GetCollectionParameters() map[string]interface{} {
	if o == nil || IsNil(o.CollectionParameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.CollectionParameters
}

// GetCollectionParametersOk returns a tuple with the CollectionParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataSourceDto) GetCollectionParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CollectionParameters) {
		return map[string]interface{}{}, false
	}
	return o.CollectionParameters, true
}

// HasCollectionParameters returns a boolean if a field has been set.
func (o *CreateDataSourceDto) HasCollectionParameters() bool {
	if o != nil && !IsNil(o.CollectionParameters) {
		return true
	}

	return false
}

// SetCollectionParameters gets a reference to the given map[string]interface{} and assigns it to the CollectionParameters field.
func (o *CreateDataSourceDto) SetCollectionParameters(v map[string]interface{}) {
	o.CollectionParameters = v
}

func (o CreateDataSourceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDataSourceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	if !IsNil(o.IntegrationId) {
		toSerialize["integrationId"] = o.IntegrationId
	}
	if !IsNil(o.Udm) {
		toSerialize["udm"] = o.Udm
	}
	if !IsNil(o.PullUpdatesIntervalSeconds) {
		toSerialize["pullUpdatesIntervalSeconds"] = o.PullUpdatesIntervalSeconds
	}
	if !IsNil(o.FullSyncIntervalSeconds) {
		toSerialize["fullSyncIntervalSeconds"] = o.FullSyncIntervalSeconds
	}
	if !IsNil(o.DefaultPath) {
		toSerialize["defaultPath"] = o.DefaultPath
	}
	if !IsNil(o.CollectionKey) {
		toSerialize["collectionKey"] = o.CollectionKey
	}
	if !IsNil(o.CollectionParameters) {
		toSerialize["collectionParameters"] = o.CollectionParameters
	}
	return toSerialize, nil
}

func (o *CreateDataSourceDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDataSourceDto := _CreateDataSourceDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateDataSourceDto)

	if err != nil {
		return err
	}

	*o = CreateDataSourceDto(varCreateDataSourceDto)

	return err
}

type NullableCreateDataSourceDto struct {
	value *CreateDataSourceDto
	isSet bool
}

func (v NullableCreateDataSourceDto) Get() *CreateDataSourceDto {
	return v.value
}

func (v *NullableCreateDataSourceDto) Set(val *CreateDataSourceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDataSourceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDataSourceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDataSourceDto(val *CreateDataSourceDto) *NullableCreateDataSourceDto {
	return &NullableCreateDataSourceDto{value: val, isSet: true}
}

func (v NullableCreateDataSourceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDataSourceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


