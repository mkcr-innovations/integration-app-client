/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ScenariosAPI interface {

	/*
	ScenarioByIdControllerArchive Archive scenario

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiScenarioByIdControllerArchiveRequest
	*/
	ScenarioByIdControllerArchive(ctx context.Context, id string) ApiScenarioByIdControllerArchiveRequest

	// ScenarioByIdControllerArchiveExecute executes the request
	ScenarioByIdControllerArchiveExecute(r ApiScenarioByIdControllerArchiveRequest) (*http.Response, error)

	/*
	ScenarioByIdControllerExport Method for ScenarioByIdControllerExport

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiScenarioByIdControllerExportRequest
	*/
	ScenarioByIdControllerExport(ctx context.Context, id string) ApiScenarioByIdControllerExportRequest

	// ScenarioByIdControllerExportExecute executes the request
	//  @return ScenarioExportDto
	ScenarioByIdControllerExportExecute(r ApiScenarioByIdControllerExportRequest) (*ScenarioExportDto, *http.Response, error)

	/*
	ScenarioByIdControllerGet Get scenario

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiScenarioByIdControllerGetRequest
	*/
	ScenarioByIdControllerGet(ctx context.Context, id string) ApiScenarioByIdControllerGetRequest

	// ScenarioByIdControllerGetExecute executes the request
	//  @return ScenarioDto
	ScenarioByIdControllerGetExecute(r ApiScenarioByIdControllerGetRequest) (*ScenarioDto, *http.Response, error)

	/*
	ScenarioByIdControllerPatch Patch scenario

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiScenarioByIdControllerPatchRequest
	*/
	ScenarioByIdControllerPatch(ctx context.Context, id string) ApiScenarioByIdControllerPatchRequest

	// ScenarioByIdControllerPatchExecute executes the request
	//  @return ScenarioDto
	ScenarioByIdControllerPatchExecute(r ApiScenarioByIdControllerPatchRequest) (*ScenarioDto, *http.Response, error)

	/*
	ScenarioByIdControllerPut Put scenario

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiScenarioByIdControllerPutRequest
	*/
	ScenarioByIdControllerPut(ctx context.Context, id string) ApiScenarioByIdControllerPutRequest

	// ScenarioByIdControllerPutExecute executes the request
	//  @return ScenarioDto
	ScenarioByIdControllerPutExecute(r ApiScenarioByIdControllerPutRequest) (*ScenarioDto, *http.Response, error)

	/*
	ScenariosControllerCreate Create scenario

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiScenariosControllerCreateRequest
	*/
	ScenariosControllerCreate(ctx context.Context) ApiScenariosControllerCreateRequest

	// ScenariosControllerCreateExecute executes the request
	//  @return ScenarioDto
	ScenariosControllerCreateExecute(r ApiScenariosControllerCreateRequest) (*ScenarioDto, *http.Response, error)

	/*
	ScenariosControllerList List scenarios

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiScenariosControllerListRequest
	*/
	ScenariosControllerList(ctx context.Context) ApiScenariosControllerListRequest

	// ScenariosControllerListExecute executes the request
	//  @return ScenariosControllerList200Response
	ScenariosControllerListExecute(r ApiScenariosControllerListRequest) (*ScenariosControllerList200Response, *http.Response, error)
}

// ScenariosAPIService ScenariosAPI service
type ScenariosAPIService service

type ApiScenarioByIdControllerArchiveRequest struct {
	ctx context.Context
	ApiService ScenariosAPI
	id string
}

func (r ApiScenarioByIdControllerArchiveRequest) Execute() (*http.Response, error) {
	return r.ApiService.ScenarioByIdControllerArchiveExecute(r)
}

/*
ScenarioByIdControllerArchive Archive scenario

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiScenarioByIdControllerArchiveRequest
*/
func (a *ScenariosAPIService) ScenarioByIdControllerArchive(ctx context.Context, id string) ApiScenarioByIdControllerArchiveRequest {
	return ApiScenarioByIdControllerArchiveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ScenariosAPIService) ScenarioByIdControllerArchiveExecute(r ApiScenarioByIdControllerArchiveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScenariosAPIService.ScenarioByIdControllerArchive")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scenarios/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiScenarioByIdControllerExportRequest struct {
	ctx context.Context
	ApiService ScenariosAPI
	id string
}

func (r ApiScenarioByIdControllerExportRequest) Execute() (*ScenarioExportDto, *http.Response, error) {
	return r.ApiService.ScenarioByIdControllerExportExecute(r)
}

/*
ScenarioByIdControllerExport Method for ScenarioByIdControllerExport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiScenarioByIdControllerExportRequest
*/
func (a *ScenariosAPIService) ScenarioByIdControllerExport(ctx context.Context, id string) ApiScenarioByIdControllerExportRequest {
	return ApiScenarioByIdControllerExportRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScenarioExportDto
func (a *ScenariosAPIService) ScenarioByIdControllerExportExecute(r ApiScenarioByIdControllerExportRequest) (*ScenarioExportDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScenarioExportDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScenariosAPIService.ScenarioByIdControllerExport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scenarios/{id}/export"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScenarioByIdControllerGetRequest struct {
	ctx context.Context
	ApiService ScenariosAPI
	id string
}

func (r ApiScenarioByIdControllerGetRequest) Execute() (*ScenarioDto, *http.Response, error) {
	return r.ApiService.ScenarioByIdControllerGetExecute(r)
}

/*
ScenarioByIdControllerGet Get scenario

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiScenarioByIdControllerGetRequest
*/
func (a *ScenariosAPIService) ScenarioByIdControllerGet(ctx context.Context, id string) ApiScenarioByIdControllerGetRequest {
	return ApiScenarioByIdControllerGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScenarioDto
func (a *ScenariosAPIService) ScenarioByIdControllerGetExecute(r ApiScenarioByIdControllerGetRequest) (*ScenarioDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScenarioDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScenariosAPIService.ScenarioByIdControllerGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scenarios/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScenarioByIdControllerPatchRequest struct {
	ctx context.Context
	ApiService ScenariosAPI
	id string
	updateScenarioDto *UpdateScenarioDto
}

func (r ApiScenarioByIdControllerPatchRequest) UpdateScenarioDto(updateScenarioDto UpdateScenarioDto) ApiScenarioByIdControllerPatchRequest {
	r.updateScenarioDto = &updateScenarioDto
	return r
}

func (r ApiScenarioByIdControllerPatchRequest) Execute() (*ScenarioDto, *http.Response, error) {
	return r.ApiService.ScenarioByIdControllerPatchExecute(r)
}

/*
ScenarioByIdControllerPatch Patch scenario

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiScenarioByIdControllerPatchRequest
*/
func (a *ScenariosAPIService) ScenarioByIdControllerPatch(ctx context.Context, id string) ApiScenarioByIdControllerPatchRequest {
	return ApiScenarioByIdControllerPatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScenarioDto
func (a *ScenariosAPIService) ScenarioByIdControllerPatchExecute(r ApiScenarioByIdControllerPatchRequest) (*ScenarioDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScenarioDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScenariosAPIService.ScenarioByIdControllerPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scenarios/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateScenarioDto == nil {
		return localVarReturnValue, nil, reportError("updateScenarioDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateScenarioDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScenarioByIdControllerPutRequest struct {
	ctx context.Context
	ApiService ScenariosAPI
	id string
	updateScenarioDto *UpdateScenarioDto
}

func (r ApiScenarioByIdControllerPutRequest) UpdateScenarioDto(updateScenarioDto UpdateScenarioDto) ApiScenarioByIdControllerPutRequest {
	r.updateScenarioDto = &updateScenarioDto
	return r
}

func (r ApiScenarioByIdControllerPutRequest) Execute() (*ScenarioDto, *http.Response, error) {
	return r.ApiService.ScenarioByIdControllerPutExecute(r)
}

/*
ScenarioByIdControllerPut Put scenario

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiScenarioByIdControllerPutRequest
*/
func (a *ScenariosAPIService) ScenarioByIdControllerPut(ctx context.Context, id string) ApiScenarioByIdControllerPutRequest {
	return ApiScenarioByIdControllerPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScenarioDto
func (a *ScenariosAPIService) ScenarioByIdControllerPutExecute(r ApiScenarioByIdControllerPutRequest) (*ScenarioDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScenarioDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScenariosAPIService.ScenarioByIdControllerPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scenarios/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateScenarioDto == nil {
		return localVarReturnValue, nil, reportError("updateScenarioDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateScenarioDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScenariosControllerCreateRequest struct {
	ctx context.Context
	ApiService ScenariosAPI
	createScenarioDto *CreateScenarioDto
}

func (r ApiScenariosControllerCreateRequest) CreateScenarioDto(createScenarioDto CreateScenarioDto) ApiScenariosControllerCreateRequest {
	r.createScenarioDto = &createScenarioDto
	return r
}

func (r ApiScenariosControllerCreateRequest) Execute() (*ScenarioDto, *http.Response, error) {
	return r.ApiService.ScenariosControllerCreateExecute(r)
}

/*
ScenariosControllerCreate Create scenario

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScenariosControllerCreateRequest
*/
func (a *ScenariosAPIService) ScenariosControllerCreate(ctx context.Context) ApiScenariosControllerCreateRequest {
	return ApiScenariosControllerCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ScenarioDto
func (a *ScenariosAPIService) ScenariosControllerCreateExecute(r ApiScenariosControllerCreateRequest) (*ScenarioDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScenarioDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScenariosAPIService.ScenariosControllerCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scenarios"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createScenarioDto == nil {
		return localVarReturnValue, nil, reportError("createScenarioDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createScenarioDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScenariosControllerListRequest struct {
	ctx context.Context
	ApiService ScenariosAPI
	limit *float32
	cursor *string
	search *string
	connectorId *string
}

func (r ApiScenariosControllerListRequest) Limit(limit float32) ApiScenariosControllerListRequest {
	r.limit = &limit
	return r
}

func (r ApiScenariosControllerListRequest) Cursor(cursor string) ApiScenariosControllerListRequest {
	r.cursor = &cursor
	return r
}

func (r ApiScenariosControllerListRequest) Search(search string) ApiScenariosControllerListRequest {
	r.search = &search
	return r
}

func (r ApiScenariosControllerListRequest) ConnectorId(connectorId string) ApiScenariosControllerListRequest {
	r.connectorId = &connectorId
	return r
}

func (r ApiScenariosControllerListRequest) Execute() (*ScenariosControllerList200Response, *http.Response, error) {
	return r.ApiService.ScenariosControllerListExecute(r)
}

/*
ScenariosControllerList List scenarios

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScenariosControllerListRequest
*/
func (a *ScenariosAPIService) ScenariosControllerList(ctx context.Context) ApiScenariosControllerListRequest {
	return ApiScenariosControllerListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ScenariosControllerList200Response
func (a *ScenariosAPIService) ScenariosControllerListExecute(r ApiScenariosControllerListRequest) (*ScenariosControllerList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScenariosControllerList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScenariosAPIService.ScenariosControllerList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scenarios"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.connectorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectorId", r.connectorId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
