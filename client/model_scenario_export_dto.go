/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScenarioExportDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScenarioExportDto{}

// ScenarioExportDto struct for ScenarioExportDto
type ScenarioExportDto struct {
	Key *string `json:"key,omitempty"`
	Name string `json:"name"`
	Elements map[string]interface{} `json:"elements,omitempty"`
}

type _ScenarioExportDto ScenarioExportDto

// NewScenarioExportDto instantiates a new ScenarioExportDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScenarioExportDto(name string) *ScenarioExportDto {
	this := ScenarioExportDto{}
	this.Name = name
	return &this
}

// NewScenarioExportDtoWithDefaults instantiates a new ScenarioExportDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScenarioExportDtoWithDefaults() *ScenarioExportDto {
	this := ScenarioExportDto{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ScenarioExportDto) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScenarioExportDto) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ScenarioExportDto) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ScenarioExportDto) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value
func (o *ScenarioExportDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ScenarioExportDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ScenarioExportDto) SetName(v string) {
	o.Name = v
}

// GetElements returns the Elements field value if set, zero value otherwise.
func (o *ScenarioExportDto) GetElements() map[string]interface{} {
	if o == nil || IsNil(o.Elements) {
		var ret map[string]interface{}
		return ret
	}
	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScenarioExportDto) GetElementsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Elements) {
		return map[string]interface{}{}, false
	}
	return o.Elements, true
}

// HasElements returns a boolean if a field has been set.
func (o *ScenarioExportDto) HasElements() bool {
	if o != nil && !IsNil(o.Elements) {
		return true
	}

	return false
}

// SetElements gets a reference to the given map[string]interface{} and assigns it to the Elements field.
func (o *ScenarioExportDto) SetElements(v map[string]interface{}) {
	o.Elements = v
}

func (o ScenarioExportDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScenarioExportDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Elements) {
		toSerialize["elements"] = o.Elements
	}
	return toSerialize, nil
}

func (o *ScenarioExportDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScenarioExportDto := _ScenarioExportDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScenarioExportDto)

	if err != nil {
		return err
	}

	*o = ScenarioExportDto(varScenarioExportDto)

	return err
}

type NullableScenarioExportDto struct {
	value *ScenarioExportDto
	isSet bool
}

func (v NullableScenarioExportDto) Get() *ScenarioExportDto {
	return v.value
}

func (v *NullableScenarioExportDto) Set(val *ScenarioExportDto) {
	v.value = val
	v.isSet = true
}

func (v NullableScenarioExportDto) IsSet() bool {
	return v.isSet
}

func (v *NullableScenarioExportDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScenarioExportDto(val *ScenarioExportDto) *NullableScenarioExportDto {
	return &NullableScenarioExportDto{value: val, isSet: true}
}

func (v NullableScenarioExportDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScenarioExportDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


