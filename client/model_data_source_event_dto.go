/*
Integration Engine API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataSourceEventDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSourceEventDto{}

// DataSourceEventDto struct for DataSourceEventDto
type DataSourceEventDto struct {
	Id string `json:"id"`
	UserId string `json:"userId"`
	User *CustomerDto `json:"user,omitempty"`
	DataSourceInstanceId string `json:"dataSourceInstanceId"`
	DataSourceInstance *DataSourceInstanceDto `json:"dataSourceInstance,omitempty"`
	ConnectionId string `json:"connectionId"`
	Connection *ConnectionDto `json:"connection,omitempty"`
	IntegrationId string `json:"integrationId"`
	Integration *IntegrationDto `json:"integration,omitempty"`
	Event map[string]interface{} `json:"event"`
	Datetime string `json:"datetime"`
	LaunchedFlowRunIds []string `json:"launchedFlowRunIds"`
	Error map[string]interface{} `json:"error,omitempty"`
	Logs map[string]interface{} `json:"logs,omitempty"`
}

type _DataSourceEventDto DataSourceEventDto

// NewDataSourceEventDto instantiates a new DataSourceEventDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSourceEventDto(id string, userId string, dataSourceInstanceId string, connectionId string, integrationId string, event map[string]interface{}, datetime string, launchedFlowRunIds []string) *DataSourceEventDto {
	this := DataSourceEventDto{}
	this.Id = id
	this.UserId = userId
	this.DataSourceInstanceId = dataSourceInstanceId
	this.ConnectionId = connectionId
	this.IntegrationId = integrationId
	this.Event = event
	this.Datetime = datetime
	this.LaunchedFlowRunIds = launchedFlowRunIds
	return &this
}

// NewDataSourceEventDtoWithDefaults instantiates a new DataSourceEventDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceEventDtoWithDefaults() *DataSourceEventDto {
	this := DataSourceEventDto{}
	return &this
}

// GetId returns the Id field value
func (o *DataSourceEventDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DataSourceEventDto) SetId(v string) {
	o.Id = v
}

// GetUserId returns the UserId field value
func (o *DataSourceEventDto) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *DataSourceEventDto) SetUserId(v string) {
	o.UserId = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *DataSourceEventDto) GetUser() CustomerDto {
	if o == nil || IsNil(o.User) {
		var ret CustomerDto
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetUserOk() (*CustomerDto, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *DataSourceEventDto) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given CustomerDto and assigns it to the User field.
func (o *DataSourceEventDto) SetUser(v CustomerDto) {
	o.User = &v
}

// GetDataSourceInstanceId returns the DataSourceInstanceId field value
func (o *DataSourceEventDto) GetDataSourceInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataSourceInstanceId
}

// GetDataSourceInstanceIdOk returns a tuple with the DataSourceInstanceId field value
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetDataSourceInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSourceInstanceId, true
}

// SetDataSourceInstanceId sets field value
func (o *DataSourceEventDto) SetDataSourceInstanceId(v string) {
	o.DataSourceInstanceId = v
}

// GetDataSourceInstance returns the DataSourceInstance field value if set, zero value otherwise.
func (o *DataSourceEventDto) GetDataSourceInstance() DataSourceInstanceDto {
	if o == nil || IsNil(o.DataSourceInstance) {
		var ret DataSourceInstanceDto
		return ret
	}
	return *o.DataSourceInstance
}

// GetDataSourceInstanceOk returns a tuple with the DataSourceInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetDataSourceInstanceOk() (*DataSourceInstanceDto, bool) {
	if o == nil || IsNil(o.DataSourceInstance) {
		return nil, false
	}
	return o.DataSourceInstance, true
}

// HasDataSourceInstance returns a boolean if a field has been set.
func (o *DataSourceEventDto) HasDataSourceInstance() bool {
	if o != nil && !IsNil(o.DataSourceInstance) {
		return true
	}

	return false
}

// SetDataSourceInstance gets a reference to the given DataSourceInstanceDto and assigns it to the DataSourceInstance field.
func (o *DataSourceEventDto) SetDataSourceInstance(v DataSourceInstanceDto) {
	o.DataSourceInstance = &v
}

// GetConnectionId returns the ConnectionId field value
func (o *DataSourceEventDto) GetConnectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetConnectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *DataSourceEventDto) SetConnectionId(v string) {
	o.ConnectionId = v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *DataSourceEventDto) GetConnection() ConnectionDto {
	if o == nil || IsNil(o.Connection) {
		var ret ConnectionDto
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetConnectionOk() (*ConnectionDto, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *DataSourceEventDto) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given ConnectionDto and assigns it to the Connection field.
func (o *DataSourceEventDto) SetConnection(v ConnectionDto) {
	o.Connection = &v
}

// GetIntegrationId returns the IntegrationId field value
func (o *DataSourceEventDto) GetIntegrationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetIntegrationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegrationId, true
}

// SetIntegrationId sets field value
func (o *DataSourceEventDto) SetIntegrationId(v string) {
	o.IntegrationId = v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *DataSourceEventDto) GetIntegration() IntegrationDto {
	if o == nil || IsNil(o.Integration) {
		var ret IntegrationDto
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetIntegrationOk() (*IntegrationDto, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *DataSourceEventDto) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given IntegrationDto and assigns it to the Integration field.
func (o *DataSourceEventDto) SetIntegration(v IntegrationDto) {
	o.Integration = &v
}

// GetEvent returns the Event field value
func (o *DataSourceEventDto) GetEvent() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetEventOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Event, true
}

// SetEvent sets field value
func (o *DataSourceEventDto) SetEvent(v map[string]interface{}) {
	o.Event = v
}

// GetDatetime returns the Datetime field value
func (o *DataSourceEventDto) GetDatetime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetDatetimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datetime, true
}

// SetDatetime sets field value
func (o *DataSourceEventDto) SetDatetime(v string) {
	o.Datetime = v
}

// GetLaunchedFlowRunIds returns the LaunchedFlowRunIds field value
func (o *DataSourceEventDto) GetLaunchedFlowRunIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.LaunchedFlowRunIds
}

// GetLaunchedFlowRunIdsOk returns a tuple with the LaunchedFlowRunIds field value
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetLaunchedFlowRunIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LaunchedFlowRunIds, true
}

// SetLaunchedFlowRunIds sets field value
func (o *DataSourceEventDto) SetLaunchedFlowRunIds(v []string) {
	o.LaunchedFlowRunIds = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *DataSourceEventDto) GetError() map[string]interface{} {
	if o == nil || IsNil(o.Error) {
		var ret map[string]interface{}
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetErrorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Error) {
		return map[string]interface{}{}, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *DataSourceEventDto) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given map[string]interface{} and assigns it to the Error field.
func (o *DataSourceEventDto) SetError(v map[string]interface{}) {
	o.Error = v
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *DataSourceEventDto) GetLogs() map[string]interface{} {
	if o == nil || IsNil(o.Logs) {
		var ret map[string]interface{}
		return ret
	}
	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceEventDto) GetLogsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Logs) {
		return map[string]interface{}{}, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *DataSourceEventDto) HasLogs() bool {
	if o != nil && !IsNil(o.Logs) {
		return true
	}

	return false
}

// SetLogs gets a reference to the given map[string]interface{} and assigns it to the Logs field.
func (o *DataSourceEventDto) SetLogs(v map[string]interface{}) {
	o.Logs = v
}

func (o DataSourceEventDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSourceEventDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["userId"] = o.UserId
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	toSerialize["dataSourceInstanceId"] = o.DataSourceInstanceId
	if !IsNil(o.DataSourceInstance) {
		toSerialize["dataSourceInstance"] = o.DataSourceInstance
	}
	toSerialize["connectionId"] = o.ConnectionId
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	toSerialize["integrationId"] = o.IntegrationId
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	toSerialize["event"] = o.Event
	toSerialize["datetime"] = o.Datetime
	toSerialize["launchedFlowRunIds"] = o.LaunchedFlowRunIds
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Logs) {
		toSerialize["logs"] = o.Logs
	}
	return toSerialize, nil
}

func (o *DataSourceEventDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"userId",
		"dataSourceInstanceId",
		"connectionId",
		"integrationId",
		"event",
		"datetime",
		"launchedFlowRunIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataSourceEventDto := _DataSourceEventDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataSourceEventDto)

	if err != nil {
		return err
	}

	*o = DataSourceEventDto(varDataSourceEventDto)

	return err
}

type NullableDataSourceEventDto struct {
	value *DataSourceEventDto
	isSet bool
}

func (v NullableDataSourceEventDto) Get() *DataSourceEventDto {
	return v.value
}

func (v *NullableDataSourceEventDto) Set(val *DataSourceEventDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceEventDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceEventDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceEventDto(val *DataSourceEventDto) *NullableDataSourceEventDto {
	return &NullableDataSourceEventDto{value: val, isSet: true}
}

func (v NullableDataSourceEventDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceEventDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


