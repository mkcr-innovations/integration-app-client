/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppEventSubscriptionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppEventSubscriptionDto{}

// AppEventSubscriptionDto struct for AppEventSubscriptionDto
type AppEventSubscriptionDto struct {
	Id string `json:"id"`
	Name *string `json:"name,omitempty"`
	Revision *string `json:"revision,omitempty"`
	UserId *string `json:"userId,omitempty"`
	User *CustomerDto `json:"user,omitempty"`
	InstanceKey *string `json:"instanceKey,omitempty"`
	AppEventTypeId *string `json:"appEventTypeId,omitempty"`
	AppEventType *AppEventTypeDto `json:"appEventType,omitempty"`
	Schema map[string]interface{} `json:"schema,omitempty"`
	IsSubscribed *bool `json:"isSubscribed,omitempty"`
	WebhookUri *string `json:"webhookUri,omitempty"`
	SubscriptionRequest map[string]interface{} `json:"subscriptionRequest,omitempty"`
	SubscriptionResponse map[string]interface{} `json:"subscriptionResponse,omitempty"`
}

type _AppEventSubscriptionDto AppEventSubscriptionDto

// NewAppEventSubscriptionDto instantiates a new AppEventSubscriptionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppEventSubscriptionDto(id string) *AppEventSubscriptionDto {
	this := AppEventSubscriptionDto{}
	this.Id = id
	return &this
}

// NewAppEventSubscriptionDtoWithDefaults instantiates a new AppEventSubscriptionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppEventSubscriptionDtoWithDefaults() *AppEventSubscriptionDto {
	this := AppEventSubscriptionDto{}
	return &this
}

// GetId returns the Id field value
func (o *AppEventSubscriptionDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AppEventSubscriptionDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AppEventSubscriptionDto) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AppEventSubscriptionDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEventSubscriptionDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AppEventSubscriptionDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AppEventSubscriptionDto) SetName(v string) {
	o.Name = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *AppEventSubscriptionDto) GetRevision() string {
	if o == nil || IsNil(o.Revision) {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEventSubscriptionDto) GetRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *AppEventSubscriptionDto) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *AppEventSubscriptionDto) SetRevision(v string) {
	o.Revision = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *AppEventSubscriptionDto) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEventSubscriptionDto) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *AppEventSubscriptionDto) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *AppEventSubscriptionDto) SetUserId(v string) {
	o.UserId = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AppEventSubscriptionDto) GetUser() CustomerDto {
	if o == nil || IsNil(o.User) {
		var ret CustomerDto
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEventSubscriptionDto) GetUserOk() (*CustomerDto, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AppEventSubscriptionDto) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given CustomerDto and assigns it to the User field.
func (o *AppEventSubscriptionDto) SetUser(v CustomerDto) {
	o.User = &v
}

// GetInstanceKey returns the InstanceKey field value if set, zero value otherwise.
func (o *AppEventSubscriptionDto) GetInstanceKey() string {
	if o == nil || IsNil(o.InstanceKey) {
		var ret string
		return ret
	}
	return *o.InstanceKey
}

// GetInstanceKeyOk returns a tuple with the InstanceKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEventSubscriptionDto) GetInstanceKeyOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceKey) {
		return nil, false
	}
	return o.InstanceKey, true
}

// HasInstanceKey returns a boolean if a field has been set.
func (o *AppEventSubscriptionDto) HasInstanceKey() bool {
	if o != nil && !IsNil(o.InstanceKey) {
		return true
	}

	return false
}

// SetInstanceKey gets a reference to the given string and assigns it to the InstanceKey field.
func (o *AppEventSubscriptionDto) SetInstanceKey(v string) {
	o.InstanceKey = &v
}

// GetAppEventTypeId returns the AppEventTypeId field value if set, zero value otherwise.
func (o *AppEventSubscriptionDto) GetAppEventTypeId() string {
	if o == nil || IsNil(o.AppEventTypeId) {
		var ret string
		return ret
	}
	return *o.AppEventTypeId
}

// GetAppEventTypeIdOk returns a tuple with the AppEventTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEventSubscriptionDto) GetAppEventTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppEventTypeId) {
		return nil, false
	}
	return o.AppEventTypeId, true
}

// HasAppEventTypeId returns a boolean if a field has been set.
func (o *AppEventSubscriptionDto) HasAppEventTypeId() bool {
	if o != nil && !IsNil(o.AppEventTypeId) {
		return true
	}

	return false
}

// SetAppEventTypeId gets a reference to the given string and assigns it to the AppEventTypeId field.
func (o *AppEventSubscriptionDto) SetAppEventTypeId(v string) {
	o.AppEventTypeId = &v
}

// GetAppEventType returns the AppEventType field value if set, zero value otherwise.
func (o *AppEventSubscriptionDto) GetAppEventType() AppEventTypeDto {
	if o == nil || IsNil(o.AppEventType) {
		var ret AppEventTypeDto
		return ret
	}
	return *o.AppEventType
}

// GetAppEventTypeOk returns a tuple with the AppEventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEventSubscriptionDto) GetAppEventTypeOk() (*AppEventTypeDto, bool) {
	if o == nil || IsNil(o.AppEventType) {
		return nil, false
	}
	return o.AppEventType, true
}

// HasAppEventType returns a boolean if a field has been set.
func (o *AppEventSubscriptionDto) HasAppEventType() bool {
	if o != nil && !IsNil(o.AppEventType) {
		return true
	}

	return false
}

// SetAppEventType gets a reference to the given AppEventTypeDto and assigns it to the AppEventType field.
func (o *AppEventSubscriptionDto) SetAppEventType(v AppEventTypeDto) {
	o.AppEventType = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *AppEventSubscriptionDto) GetSchema() map[string]interface{} {
	if o == nil || IsNil(o.Schema) {
		var ret map[string]interface{}
		return ret
	}
	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEventSubscriptionDto) GetSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Schema) {
		return map[string]interface{}{}, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *AppEventSubscriptionDto) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given map[string]interface{} and assigns it to the Schema field.
func (o *AppEventSubscriptionDto) SetSchema(v map[string]interface{}) {
	o.Schema = v
}

// GetIsSubscribed returns the IsSubscribed field value if set, zero value otherwise.
func (o *AppEventSubscriptionDto) GetIsSubscribed() bool {
	if o == nil || IsNil(o.IsSubscribed) {
		var ret bool
		return ret
	}
	return *o.IsSubscribed
}

// GetIsSubscribedOk returns a tuple with the IsSubscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEventSubscriptionDto) GetIsSubscribedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSubscribed) {
		return nil, false
	}
	return o.IsSubscribed, true
}

// HasIsSubscribed returns a boolean if a field has been set.
func (o *AppEventSubscriptionDto) HasIsSubscribed() bool {
	if o != nil && !IsNil(o.IsSubscribed) {
		return true
	}

	return false
}

// SetIsSubscribed gets a reference to the given bool and assigns it to the IsSubscribed field.
func (o *AppEventSubscriptionDto) SetIsSubscribed(v bool) {
	o.IsSubscribed = &v
}

// GetWebhookUri returns the WebhookUri field value if set, zero value otherwise.
func (o *AppEventSubscriptionDto) GetWebhookUri() string {
	if o == nil || IsNil(o.WebhookUri) {
		var ret string
		return ret
	}
	return *o.WebhookUri
}

// GetWebhookUriOk returns a tuple with the WebhookUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEventSubscriptionDto) GetWebhookUriOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookUri) {
		return nil, false
	}
	return o.WebhookUri, true
}

// HasWebhookUri returns a boolean if a field has been set.
func (o *AppEventSubscriptionDto) HasWebhookUri() bool {
	if o != nil && !IsNil(o.WebhookUri) {
		return true
	}

	return false
}

// SetWebhookUri gets a reference to the given string and assigns it to the WebhookUri field.
func (o *AppEventSubscriptionDto) SetWebhookUri(v string) {
	o.WebhookUri = &v
}

// GetSubscriptionRequest returns the SubscriptionRequest field value if set, zero value otherwise.
func (o *AppEventSubscriptionDto) GetSubscriptionRequest() map[string]interface{} {
	if o == nil || IsNil(o.SubscriptionRequest) {
		var ret map[string]interface{}
		return ret
	}
	return o.SubscriptionRequest
}

// GetSubscriptionRequestOk returns a tuple with the SubscriptionRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEventSubscriptionDto) GetSubscriptionRequestOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SubscriptionRequest) {
		return map[string]interface{}{}, false
	}
	return o.SubscriptionRequest, true
}

// HasSubscriptionRequest returns a boolean if a field has been set.
func (o *AppEventSubscriptionDto) HasSubscriptionRequest() bool {
	if o != nil && !IsNil(o.SubscriptionRequest) {
		return true
	}

	return false
}

// SetSubscriptionRequest gets a reference to the given map[string]interface{} and assigns it to the SubscriptionRequest field.
func (o *AppEventSubscriptionDto) SetSubscriptionRequest(v map[string]interface{}) {
	o.SubscriptionRequest = v
}

// GetSubscriptionResponse returns the SubscriptionResponse field value if set, zero value otherwise.
func (o *AppEventSubscriptionDto) GetSubscriptionResponse() map[string]interface{} {
	if o == nil || IsNil(o.SubscriptionResponse) {
		var ret map[string]interface{}
		return ret
	}
	return o.SubscriptionResponse
}

// GetSubscriptionResponseOk returns a tuple with the SubscriptionResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEventSubscriptionDto) GetSubscriptionResponseOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SubscriptionResponse) {
		return map[string]interface{}{}, false
	}
	return o.SubscriptionResponse, true
}

// HasSubscriptionResponse returns a boolean if a field has been set.
func (o *AppEventSubscriptionDto) HasSubscriptionResponse() bool {
	if o != nil && !IsNil(o.SubscriptionResponse) {
		return true
	}

	return false
}

// SetSubscriptionResponse gets a reference to the given map[string]interface{} and assigns it to the SubscriptionResponse field.
func (o *AppEventSubscriptionDto) SetSubscriptionResponse(v map[string]interface{}) {
	o.SubscriptionResponse = v
}

func (o AppEventSubscriptionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppEventSubscriptionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.InstanceKey) {
		toSerialize["instanceKey"] = o.InstanceKey
	}
	if !IsNil(o.AppEventTypeId) {
		toSerialize["appEventTypeId"] = o.AppEventTypeId
	}
	if !IsNil(o.AppEventType) {
		toSerialize["appEventType"] = o.AppEventType
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	if !IsNil(o.IsSubscribed) {
		toSerialize["isSubscribed"] = o.IsSubscribed
	}
	if !IsNil(o.WebhookUri) {
		toSerialize["webhookUri"] = o.WebhookUri
	}
	if !IsNil(o.SubscriptionRequest) {
		toSerialize["subscriptionRequest"] = o.SubscriptionRequest
	}
	if !IsNil(o.SubscriptionResponse) {
		toSerialize["subscriptionResponse"] = o.SubscriptionResponse
	}
	return toSerialize, nil
}

func (o *AppEventSubscriptionDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppEventSubscriptionDto := _AppEventSubscriptionDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppEventSubscriptionDto)

	if err != nil {
		return err
	}

	*o = AppEventSubscriptionDto(varAppEventSubscriptionDto)

	return err
}

type NullableAppEventSubscriptionDto struct {
	value *AppEventSubscriptionDto
	isSet bool
}

func (v NullableAppEventSubscriptionDto) Get() *AppEventSubscriptionDto {
	return v.value
}

func (v *NullableAppEventSubscriptionDto) Set(val *AppEventSubscriptionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAppEventSubscriptionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAppEventSubscriptionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppEventSubscriptionDto(val *AppEventSubscriptionDto) *NullableAppEventSubscriptionDto {
	return &NullableAppEventSubscriptionDto{value: val, isSet: true}
}

func (v NullableAppEventSubscriptionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppEventSubscriptionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


