/*
Integration Engine API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the UpdateIntegrationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateIntegrationDto{}

// UpdateIntegrationDto struct for UpdateIntegrationDto
type UpdateIntegrationDto struct {
	Key *string `json:"key,omitempty"`
	Name *string `json:"name,omitempty"`
	BaseUri *string `json:"baseUri,omitempty"`
	IsTest *bool `json:"isTest,omitempty"`
	AuthType *string `json:"authType,omitempty"`
	OAuthCallbackUri *string `json:"oAuthCallbackUri,omitempty"`
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	EncryptedParameters map[string]interface{} `json:"encryptedParameters,omitempty"`
	LogoBase64 *string `json:"logoBase64,omitempty"`
	LogoUri *string `json:"logoUri,omitempty"`
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`
}

// NewUpdateIntegrationDto instantiates a new UpdateIntegrationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateIntegrationDto() *UpdateIntegrationDto {
	this := UpdateIntegrationDto{}
	return &this
}

// NewUpdateIntegrationDtoWithDefaults instantiates a new UpdateIntegrationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateIntegrationDtoWithDefaults() *UpdateIntegrationDto {
	this := UpdateIntegrationDto{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *UpdateIntegrationDto) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntegrationDto) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *UpdateIntegrationDto) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *UpdateIntegrationDto) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateIntegrationDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntegrationDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateIntegrationDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateIntegrationDto) SetName(v string) {
	o.Name = &v
}

// GetBaseUri returns the BaseUri field value if set, zero value otherwise.
func (o *UpdateIntegrationDto) GetBaseUri() string {
	if o == nil || IsNil(o.BaseUri) {
		var ret string
		return ret
	}
	return *o.BaseUri
}

// GetBaseUriOk returns a tuple with the BaseUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntegrationDto) GetBaseUriOk() (*string, bool) {
	if o == nil || IsNil(o.BaseUri) {
		return nil, false
	}
	return o.BaseUri, true
}

// HasBaseUri returns a boolean if a field has been set.
func (o *UpdateIntegrationDto) HasBaseUri() bool {
	if o != nil && !IsNil(o.BaseUri) {
		return true
	}

	return false
}

// SetBaseUri gets a reference to the given string and assigns it to the BaseUri field.
func (o *UpdateIntegrationDto) SetBaseUri(v string) {
	o.BaseUri = &v
}

// GetIsTest returns the IsTest field value if set, zero value otherwise.
func (o *UpdateIntegrationDto) GetIsTest() bool {
	if o == nil || IsNil(o.IsTest) {
		var ret bool
		return ret
	}
	return *o.IsTest
}

// GetIsTestOk returns a tuple with the IsTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntegrationDto) GetIsTestOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTest) {
		return nil, false
	}
	return o.IsTest, true
}

// HasIsTest returns a boolean if a field has been set.
func (o *UpdateIntegrationDto) HasIsTest() bool {
	if o != nil && !IsNil(o.IsTest) {
		return true
	}

	return false
}

// SetIsTest gets a reference to the given bool and assigns it to the IsTest field.
func (o *UpdateIntegrationDto) SetIsTest(v bool) {
	o.IsTest = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *UpdateIntegrationDto) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntegrationDto) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *UpdateIntegrationDto) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *UpdateIntegrationDto) SetAuthType(v string) {
	o.AuthType = &v
}

// GetOAuthCallbackUri returns the OAuthCallbackUri field value if set, zero value otherwise.
func (o *UpdateIntegrationDto) GetOAuthCallbackUri() string {
	if o == nil || IsNil(o.OAuthCallbackUri) {
		var ret string
		return ret
	}
	return *o.OAuthCallbackUri
}

// GetOAuthCallbackUriOk returns a tuple with the OAuthCallbackUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntegrationDto) GetOAuthCallbackUriOk() (*string, bool) {
	if o == nil || IsNil(o.OAuthCallbackUri) {
		return nil, false
	}
	return o.OAuthCallbackUri, true
}

// HasOAuthCallbackUri returns a boolean if a field has been set.
func (o *UpdateIntegrationDto) HasOAuthCallbackUri() bool {
	if o != nil && !IsNil(o.OAuthCallbackUri) {
		return true
	}

	return false
}

// SetOAuthCallbackUri gets a reference to the given string and assigns it to the OAuthCallbackUri field.
func (o *UpdateIntegrationDto) SetOAuthCallbackUri(v string) {
	o.OAuthCallbackUri = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *UpdateIntegrationDto) GetParameters() map[string]interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntegrationDto) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *UpdateIntegrationDto) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *UpdateIntegrationDto) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetEncryptedParameters returns the EncryptedParameters field value if set, zero value otherwise.
func (o *UpdateIntegrationDto) GetEncryptedParameters() map[string]interface{} {
	if o == nil || IsNil(o.EncryptedParameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.EncryptedParameters
}

// GetEncryptedParametersOk returns a tuple with the EncryptedParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntegrationDto) GetEncryptedParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.EncryptedParameters) {
		return map[string]interface{}{}, false
	}
	return o.EncryptedParameters, true
}

// HasEncryptedParameters returns a boolean if a field has been set.
func (o *UpdateIntegrationDto) HasEncryptedParameters() bool {
	if o != nil && !IsNil(o.EncryptedParameters) {
		return true
	}

	return false
}

// SetEncryptedParameters gets a reference to the given map[string]interface{} and assigns it to the EncryptedParameters field.
func (o *UpdateIntegrationDto) SetEncryptedParameters(v map[string]interface{}) {
	o.EncryptedParameters = v
}

// GetLogoBase64 returns the LogoBase64 field value if set, zero value otherwise.
func (o *UpdateIntegrationDto) GetLogoBase64() string {
	if o == nil || IsNil(o.LogoBase64) {
		var ret string
		return ret
	}
	return *o.LogoBase64
}

// GetLogoBase64Ok returns a tuple with the LogoBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntegrationDto) GetLogoBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.LogoBase64) {
		return nil, false
	}
	return o.LogoBase64, true
}

// HasLogoBase64 returns a boolean if a field has been set.
func (o *UpdateIntegrationDto) HasLogoBase64() bool {
	if o != nil && !IsNil(o.LogoBase64) {
		return true
	}

	return false
}

// SetLogoBase64 gets a reference to the given string and assigns it to the LogoBase64 field.
func (o *UpdateIntegrationDto) SetLogoBase64(v string) {
	o.LogoBase64 = &v
}

// GetLogoUri returns the LogoUri field value if set, zero value otherwise.
func (o *UpdateIntegrationDto) GetLogoUri() string {
	if o == nil || IsNil(o.LogoUri) {
		var ret string
		return ret
	}
	return *o.LogoUri
}

// GetLogoUriOk returns a tuple with the LogoUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntegrationDto) GetLogoUriOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUri) {
		return nil, false
	}
	return o.LogoUri, true
}

// HasLogoUri returns a boolean if a field has been set.
func (o *UpdateIntegrationDto) HasLogoUri() bool {
	if o != nil && !IsNil(o.LogoUri) {
		return true
	}

	return false
}

// SetLogoUri gets a reference to the given string and assigns it to the LogoUri field.
func (o *UpdateIntegrationDto) SetLogoUri(v string) {
	o.LogoUri = &v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *UpdateIntegrationDto) GetArchivedAt() time.Time {
	if o == nil || IsNil(o.ArchivedAt) {
		var ret time.Time
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIntegrationDto) GetArchivedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ArchivedAt) {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *UpdateIntegrationDto) HasArchivedAt() bool {
	if o != nil && !IsNil(o.ArchivedAt) {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given time.Time and assigns it to the ArchivedAt field.
func (o *UpdateIntegrationDto) SetArchivedAt(v time.Time) {
	o.ArchivedAt = &v
}

func (o UpdateIntegrationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateIntegrationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.BaseUri) {
		toSerialize["baseUri"] = o.BaseUri
	}
	if !IsNil(o.IsTest) {
		toSerialize["isTest"] = o.IsTest
	}
	if !IsNil(o.AuthType) {
		toSerialize["authType"] = o.AuthType
	}
	if !IsNil(o.OAuthCallbackUri) {
		toSerialize["oAuthCallbackUri"] = o.OAuthCallbackUri
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.EncryptedParameters) {
		toSerialize["encryptedParameters"] = o.EncryptedParameters
	}
	if !IsNil(o.LogoBase64) {
		toSerialize["logoBase64"] = o.LogoBase64
	}
	if !IsNil(o.LogoUri) {
		toSerialize["logoUri"] = o.LogoUri
	}
	if !IsNil(o.ArchivedAt) {
		toSerialize["archivedAt"] = o.ArchivedAt
	}
	return toSerialize, nil
}

type NullableUpdateIntegrationDto struct {
	value *UpdateIntegrationDto
	isSet bool
}

func (v NullableUpdateIntegrationDto) Get() *UpdateIntegrationDto {
	return v.value
}

func (v *NullableUpdateIntegrationDto) Set(val *UpdateIntegrationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIntegrationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIntegrationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIntegrationDto(val *UpdateIntegrationDto) *NullableUpdateIntegrationDto {
	return &NullableUpdateIntegrationDto{value: val, isSet: true}
}

func (v NullableUpdateIntegrationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIntegrationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


