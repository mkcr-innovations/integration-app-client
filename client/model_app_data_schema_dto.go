/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppDataSchemaDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDataSchemaDto{}

// AppDataSchemaDto struct for AppDataSchemaDto
type AppDataSchemaDto struct {
	Id string `json:"id"`
	Key string `json:"key"`
	Name string `json:"name"`
	Schema map[string]interface{} `json:"schema"`
	Code *string `json:"code,omitempty"`
	ArchivedAt *string `json:"archivedAt,omitempty"`
	Revision *string `json:"revision,omitempty"`
}

type _AppDataSchemaDto AppDataSchemaDto

// NewAppDataSchemaDto instantiates a new AppDataSchemaDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDataSchemaDto(id string, key string, name string, schema map[string]interface{}) *AppDataSchemaDto {
	this := AppDataSchemaDto{}
	this.Id = id
	this.Key = key
	this.Name = name
	this.Schema = schema
	return &this
}

// NewAppDataSchemaDtoWithDefaults instantiates a new AppDataSchemaDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDataSchemaDtoWithDefaults() *AppDataSchemaDto {
	this := AppDataSchemaDto{}
	return &this
}

// GetId returns the Id field value
func (o *AppDataSchemaDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AppDataSchemaDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AppDataSchemaDto) SetId(v string) {
	o.Id = v
}

// GetKey returns the Key field value
func (o *AppDataSchemaDto) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *AppDataSchemaDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *AppDataSchemaDto) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *AppDataSchemaDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppDataSchemaDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppDataSchemaDto) SetName(v string) {
	o.Name = v
}

// GetSchema returns the Schema field value
func (o *AppDataSchemaDto) GetSchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *AppDataSchemaDto) GetSchemaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Schema, true
}

// SetSchema sets field value
func (o *AppDataSchemaDto) SetSchema(v map[string]interface{}) {
	o.Schema = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AppDataSchemaDto) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataSchemaDto) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AppDataSchemaDto) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AppDataSchemaDto) SetCode(v string) {
	o.Code = &v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *AppDataSchemaDto) GetArchivedAt() string {
	if o == nil || IsNil(o.ArchivedAt) {
		var ret string
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataSchemaDto) GetArchivedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ArchivedAt) {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *AppDataSchemaDto) HasArchivedAt() bool {
	if o != nil && !IsNil(o.ArchivedAt) {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given string and assigns it to the ArchivedAt field.
func (o *AppDataSchemaDto) SetArchivedAt(v string) {
	o.ArchivedAt = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *AppDataSchemaDto) GetRevision() string {
	if o == nil || IsNil(o.Revision) {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataSchemaDto) GetRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *AppDataSchemaDto) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *AppDataSchemaDto) SetRevision(v string) {
	o.Revision = &v
}

func (o AppDataSchemaDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDataSchemaDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	toSerialize["schema"] = o.Schema
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.ArchivedAt) {
		toSerialize["archivedAt"] = o.ArchivedAt
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	return toSerialize, nil
}

func (o *AppDataSchemaDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"key",
		"name",
		"schema",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppDataSchemaDto := _AppDataSchemaDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppDataSchemaDto)

	if err != nil {
		return err
	}

	*o = AppDataSchemaDto(varAppDataSchemaDto)

	return err
}

type NullableAppDataSchemaDto struct {
	value *AppDataSchemaDto
	isSet bool
}

func (v NullableAppDataSchemaDto) Get() *AppDataSchemaDto {
	return v.value
}

func (v *NullableAppDataSchemaDto) Set(val *AppDataSchemaDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDataSchemaDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDataSchemaDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDataSchemaDto(val *AppDataSchemaDto) *NullableAppDataSchemaDto {
	return &NullableAppDataSchemaDto{value: val, isSet: true}
}

func (v NullableAppDataSchemaDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDataSchemaDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


