/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataSourceInstanceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSourceInstanceDto{}

// DataSourceInstanceDto struct for DataSourceInstanceDto
type DataSourceInstanceDto struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Revision string `json:"revision"`
	UserId string `json:"userId"`
	ConnectionId string `json:"connectionId"`
	IntegrationId string `json:"integrationId"`
	User *CustomerDto `json:"user,omitempty"`
	Connection *ConnectionDto `json:"connection,omitempty"`
	Integration *IntegrationDto `json:"integration,omitempty"`
	InstanceKey *string `json:"instanceKey,omitempty"`
	DataSourceId *string `json:"dataSourceId,omitempty"`
	DataSourceRevision *string `json:"dataSourceRevision,omitempty"`
	UniversalDataSourceId *string `json:"universalDataSourceId,omitempty"`
	DataSource *DataSourceDto `json:"dataSource,omitempty"`
	CollectionKey *string `json:"collectionKey,omitempty"`
	CollectionParameters map[string]interface{} `json:"collectionParameters,omitempty"`
	DefaultCollectionKey *string `json:"defaultCollectionKey,omitempty"`
	DefaultCollectionParameters map[string]interface{} `json:"defaultCollectionParameters,omitempty"`
	CollectionSpec map[string]interface{} `json:"collectionSpec,omitempty"`
	IsCustomized *bool `json:"isCustomized,omitempty"`
	Udm *string `json:"udm,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	Error map[string]interface{} `json:"error,omitempty"`
	PullUpdatesIntervalSeconds *float32 `json:"pullUpdatesIntervalSeconds,omitempty"`
	NextPullUpdatesTimestamp *float32 `json:"nextPullUpdatesTimestamp,omitempty"`
	FullSyncIntervalSeconds *float32 `json:"fullSyncIntervalSeconds,omitempty"`
	NextFullSyncTimestamp *float32 `json:"nextFullSyncTimestamp,omitempty"`
	// Deprecated
	Path string `json:"path"`
	// Deprecated
	DefaultPath string `json:"defaultPath"`
}

type _DataSourceInstanceDto DataSourceInstanceDto

// NewDataSourceInstanceDto instantiates a new DataSourceInstanceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSourceInstanceDto(id string, name string, revision string, userId string, connectionId string, integrationId string, path string, defaultPath string) *DataSourceInstanceDto {
	this := DataSourceInstanceDto{}
	this.Id = id
	this.Name = name
	this.Revision = revision
	this.UserId = userId
	this.ConnectionId = connectionId
	this.IntegrationId = integrationId
	this.Path = path
	this.DefaultPath = defaultPath
	return &this
}

// NewDataSourceInstanceDtoWithDefaults instantiates a new DataSourceInstanceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceInstanceDtoWithDefaults() *DataSourceInstanceDto {
	this := DataSourceInstanceDto{}
	return &this
}

// GetId returns the Id field value
func (o *DataSourceInstanceDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DataSourceInstanceDto) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DataSourceInstanceDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DataSourceInstanceDto) SetName(v string) {
	o.Name = v
}

// GetRevision returns the Revision field value
func (o *DataSourceInstanceDto) GetRevision() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetRevisionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *DataSourceInstanceDto) SetRevision(v string) {
	o.Revision = v
}

// GetUserId returns the UserId field value
func (o *DataSourceInstanceDto) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *DataSourceInstanceDto) SetUserId(v string) {
	o.UserId = v
}

// GetConnectionId returns the ConnectionId field value
func (o *DataSourceInstanceDto) GetConnectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetConnectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *DataSourceInstanceDto) SetConnectionId(v string) {
	o.ConnectionId = v
}

// GetIntegrationId returns the IntegrationId field value
func (o *DataSourceInstanceDto) GetIntegrationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetIntegrationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegrationId, true
}

// SetIntegrationId sets field value
func (o *DataSourceInstanceDto) SetIntegrationId(v string) {
	o.IntegrationId = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetUser() CustomerDto {
	if o == nil || IsNil(o.User) {
		var ret CustomerDto
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetUserOk() (*CustomerDto, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given CustomerDto and assigns it to the User field.
func (o *DataSourceInstanceDto) SetUser(v CustomerDto) {
	o.User = &v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetConnection() ConnectionDto {
	if o == nil || IsNil(o.Connection) {
		var ret ConnectionDto
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetConnectionOk() (*ConnectionDto, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given ConnectionDto and assigns it to the Connection field.
func (o *DataSourceInstanceDto) SetConnection(v ConnectionDto) {
	o.Connection = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetIntegration() IntegrationDto {
	if o == nil || IsNil(o.Integration) {
		var ret IntegrationDto
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetIntegrationOk() (*IntegrationDto, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given IntegrationDto and assigns it to the Integration field.
func (o *DataSourceInstanceDto) SetIntegration(v IntegrationDto) {
	o.Integration = &v
}

// GetInstanceKey returns the InstanceKey field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetInstanceKey() string {
	if o == nil || IsNil(o.InstanceKey) {
		var ret string
		return ret
	}
	return *o.InstanceKey
}

// GetInstanceKeyOk returns a tuple with the InstanceKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetInstanceKeyOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceKey) {
		return nil, false
	}
	return o.InstanceKey, true
}

// HasInstanceKey returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasInstanceKey() bool {
	if o != nil && !IsNil(o.InstanceKey) {
		return true
	}

	return false
}

// SetInstanceKey gets a reference to the given string and assigns it to the InstanceKey field.
func (o *DataSourceInstanceDto) SetInstanceKey(v string) {
	o.InstanceKey = &v
}

// GetDataSourceId returns the DataSourceId field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetDataSourceId() string {
	if o == nil || IsNil(o.DataSourceId) {
		var ret string
		return ret
	}
	return *o.DataSourceId
}

// GetDataSourceIdOk returns a tuple with the DataSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetDataSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataSourceId) {
		return nil, false
	}
	return o.DataSourceId, true
}

// HasDataSourceId returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasDataSourceId() bool {
	if o != nil && !IsNil(o.DataSourceId) {
		return true
	}

	return false
}

// SetDataSourceId gets a reference to the given string and assigns it to the DataSourceId field.
func (o *DataSourceInstanceDto) SetDataSourceId(v string) {
	o.DataSourceId = &v
}

// GetDataSourceRevision returns the DataSourceRevision field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetDataSourceRevision() string {
	if o == nil || IsNil(o.DataSourceRevision) {
		var ret string
		return ret
	}
	return *o.DataSourceRevision
}

// GetDataSourceRevisionOk returns a tuple with the DataSourceRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetDataSourceRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.DataSourceRevision) {
		return nil, false
	}
	return o.DataSourceRevision, true
}

// HasDataSourceRevision returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasDataSourceRevision() bool {
	if o != nil && !IsNil(o.DataSourceRevision) {
		return true
	}

	return false
}

// SetDataSourceRevision gets a reference to the given string and assigns it to the DataSourceRevision field.
func (o *DataSourceInstanceDto) SetDataSourceRevision(v string) {
	o.DataSourceRevision = &v
}

// GetUniversalDataSourceId returns the UniversalDataSourceId field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetUniversalDataSourceId() string {
	if o == nil || IsNil(o.UniversalDataSourceId) {
		var ret string
		return ret
	}
	return *o.UniversalDataSourceId
}

// GetUniversalDataSourceIdOk returns a tuple with the UniversalDataSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetUniversalDataSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniversalDataSourceId) {
		return nil, false
	}
	return o.UniversalDataSourceId, true
}

// HasUniversalDataSourceId returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasUniversalDataSourceId() bool {
	if o != nil && !IsNil(o.UniversalDataSourceId) {
		return true
	}

	return false
}

// SetUniversalDataSourceId gets a reference to the given string and assigns it to the UniversalDataSourceId field.
func (o *DataSourceInstanceDto) SetUniversalDataSourceId(v string) {
	o.UniversalDataSourceId = &v
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetDataSource() DataSourceDto {
	if o == nil || IsNil(o.DataSource) {
		var ret DataSourceDto
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetDataSourceOk() (*DataSourceDto, bool) {
	if o == nil || IsNil(o.DataSource) {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasDataSource() bool {
	if o != nil && !IsNil(o.DataSource) {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given DataSourceDto and assigns it to the DataSource field.
func (o *DataSourceInstanceDto) SetDataSource(v DataSourceDto) {
	o.DataSource = &v
}

// GetCollectionKey returns the CollectionKey field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetCollectionKey() string {
	if o == nil || IsNil(o.CollectionKey) {
		var ret string
		return ret
	}
	return *o.CollectionKey
}

// GetCollectionKeyOk returns a tuple with the CollectionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetCollectionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionKey) {
		return nil, false
	}
	return o.CollectionKey, true
}

// HasCollectionKey returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasCollectionKey() bool {
	if o != nil && !IsNil(o.CollectionKey) {
		return true
	}

	return false
}

// SetCollectionKey gets a reference to the given string and assigns it to the CollectionKey field.
func (o *DataSourceInstanceDto) SetCollectionKey(v string) {
	o.CollectionKey = &v
}

// GetCollectionParameters returns the CollectionParameters field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetCollectionParameters() map[string]interface{} {
	if o == nil || IsNil(o.CollectionParameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.CollectionParameters
}

// GetCollectionParametersOk returns a tuple with the CollectionParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetCollectionParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CollectionParameters) {
		return map[string]interface{}{}, false
	}
	return o.CollectionParameters, true
}

// HasCollectionParameters returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasCollectionParameters() bool {
	if o != nil && !IsNil(o.CollectionParameters) {
		return true
	}

	return false
}

// SetCollectionParameters gets a reference to the given map[string]interface{} and assigns it to the CollectionParameters field.
func (o *DataSourceInstanceDto) SetCollectionParameters(v map[string]interface{}) {
	o.CollectionParameters = v
}

// GetDefaultCollectionKey returns the DefaultCollectionKey field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetDefaultCollectionKey() string {
	if o == nil || IsNil(o.DefaultCollectionKey) {
		var ret string
		return ret
	}
	return *o.DefaultCollectionKey
}

// GetDefaultCollectionKeyOk returns a tuple with the DefaultCollectionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetDefaultCollectionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultCollectionKey) {
		return nil, false
	}
	return o.DefaultCollectionKey, true
}

// HasDefaultCollectionKey returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasDefaultCollectionKey() bool {
	if o != nil && !IsNil(o.DefaultCollectionKey) {
		return true
	}

	return false
}

// SetDefaultCollectionKey gets a reference to the given string and assigns it to the DefaultCollectionKey field.
func (o *DataSourceInstanceDto) SetDefaultCollectionKey(v string) {
	o.DefaultCollectionKey = &v
}

// GetDefaultCollectionParameters returns the DefaultCollectionParameters field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetDefaultCollectionParameters() map[string]interface{} {
	if o == nil || IsNil(o.DefaultCollectionParameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultCollectionParameters
}

// GetDefaultCollectionParametersOk returns a tuple with the DefaultCollectionParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetDefaultCollectionParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultCollectionParameters) {
		return map[string]interface{}{}, false
	}
	return o.DefaultCollectionParameters, true
}

// HasDefaultCollectionParameters returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasDefaultCollectionParameters() bool {
	if o != nil && !IsNil(o.DefaultCollectionParameters) {
		return true
	}

	return false
}

// SetDefaultCollectionParameters gets a reference to the given map[string]interface{} and assigns it to the DefaultCollectionParameters field.
func (o *DataSourceInstanceDto) SetDefaultCollectionParameters(v map[string]interface{}) {
	o.DefaultCollectionParameters = v
}

// GetCollectionSpec returns the CollectionSpec field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetCollectionSpec() map[string]interface{} {
	if o == nil || IsNil(o.CollectionSpec) {
		var ret map[string]interface{}
		return ret
	}
	return o.CollectionSpec
}

// GetCollectionSpecOk returns a tuple with the CollectionSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetCollectionSpecOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CollectionSpec) {
		return map[string]interface{}{}, false
	}
	return o.CollectionSpec, true
}

// HasCollectionSpec returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasCollectionSpec() bool {
	if o != nil && !IsNil(o.CollectionSpec) {
		return true
	}

	return false
}

// SetCollectionSpec gets a reference to the given map[string]interface{} and assigns it to the CollectionSpec field.
func (o *DataSourceInstanceDto) SetCollectionSpec(v map[string]interface{}) {
	o.CollectionSpec = v
}

// GetIsCustomized returns the IsCustomized field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetIsCustomized() bool {
	if o == nil || IsNil(o.IsCustomized) {
		var ret bool
		return ret
	}
	return *o.IsCustomized
}

// GetIsCustomizedOk returns a tuple with the IsCustomized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetIsCustomizedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCustomized) {
		return nil, false
	}
	return o.IsCustomized, true
}

// HasIsCustomized returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasIsCustomized() bool {
	if o != nil && !IsNil(o.IsCustomized) {
		return true
	}

	return false
}

// SetIsCustomized gets a reference to the given bool and assigns it to the IsCustomized field.
func (o *DataSourceInstanceDto) SetIsCustomized(v bool) {
	o.IsCustomized = &v
}

// GetUdm returns the Udm field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetUdm() string {
	if o == nil || IsNil(o.Udm) {
		var ret string
		return ret
	}
	return *o.Udm
}

// GetUdmOk returns a tuple with the Udm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetUdmOk() (*string, bool) {
	if o == nil || IsNil(o.Udm) {
		return nil, false
	}
	return o.Udm, true
}

// HasUdm returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasUdm() bool {
	if o != nil && !IsNil(o.Udm) {
		return true
	}

	return false
}

// SetUdm gets a reference to the given string and assigns it to the Udm field.
func (o *DataSourceInstanceDto) SetUdm(v string) {
	o.Udm = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *DataSourceInstanceDto) SetUuid(v string) {
	o.Uuid = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetError() map[string]interface{} {
	if o == nil || IsNil(o.Error) {
		var ret map[string]interface{}
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetErrorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Error) {
		return map[string]interface{}{}, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given map[string]interface{} and assigns it to the Error field.
func (o *DataSourceInstanceDto) SetError(v map[string]interface{}) {
	o.Error = v
}

// GetPullUpdatesIntervalSeconds returns the PullUpdatesIntervalSeconds field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetPullUpdatesIntervalSeconds() float32 {
	if o == nil || IsNil(o.PullUpdatesIntervalSeconds) {
		var ret float32
		return ret
	}
	return *o.PullUpdatesIntervalSeconds
}

// GetPullUpdatesIntervalSecondsOk returns a tuple with the PullUpdatesIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetPullUpdatesIntervalSecondsOk() (*float32, bool) {
	if o == nil || IsNil(o.PullUpdatesIntervalSeconds) {
		return nil, false
	}
	return o.PullUpdatesIntervalSeconds, true
}

// HasPullUpdatesIntervalSeconds returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasPullUpdatesIntervalSeconds() bool {
	if o != nil && !IsNil(o.PullUpdatesIntervalSeconds) {
		return true
	}

	return false
}

// SetPullUpdatesIntervalSeconds gets a reference to the given float32 and assigns it to the PullUpdatesIntervalSeconds field.
func (o *DataSourceInstanceDto) SetPullUpdatesIntervalSeconds(v float32) {
	o.PullUpdatesIntervalSeconds = &v
}

// GetNextPullUpdatesTimestamp returns the NextPullUpdatesTimestamp field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetNextPullUpdatesTimestamp() float32 {
	if o == nil || IsNil(o.NextPullUpdatesTimestamp) {
		var ret float32
		return ret
	}
	return *o.NextPullUpdatesTimestamp
}

// GetNextPullUpdatesTimestampOk returns a tuple with the NextPullUpdatesTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetNextPullUpdatesTimestampOk() (*float32, bool) {
	if o == nil || IsNil(o.NextPullUpdatesTimestamp) {
		return nil, false
	}
	return o.NextPullUpdatesTimestamp, true
}

// HasNextPullUpdatesTimestamp returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasNextPullUpdatesTimestamp() bool {
	if o != nil && !IsNil(o.NextPullUpdatesTimestamp) {
		return true
	}

	return false
}

// SetNextPullUpdatesTimestamp gets a reference to the given float32 and assigns it to the NextPullUpdatesTimestamp field.
func (o *DataSourceInstanceDto) SetNextPullUpdatesTimestamp(v float32) {
	o.NextPullUpdatesTimestamp = &v
}

// GetFullSyncIntervalSeconds returns the FullSyncIntervalSeconds field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetFullSyncIntervalSeconds() float32 {
	if o == nil || IsNil(o.FullSyncIntervalSeconds) {
		var ret float32
		return ret
	}
	return *o.FullSyncIntervalSeconds
}

// GetFullSyncIntervalSecondsOk returns a tuple with the FullSyncIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetFullSyncIntervalSecondsOk() (*float32, bool) {
	if o == nil || IsNil(o.FullSyncIntervalSeconds) {
		return nil, false
	}
	return o.FullSyncIntervalSeconds, true
}

// HasFullSyncIntervalSeconds returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasFullSyncIntervalSeconds() bool {
	if o != nil && !IsNil(o.FullSyncIntervalSeconds) {
		return true
	}

	return false
}

// SetFullSyncIntervalSeconds gets a reference to the given float32 and assigns it to the FullSyncIntervalSeconds field.
func (o *DataSourceInstanceDto) SetFullSyncIntervalSeconds(v float32) {
	o.FullSyncIntervalSeconds = &v
}

// GetNextFullSyncTimestamp returns the NextFullSyncTimestamp field value if set, zero value otherwise.
func (o *DataSourceInstanceDto) GetNextFullSyncTimestamp() float32 {
	if o == nil || IsNil(o.NextFullSyncTimestamp) {
		var ret float32
		return ret
	}
	return *o.NextFullSyncTimestamp
}

// GetNextFullSyncTimestampOk returns a tuple with the NextFullSyncTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceInstanceDto) GetNextFullSyncTimestampOk() (*float32, bool) {
	if o == nil || IsNil(o.NextFullSyncTimestamp) {
		return nil, false
	}
	return o.NextFullSyncTimestamp, true
}

// HasNextFullSyncTimestamp returns a boolean if a field has been set.
func (o *DataSourceInstanceDto) HasNextFullSyncTimestamp() bool {
	if o != nil && !IsNil(o.NextFullSyncTimestamp) {
		return true
	}

	return false
}

// SetNextFullSyncTimestamp gets a reference to the given float32 and assigns it to the NextFullSyncTimestamp field.
func (o *DataSourceInstanceDto) SetNextFullSyncTimestamp(v float32) {
	o.NextFullSyncTimestamp = &v
}

// GetPath returns the Path field value
// Deprecated
func (o *DataSourceInstanceDto) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *DataSourceInstanceDto) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
// Deprecated
func (o *DataSourceInstanceDto) SetPath(v string) {
	o.Path = v
}

// GetDefaultPath returns the DefaultPath field value
// Deprecated
func (o *DataSourceInstanceDto) GetDefaultPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultPath
}

// GetDefaultPathOk returns a tuple with the DefaultPath field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *DataSourceInstanceDto) GetDefaultPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultPath, true
}

// SetDefaultPath sets field value
// Deprecated
func (o *DataSourceInstanceDto) SetDefaultPath(v string) {
	o.DefaultPath = v
}

func (o DataSourceInstanceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSourceInstanceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["revision"] = o.Revision
	toSerialize["userId"] = o.UserId
	toSerialize["connectionId"] = o.ConnectionId
	toSerialize["integrationId"] = o.IntegrationId
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.InstanceKey) {
		toSerialize["instanceKey"] = o.InstanceKey
	}
	if !IsNil(o.DataSourceId) {
		toSerialize["dataSourceId"] = o.DataSourceId
	}
	if !IsNil(o.DataSourceRevision) {
		toSerialize["dataSourceRevision"] = o.DataSourceRevision
	}
	if !IsNil(o.UniversalDataSourceId) {
		toSerialize["universalDataSourceId"] = o.UniversalDataSourceId
	}
	if !IsNil(o.DataSource) {
		toSerialize["dataSource"] = o.DataSource
	}
	if !IsNil(o.CollectionKey) {
		toSerialize["collectionKey"] = o.CollectionKey
	}
	if !IsNil(o.CollectionParameters) {
		toSerialize["collectionParameters"] = o.CollectionParameters
	}
	if !IsNil(o.DefaultCollectionKey) {
		toSerialize["defaultCollectionKey"] = o.DefaultCollectionKey
	}
	if !IsNil(o.DefaultCollectionParameters) {
		toSerialize["defaultCollectionParameters"] = o.DefaultCollectionParameters
	}
	if !IsNil(o.CollectionSpec) {
		toSerialize["collectionSpec"] = o.CollectionSpec
	}
	if !IsNil(o.IsCustomized) {
		toSerialize["isCustomized"] = o.IsCustomized
	}
	if !IsNil(o.Udm) {
		toSerialize["udm"] = o.Udm
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.PullUpdatesIntervalSeconds) {
		toSerialize["pullUpdatesIntervalSeconds"] = o.PullUpdatesIntervalSeconds
	}
	if !IsNil(o.NextPullUpdatesTimestamp) {
		toSerialize["nextPullUpdatesTimestamp"] = o.NextPullUpdatesTimestamp
	}
	if !IsNil(o.FullSyncIntervalSeconds) {
		toSerialize["fullSyncIntervalSeconds"] = o.FullSyncIntervalSeconds
	}
	if !IsNil(o.NextFullSyncTimestamp) {
		toSerialize["nextFullSyncTimestamp"] = o.NextFullSyncTimestamp
	}
	toSerialize["path"] = o.Path
	toSerialize["defaultPath"] = o.DefaultPath
	return toSerialize, nil
}

func (o *DataSourceInstanceDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"revision",
		"userId",
		"connectionId",
		"integrationId",
		"path",
		"defaultPath",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataSourceInstanceDto := _DataSourceInstanceDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataSourceInstanceDto)

	if err != nil {
		return err
	}

	*o = DataSourceInstanceDto(varDataSourceInstanceDto)

	return err
}

type NullableDataSourceInstanceDto struct {
	value *DataSourceInstanceDto
	isSet bool
}

func (v NullableDataSourceInstanceDto) Get() *DataSourceInstanceDto {
	return v.value
}

func (v *NullableDataSourceInstanceDto) Set(val *DataSourceInstanceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceInstanceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceInstanceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceInstanceDto(val *DataSourceInstanceDto) *NullableDataSourceInstanceDto {
	return &NullableDataSourceInstanceDto{value: val, isSet: true}
}

func (v NullableDataSourceInstanceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceInstanceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


