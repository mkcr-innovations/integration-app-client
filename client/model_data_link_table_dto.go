/*
Integration Engine API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataLinkTableDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataLinkTableDto{}

// DataLinkTableDto struct for DataLinkTableDto
type DataLinkTableDto struct {
	Id string `json:"id"`
	Key string `json:"key"`
	Name string `json:"name"`
	ArchivedAt *string `json:"archivedAt,omitempty"`
}

type _DataLinkTableDto DataLinkTableDto

// NewDataLinkTableDto instantiates a new DataLinkTableDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLinkTableDto(id string, key string, name string) *DataLinkTableDto {
	this := DataLinkTableDto{}
	this.Id = id
	this.Key = key
	this.Name = name
	return &this
}

// NewDataLinkTableDtoWithDefaults instantiates a new DataLinkTableDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLinkTableDtoWithDefaults() *DataLinkTableDto {
	this := DataLinkTableDto{}
	return &this
}

// GetId returns the Id field value
func (o *DataLinkTableDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DataLinkTableDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DataLinkTableDto) SetId(v string) {
	o.Id = v
}

// GetKey returns the Key field value
func (o *DataLinkTableDto) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *DataLinkTableDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *DataLinkTableDto) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *DataLinkTableDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DataLinkTableDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DataLinkTableDto) SetName(v string) {
	o.Name = v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *DataLinkTableDto) GetArchivedAt() string {
	if o == nil || IsNil(o.ArchivedAt) {
		var ret string
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLinkTableDto) GetArchivedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ArchivedAt) {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *DataLinkTableDto) HasArchivedAt() bool {
	if o != nil && !IsNil(o.ArchivedAt) {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given string and assigns it to the ArchivedAt field.
func (o *DataLinkTableDto) SetArchivedAt(v string) {
	o.ArchivedAt = &v
}

func (o DataLinkTableDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataLinkTableDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	if !IsNil(o.ArchivedAt) {
		toSerialize["archivedAt"] = o.ArchivedAt
	}
	return toSerialize, nil
}

func (o *DataLinkTableDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"key",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataLinkTableDto := _DataLinkTableDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataLinkTableDto)

	if err != nil {
		return err
	}

	*o = DataLinkTableDto(varDataLinkTableDto)

	return err
}

type NullableDataLinkTableDto struct {
	value *DataLinkTableDto
	isSet bool
}

func (v NullableDataLinkTableDto) Get() *DataLinkTableDto {
	return v.value
}

func (v *NullableDataLinkTableDto) Set(val *DataLinkTableDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLinkTableDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLinkTableDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLinkTableDto(val *DataLinkTableDto) *NullableDataLinkTableDto {
	return &NullableDataLinkTableDto{value: val, isSet: true}
}

func (v NullableDataLinkTableDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLinkTableDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


