/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type AppDataSchemasAPI interface {

	/*
	AppDataSchemaByIdControllerArchiveAppDataSchema Archive app data schema

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID
	@return ApiAppDataSchemaByIdControllerArchiveAppDataSchemaRequest
	*/
	AppDataSchemaByIdControllerArchiveAppDataSchema(ctx context.Context, id string) ApiAppDataSchemaByIdControllerArchiveAppDataSchemaRequest

	// AppDataSchemaByIdControllerArchiveAppDataSchemaExecute executes the request
	AppDataSchemaByIdControllerArchiveAppDataSchemaExecute(r ApiAppDataSchemaByIdControllerArchiveAppDataSchemaRequest) (*http.Response, error)

	/*
	AppDataSchemaByIdControllerExport Method for AppDataSchemaByIdControllerExport

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID
	@return ApiAppDataSchemaByIdControllerExportRequest
	*/
	AppDataSchemaByIdControllerExport(ctx context.Context, id string) ApiAppDataSchemaByIdControllerExportRequest

	// AppDataSchemaByIdControllerExportExecute executes the request
	//  @return AppDataSchemaExportDto
	AppDataSchemaByIdControllerExportExecute(r ApiAppDataSchemaByIdControllerExportRequest) (*AppDataSchemaExportDto, *http.Response, error)

	/*
	AppDataSchemaByIdControllerGetAppDataSchema Get app data schema

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID
	@return ApiAppDataSchemaByIdControllerGetAppDataSchemaRequest
	*/
	AppDataSchemaByIdControllerGetAppDataSchema(ctx context.Context, id string) ApiAppDataSchemaByIdControllerGetAppDataSchemaRequest

	// AppDataSchemaByIdControllerGetAppDataSchemaExecute executes the request
	//  @return AppDataSchemaDto
	AppDataSchemaByIdControllerGetAppDataSchemaExecute(r ApiAppDataSchemaByIdControllerGetAppDataSchemaRequest) (*AppDataSchemaDto, *http.Response, error)

	/*
	AppDataSchemaByIdControllerPatchAppDataSchema Patch app data schema

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID
	@return ApiAppDataSchemaByIdControllerPatchAppDataSchemaRequest
	*/
	AppDataSchemaByIdControllerPatchAppDataSchema(ctx context.Context, id string) ApiAppDataSchemaByIdControllerPatchAppDataSchemaRequest

	// AppDataSchemaByIdControllerPatchAppDataSchemaExecute executes the request
	//  @return AppDataSchemaDto
	AppDataSchemaByIdControllerPatchAppDataSchemaExecute(r ApiAppDataSchemaByIdControllerPatchAppDataSchemaRequest) (*AppDataSchemaDto, *http.Response, error)

	/*
	AppDataSchemaByIdControllerPutAppDataSchema Update app data schema

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID
	@return ApiAppDataSchemaByIdControllerPutAppDataSchemaRequest
	*/
	AppDataSchemaByIdControllerPutAppDataSchema(ctx context.Context, id string) ApiAppDataSchemaByIdControllerPutAppDataSchemaRequest

	// AppDataSchemaByIdControllerPutAppDataSchemaExecute executes the request
	//  @return AppDataSchemaDto
	AppDataSchemaByIdControllerPutAppDataSchemaExecute(r ApiAppDataSchemaByIdControllerPutAppDataSchemaRequest) (*AppDataSchemaDto, *http.Response, error)

	/*
	AppDataSchemaInstanceControllerArchiveAppDataSchemaInstance Archive app data schema instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest
	*/
	AppDataSchemaInstanceControllerArchiveAppDataSchemaInstance(ctx context.Context) ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest

	// AppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceExecute executes the request
	AppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceExecute(r ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest) (*http.Response, error)

	/*
	AppDataSchemaInstanceControllerCreateAppDataSchemaInstance Create app data schema instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest
	*/
	AppDataSchemaInstanceControllerCreateAppDataSchemaInstance(ctx context.Context) ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest

	// AppDataSchemaInstanceControllerCreateAppDataSchemaInstanceExecute executes the request
	//  @return AppDataSchemaInstanceDto
	AppDataSchemaInstanceControllerCreateAppDataSchemaInstanceExecute(r ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest) (*AppDataSchemaInstanceDto, *http.Response, error)

	/*
	AppDataSchemaInstanceControllerGetAppDataSchemaInstance Get app data schema instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest
	*/
	AppDataSchemaInstanceControllerGetAppDataSchemaInstance(ctx context.Context) ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest

	// AppDataSchemaInstanceControllerGetAppDataSchemaInstanceExecute executes the request
	//  @return AppDataSchemaInstanceDto
	AppDataSchemaInstanceControllerGetAppDataSchemaInstanceExecute(r ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest) (*AppDataSchemaInstanceDto, *http.Response, error)

	/*
	AppDataSchemaInstanceControllerPatchAppDataSchemaInstance Patch app data schema instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest
	*/
	AppDataSchemaInstanceControllerPatchAppDataSchemaInstance(ctx context.Context) ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest

	// AppDataSchemaInstanceControllerPatchAppDataSchemaInstanceExecute executes the request
	//  @return AppDataSchemaInstanceDto
	AppDataSchemaInstanceControllerPatchAppDataSchemaInstanceExecute(r ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest) (*AppDataSchemaInstanceDto, *http.Response, error)

	/*
	AppDataSchemaInstanceControllerPutAppDataSchemaInstance Update app data schema instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest
	*/
	AppDataSchemaInstanceControllerPutAppDataSchemaInstance(ctx context.Context) ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest

	// AppDataSchemaInstanceControllerPutAppDataSchemaInstanceExecute executes the request
	//  @return AppDataSchemaInstanceDto
	AppDataSchemaInstanceControllerPutAppDataSchemaInstanceExecute(r ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest) (*AppDataSchemaInstanceDto, *http.Response, error)

	/*
	AppDataSchemaInstanceControllerSetupAppDataSchemaInstance Setup app data schema instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest
	*/
	AppDataSchemaInstanceControllerSetupAppDataSchemaInstance(ctx context.Context) ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest

	// AppDataSchemaInstanceControllerSetupAppDataSchemaInstanceExecute executes the request
	//  @return AppDataSchemaInstanceDto
	AppDataSchemaInstanceControllerSetupAppDataSchemaInstanceExecute(r ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest) (*AppDataSchemaInstanceDto, *http.Response, error)

	/*
	AppDataSchemaInstancesControllerListAppDataSchemaInstances List app data schema instances

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest
	*/
	AppDataSchemaInstancesControllerListAppDataSchemaInstances(ctx context.Context) ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest

	// AppDataSchemaInstancesControllerListAppDataSchemaInstancesExecute executes the request
	//  @return AppDataSchemaInstancesControllerListAppDataSchemaInstances200Response
	AppDataSchemaInstancesControllerListAppDataSchemaInstancesExecute(r ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest) (*AppDataSchemaInstancesControllerListAppDataSchemaInstances200Response, *http.Response, error)

	/*
	AppDataSchemasControllerCreateAppDataSchema Create app data schema

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAppDataSchemasControllerCreateAppDataSchemaRequest
	*/
	AppDataSchemasControllerCreateAppDataSchema(ctx context.Context) ApiAppDataSchemasControllerCreateAppDataSchemaRequest

	// AppDataSchemasControllerCreateAppDataSchemaExecute executes the request
	//  @return AppDataSchemaDto
	AppDataSchemasControllerCreateAppDataSchemaExecute(r ApiAppDataSchemasControllerCreateAppDataSchemaRequest) (*AppDataSchemaDto, *http.Response, error)

	/*
	AppDataSchemasControllerListAppDataSchemas List app data schemas

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAppDataSchemasControllerListAppDataSchemasRequest
	*/
	AppDataSchemasControllerListAppDataSchemas(ctx context.Context) ApiAppDataSchemasControllerListAppDataSchemasRequest

	// AppDataSchemasControllerListAppDataSchemasExecute executes the request
	//  @return AppDataSchemasControllerListAppDataSchemas200Response
	AppDataSchemasControllerListAppDataSchemasExecute(r ApiAppDataSchemasControllerListAppDataSchemasRequest) (*AppDataSchemasControllerListAppDataSchemas200Response, *http.Response, error)
}

// AppDataSchemasAPIService AppDataSchemasAPI service
type AppDataSchemasAPIService service

type ApiAppDataSchemaByIdControllerArchiveAppDataSchemaRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	id string
}

func (r ApiAppDataSchemaByIdControllerArchiveAppDataSchemaRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppDataSchemaByIdControllerArchiveAppDataSchemaExecute(r)
}

/*
AppDataSchemaByIdControllerArchiveAppDataSchema Archive app data schema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID
 @return ApiAppDataSchemaByIdControllerArchiveAppDataSchemaRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemaByIdControllerArchiveAppDataSchema(ctx context.Context, id string) ApiAppDataSchemaByIdControllerArchiveAppDataSchemaRequest {
	return ApiAppDataSchemaByIdControllerArchiveAppDataSchemaRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppDataSchemasAPIService) AppDataSchemaByIdControllerArchiveAppDataSchemaExecute(r ApiAppDataSchemaByIdControllerArchiveAppDataSchemaRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemaByIdControllerArchiveAppDataSchema")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schemas/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppDataSchemaByIdControllerExportRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	id string
	key *string
}

func (r ApiAppDataSchemaByIdControllerExportRequest) Key(key string) ApiAppDataSchemaByIdControllerExportRequest {
	r.key = &key
	return r
}

func (r ApiAppDataSchemaByIdControllerExportRequest) Execute() (*AppDataSchemaExportDto, *http.Response, error) {
	return r.ApiService.AppDataSchemaByIdControllerExportExecute(r)
}

/*
AppDataSchemaByIdControllerExport Method for AppDataSchemaByIdControllerExport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID
 @return ApiAppDataSchemaByIdControllerExportRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemaByIdControllerExport(ctx context.Context, id string) ApiAppDataSchemaByIdControllerExportRequest {
	return ApiAppDataSchemaByIdControllerExportRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppDataSchemaExportDto
func (a *AppDataSchemasAPIService) AppDataSchemaByIdControllerExportExecute(r ApiAppDataSchemaByIdControllerExportRequest) (*AppDataSchemaExportDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppDataSchemaExportDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemaByIdControllerExport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schemas/{id}/export"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.key != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "key", r.key, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppDataSchemaByIdControllerGetAppDataSchemaRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	id string
}

func (r ApiAppDataSchemaByIdControllerGetAppDataSchemaRequest) Execute() (*AppDataSchemaDto, *http.Response, error) {
	return r.ApiService.AppDataSchemaByIdControllerGetAppDataSchemaExecute(r)
}

/*
AppDataSchemaByIdControllerGetAppDataSchema Get app data schema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID
 @return ApiAppDataSchemaByIdControllerGetAppDataSchemaRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemaByIdControllerGetAppDataSchema(ctx context.Context, id string) ApiAppDataSchemaByIdControllerGetAppDataSchemaRequest {
	return ApiAppDataSchemaByIdControllerGetAppDataSchemaRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppDataSchemaDto
func (a *AppDataSchemasAPIService) AppDataSchemaByIdControllerGetAppDataSchemaExecute(r ApiAppDataSchemaByIdControllerGetAppDataSchemaRequest) (*AppDataSchemaDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppDataSchemaDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemaByIdControllerGetAppDataSchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schemas/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppDataSchemaByIdControllerPatchAppDataSchemaRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	id string
	appDataSchemaCreateDto *AppDataSchemaCreateDto
}

func (r ApiAppDataSchemaByIdControllerPatchAppDataSchemaRequest) AppDataSchemaCreateDto(appDataSchemaCreateDto AppDataSchemaCreateDto) ApiAppDataSchemaByIdControllerPatchAppDataSchemaRequest {
	r.appDataSchemaCreateDto = &appDataSchemaCreateDto
	return r
}

func (r ApiAppDataSchemaByIdControllerPatchAppDataSchemaRequest) Execute() (*AppDataSchemaDto, *http.Response, error) {
	return r.ApiService.AppDataSchemaByIdControllerPatchAppDataSchemaExecute(r)
}

/*
AppDataSchemaByIdControllerPatchAppDataSchema Patch app data schema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID
 @return ApiAppDataSchemaByIdControllerPatchAppDataSchemaRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemaByIdControllerPatchAppDataSchema(ctx context.Context, id string) ApiAppDataSchemaByIdControllerPatchAppDataSchemaRequest {
	return ApiAppDataSchemaByIdControllerPatchAppDataSchemaRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppDataSchemaDto
func (a *AppDataSchemasAPIService) AppDataSchemaByIdControllerPatchAppDataSchemaExecute(r ApiAppDataSchemaByIdControllerPatchAppDataSchemaRequest) (*AppDataSchemaDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppDataSchemaDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemaByIdControllerPatchAppDataSchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schemas/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appDataSchemaCreateDto == nil {
		return localVarReturnValue, nil, reportError("appDataSchemaCreateDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appDataSchemaCreateDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppDataSchemaByIdControllerPutAppDataSchemaRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	id string
	appDataSchemaCreateDto *AppDataSchemaCreateDto
}

func (r ApiAppDataSchemaByIdControllerPutAppDataSchemaRequest) AppDataSchemaCreateDto(appDataSchemaCreateDto AppDataSchemaCreateDto) ApiAppDataSchemaByIdControllerPutAppDataSchemaRequest {
	r.appDataSchemaCreateDto = &appDataSchemaCreateDto
	return r
}

func (r ApiAppDataSchemaByIdControllerPutAppDataSchemaRequest) Execute() (*AppDataSchemaDto, *http.Response, error) {
	return r.ApiService.AppDataSchemaByIdControllerPutAppDataSchemaExecute(r)
}

/*
AppDataSchemaByIdControllerPutAppDataSchema Update app data schema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID
 @return ApiAppDataSchemaByIdControllerPutAppDataSchemaRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemaByIdControllerPutAppDataSchema(ctx context.Context, id string) ApiAppDataSchemaByIdControllerPutAppDataSchemaRequest {
	return ApiAppDataSchemaByIdControllerPutAppDataSchemaRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppDataSchemaDto
func (a *AppDataSchemasAPIService) AppDataSchemaByIdControllerPutAppDataSchemaExecute(r ApiAppDataSchemaByIdControllerPutAppDataSchemaRequest) (*AppDataSchemaDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppDataSchemaDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemaByIdControllerPutAppDataSchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schemas/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appDataSchemaCreateDto == nil {
		return localVarReturnValue, nil, reportError("appDataSchemaCreateDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appDataSchemaCreateDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	id *string
	instanceKey *string
	appDataSchemaId *string
	appDataSchemaKey *string
	autoCreate *bool
}

func (r ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest) Id(id string) ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest {
	r.id = &id
	return r
}

func (r ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest) InstanceKey(instanceKey string) ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest) AppDataSchemaId(appDataSchemaId string) ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest {
	r.appDataSchemaId = &appDataSchemaId
	return r
}

func (r ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest) AppDataSchemaKey(appDataSchemaKey string) ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest {
	r.appDataSchemaKey = &appDataSchemaKey
	return r
}

func (r ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest) AutoCreate(autoCreate bool) ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceExecute(r)
}

/*
AppDataSchemaInstanceControllerArchiveAppDataSchemaInstance Archive app data schema instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemaInstanceControllerArchiveAppDataSchemaInstance(ctx context.Context) ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest {
	return ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AppDataSchemasAPIService) AppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceExecute(r ApiAppDataSchemaInstanceControllerArchiveAppDataSchemaInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemaInstanceControllerArchiveAppDataSchemaInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schema-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.appDataSchemaId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appDataSchemaId", r.appDataSchemaId, "")
	}
	if r.appDataSchemaKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appDataSchemaKey", r.appDataSchemaKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	body *map[string]interface{}
	id *string
	instanceKey *string
	appDataSchemaId *string
	appDataSchemaKey *string
	autoCreate *bool
}

func (r ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest) Body(body map[string]interface{}) ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest {
	r.body = &body
	return r
}

func (r ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest) Id(id string) ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest {
	r.id = &id
	return r
}

func (r ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest) InstanceKey(instanceKey string) ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest) AppDataSchemaId(appDataSchemaId string) ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest {
	r.appDataSchemaId = &appDataSchemaId
	return r
}

func (r ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest) AppDataSchemaKey(appDataSchemaKey string) ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest {
	r.appDataSchemaKey = &appDataSchemaKey
	return r
}

func (r ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest) AutoCreate(autoCreate bool) ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest) Execute() (*AppDataSchemaInstanceDto, *http.Response, error) {
	return r.ApiService.AppDataSchemaInstanceControllerCreateAppDataSchemaInstanceExecute(r)
}

/*
AppDataSchemaInstanceControllerCreateAppDataSchemaInstance Create app data schema instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemaInstanceControllerCreateAppDataSchemaInstance(ctx context.Context) ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest {
	return ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppDataSchemaInstanceDto
func (a *AppDataSchemasAPIService) AppDataSchemaInstanceControllerCreateAppDataSchemaInstanceExecute(r ApiAppDataSchemaInstanceControllerCreateAppDataSchemaInstanceRequest) (*AppDataSchemaInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppDataSchemaInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemaInstanceControllerCreateAppDataSchemaInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schema-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.appDataSchemaId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appDataSchemaId", r.appDataSchemaId, "")
	}
	if r.appDataSchemaKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appDataSchemaKey", r.appDataSchemaKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	id *string
	instanceKey *string
	appDataSchemaId *string
	appDataSchemaKey *string
	autoCreate *bool
}

func (r ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest) Id(id string) ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest {
	r.id = &id
	return r
}

func (r ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest) InstanceKey(instanceKey string) ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest) AppDataSchemaId(appDataSchemaId string) ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest {
	r.appDataSchemaId = &appDataSchemaId
	return r
}

func (r ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest) AppDataSchemaKey(appDataSchemaKey string) ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest {
	r.appDataSchemaKey = &appDataSchemaKey
	return r
}

func (r ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest) AutoCreate(autoCreate bool) ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest) Execute() (*AppDataSchemaInstanceDto, *http.Response, error) {
	return r.ApiService.AppDataSchemaInstanceControllerGetAppDataSchemaInstanceExecute(r)
}

/*
AppDataSchemaInstanceControllerGetAppDataSchemaInstance Get app data schema instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemaInstanceControllerGetAppDataSchemaInstance(ctx context.Context) ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest {
	return ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppDataSchemaInstanceDto
func (a *AppDataSchemasAPIService) AppDataSchemaInstanceControllerGetAppDataSchemaInstanceExecute(r ApiAppDataSchemaInstanceControllerGetAppDataSchemaInstanceRequest) (*AppDataSchemaInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppDataSchemaInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemaInstanceControllerGetAppDataSchemaInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schema-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.appDataSchemaId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appDataSchemaId", r.appDataSchemaId, "")
	}
	if r.appDataSchemaKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appDataSchemaKey", r.appDataSchemaKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	body *map[string]interface{}
	id *string
	instanceKey *string
	appDataSchemaId *string
	appDataSchemaKey *string
	autoCreate *bool
}

func (r ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest) Body(body map[string]interface{}) ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest {
	r.body = &body
	return r
}

func (r ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest) Id(id string) ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest {
	r.id = &id
	return r
}

func (r ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest) InstanceKey(instanceKey string) ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest) AppDataSchemaId(appDataSchemaId string) ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest {
	r.appDataSchemaId = &appDataSchemaId
	return r
}

func (r ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest) AppDataSchemaKey(appDataSchemaKey string) ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest {
	r.appDataSchemaKey = &appDataSchemaKey
	return r
}

func (r ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest) AutoCreate(autoCreate bool) ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest) Execute() (*AppDataSchemaInstanceDto, *http.Response, error) {
	return r.ApiService.AppDataSchemaInstanceControllerPatchAppDataSchemaInstanceExecute(r)
}

/*
AppDataSchemaInstanceControllerPatchAppDataSchemaInstance Patch app data schema instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemaInstanceControllerPatchAppDataSchemaInstance(ctx context.Context) ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest {
	return ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppDataSchemaInstanceDto
func (a *AppDataSchemasAPIService) AppDataSchemaInstanceControllerPatchAppDataSchemaInstanceExecute(r ApiAppDataSchemaInstanceControllerPatchAppDataSchemaInstanceRequest) (*AppDataSchemaInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppDataSchemaInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemaInstanceControllerPatchAppDataSchemaInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schema-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.appDataSchemaId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appDataSchemaId", r.appDataSchemaId, "")
	}
	if r.appDataSchemaKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appDataSchemaKey", r.appDataSchemaKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	body *map[string]interface{}
	id *string
	instanceKey *string
	appDataSchemaId *string
	appDataSchemaKey *string
	autoCreate *bool
}

func (r ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest) Body(body map[string]interface{}) ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest {
	r.body = &body
	return r
}

func (r ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest) Id(id string) ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest {
	r.id = &id
	return r
}

func (r ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest) InstanceKey(instanceKey string) ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest) AppDataSchemaId(appDataSchemaId string) ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest {
	r.appDataSchemaId = &appDataSchemaId
	return r
}

func (r ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest) AppDataSchemaKey(appDataSchemaKey string) ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest {
	r.appDataSchemaKey = &appDataSchemaKey
	return r
}

func (r ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest) AutoCreate(autoCreate bool) ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest) Execute() (*AppDataSchemaInstanceDto, *http.Response, error) {
	return r.ApiService.AppDataSchemaInstanceControllerPutAppDataSchemaInstanceExecute(r)
}

/*
AppDataSchemaInstanceControllerPutAppDataSchemaInstance Update app data schema instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemaInstanceControllerPutAppDataSchemaInstance(ctx context.Context) ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest {
	return ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppDataSchemaInstanceDto
func (a *AppDataSchemasAPIService) AppDataSchemaInstanceControllerPutAppDataSchemaInstanceExecute(r ApiAppDataSchemaInstanceControllerPutAppDataSchemaInstanceRequest) (*AppDataSchemaInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppDataSchemaInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemaInstanceControllerPutAppDataSchemaInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schema-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.appDataSchemaId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appDataSchemaId", r.appDataSchemaId, "")
	}
	if r.appDataSchemaKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appDataSchemaKey", r.appDataSchemaKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	id *string
	instanceKey *string
	appDataSchemaId *string
	appDataSchemaKey *string
	autoCreate *bool
}

func (r ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest) Id(id string) ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest {
	r.id = &id
	return r
}

func (r ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest) InstanceKey(instanceKey string) ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest) AppDataSchemaId(appDataSchemaId string) ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest {
	r.appDataSchemaId = &appDataSchemaId
	return r
}

func (r ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest) AppDataSchemaKey(appDataSchemaKey string) ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest {
	r.appDataSchemaKey = &appDataSchemaKey
	return r
}

func (r ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest) AutoCreate(autoCreate bool) ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest) Execute() (*AppDataSchemaInstanceDto, *http.Response, error) {
	return r.ApiService.AppDataSchemaInstanceControllerSetupAppDataSchemaInstanceExecute(r)
}

/*
AppDataSchemaInstanceControllerSetupAppDataSchemaInstance Setup app data schema instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemaInstanceControllerSetupAppDataSchemaInstance(ctx context.Context) ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest {
	return ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppDataSchemaInstanceDto
func (a *AppDataSchemasAPIService) AppDataSchemaInstanceControllerSetupAppDataSchemaInstanceExecute(r ApiAppDataSchemaInstanceControllerSetupAppDataSchemaInstanceRequest) (*AppDataSchemaInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppDataSchemaInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemaInstanceControllerSetupAppDataSchemaInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schema-instance/setup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.appDataSchemaId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appDataSchemaId", r.appDataSchemaId, "")
	}
	if r.appDataSchemaKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appDataSchemaKey", r.appDataSchemaKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	limit *float32
	cursor *string
	search *string
	connectorId *string
	id *string
	userId *string
	appDataSchemaId *string
	instanceKey *string
}

func (r ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest) Limit(limit float32) ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest {
	r.limit = &limit
	return r
}

func (r ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest) Cursor(cursor string) ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest {
	r.cursor = &cursor
	return r
}

func (r ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest) Search(search string) ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest {
	r.search = &search
	return r
}

func (r ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest) ConnectorId(connectorId string) ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest {
	r.connectorId = &connectorId
	return r
}

func (r ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest) Id(id string) ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest {
	r.id = &id
	return r
}

func (r ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest) UserId(userId string) ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest {
	r.userId = &userId
	return r
}

func (r ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest) AppDataSchemaId(appDataSchemaId string) ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest {
	r.appDataSchemaId = &appDataSchemaId
	return r
}

func (r ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest) InstanceKey(instanceKey string) ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest) Execute() (*AppDataSchemaInstancesControllerListAppDataSchemaInstances200Response, *http.Response, error) {
	return r.ApiService.AppDataSchemaInstancesControllerListAppDataSchemaInstancesExecute(r)
}

/*
AppDataSchemaInstancesControllerListAppDataSchemaInstances List app data schema instances

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemaInstancesControllerListAppDataSchemaInstances(ctx context.Context) ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest {
	return ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppDataSchemaInstancesControllerListAppDataSchemaInstances200Response
func (a *AppDataSchemasAPIService) AppDataSchemaInstancesControllerListAppDataSchemaInstancesExecute(r ApiAppDataSchemaInstancesControllerListAppDataSchemaInstancesRequest) (*AppDataSchemaInstancesControllerListAppDataSchemaInstances200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppDataSchemaInstancesControllerListAppDataSchemaInstances200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemaInstancesControllerListAppDataSchemaInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schema-instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.connectorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectorId", r.connectorId, "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.appDataSchemaId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appDataSchemaId", r.appDataSchemaId, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppDataSchemasControllerCreateAppDataSchemaRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	appDataSchemaCreateDto *AppDataSchemaCreateDto
}

func (r ApiAppDataSchemasControllerCreateAppDataSchemaRequest) AppDataSchemaCreateDto(appDataSchemaCreateDto AppDataSchemaCreateDto) ApiAppDataSchemasControllerCreateAppDataSchemaRequest {
	r.appDataSchemaCreateDto = &appDataSchemaCreateDto
	return r
}

func (r ApiAppDataSchemasControllerCreateAppDataSchemaRequest) Execute() (*AppDataSchemaDto, *http.Response, error) {
	return r.ApiService.AppDataSchemasControllerCreateAppDataSchemaExecute(r)
}

/*
AppDataSchemasControllerCreateAppDataSchema Create app data schema

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppDataSchemasControllerCreateAppDataSchemaRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemasControllerCreateAppDataSchema(ctx context.Context) ApiAppDataSchemasControllerCreateAppDataSchemaRequest {
	return ApiAppDataSchemasControllerCreateAppDataSchemaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppDataSchemaDto
func (a *AppDataSchemasAPIService) AppDataSchemasControllerCreateAppDataSchemaExecute(r ApiAppDataSchemasControllerCreateAppDataSchemaRequest) (*AppDataSchemaDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppDataSchemaDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemasControllerCreateAppDataSchema")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schemas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appDataSchemaCreateDto == nil {
		return localVarReturnValue, nil, reportError("appDataSchemaCreateDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appDataSchemaCreateDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppDataSchemasControllerListAppDataSchemasRequest struct {
	ctx context.Context
	ApiService AppDataSchemasAPI
	limit *float32
	cursor *string
	search *string
	connectorId *string
}

func (r ApiAppDataSchemasControllerListAppDataSchemasRequest) Limit(limit float32) ApiAppDataSchemasControllerListAppDataSchemasRequest {
	r.limit = &limit
	return r
}

func (r ApiAppDataSchemasControllerListAppDataSchemasRequest) Cursor(cursor string) ApiAppDataSchemasControllerListAppDataSchemasRequest {
	r.cursor = &cursor
	return r
}

func (r ApiAppDataSchemasControllerListAppDataSchemasRequest) Search(search string) ApiAppDataSchemasControllerListAppDataSchemasRequest {
	r.search = &search
	return r
}

func (r ApiAppDataSchemasControllerListAppDataSchemasRequest) ConnectorId(connectorId string) ApiAppDataSchemasControllerListAppDataSchemasRequest {
	r.connectorId = &connectorId
	return r
}

func (r ApiAppDataSchemasControllerListAppDataSchemasRequest) Execute() (*AppDataSchemasControllerListAppDataSchemas200Response, *http.Response, error) {
	return r.ApiService.AppDataSchemasControllerListAppDataSchemasExecute(r)
}

/*
AppDataSchemasControllerListAppDataSchemas List app data schemas

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppDataSchemasControllerListAppDataSchemasRequest
*/
func (a *AppDataSchemasAPIService) AppDataSchemasControllerListAppDataSchemas(ctx context.Context) ApiAppDataSchemasControllerListAppDataSchemasRequest {
	return ApiAppDataSchemasControllerListAppDataSchemasRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppDataSchemasControllerListAppDataSchemas200Response
func (a *AppDataSchemasAPIService) AppDataSchemasControllerListAppDataSchemasExecute(r ApiAppDataSchemasControllerListAppDataSchemasRequest) (*AppDataSchemasControllerListAppDataSchemas200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppDataSchemasControllerListAppDataSchemas200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppDataSchemasAPIService.AppDataSchemasControllerListAppDataSchemas")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/app-data-schemas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.connectorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectorId", r.connectorId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
