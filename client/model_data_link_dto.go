/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataLinkDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataLinkDto{}

// DataLinkDto struct for DataLinkDto
type DataLinkDto struct {
	Id string `json:"id"`
	DataLinkTableInstanceId string `json:"dataLinkTableInstanceId"`
	Direction string `json:"direction"`
	AppRecordId string `json:"appRecordId"`
	ExternalRecordId string `json:"externalRecordId"`
}

type _DataLinkDto DataLinkDto

// NewDataLinkDto instantiates a new DataLinkDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLinkDto(id string, dataLinkTableInstanceId string, direction string, appRecordId string, externalRecordId string) *DataLinkDto {
	this := DataLinkDto{}
	this.Id = id
	this.DataLinkTableInstanceId = dataLinkTableInstanceId
	this.Direction = direction
	this.AppRecordId = appRecordId
	this.ExternalRecordId = externalRecordId
	return &this
}

// NewDataLinkDtoWithDefaults instantiates a new DataLinkDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLinkDtoWithDefaults() *DataLinkDto {
	this := DataLinkDto{}
	return &this
}

// GetId returns the Id field value
func (o *DataLinkDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DataLinkDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DataLinkDto) SetId(v string) {
	o.Id = v
}

// GetDataLinkTableInstanceId returns the DataLinkTableInstanceId field value
func (o *DataLinkDto) GetDataLinkTableInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataLinkTableInstanceId
}

// GetDataLinkTableInstanceIdOk returns a tuple with the DataLinkTableInstanceId field value
// and a boolean to check if the value has been set.
func (o *DataLinkDto) GetDataLinkTableInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataLinkTableInstanceId, true
}

// SetDataLinkTableInstanceId sets field value
func (o *DataLinkDto) SetDataLinkTableInstanceId(v string) {
	o.DataLinkTableInstanceId = v
}

// GetDirection returns the Direction field value
func (o *DataLinkDto) GetDirection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *DataLinkDto) GetDirectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *DataLinkDto) SetDirection(v string) {
	o.Direction = v
}

// GetAppRecordId returns the AppRecordId field value
func (o *DataLinkDto) GetAppRecordId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppRecordId
}

// GetAppRecordIdOk returns a tuple with the AppRecordId field value
// and a boolean to check if the value has been set.
func (o *DataLinkDto) GetAppRecordIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppRecordId, true
}

// SetAppRecordId sets field value
func (o *DataLinkDto) SetAppRecordId(v string) {
	o.AppRecordId = v
}

// GetExternalRecordId returns the ExternalRecordId field value
func (o *DataLinkDto) GetExternalRecordId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalRecordId
}

// GetExternalRecordIdOk returns a tuple with the ExternalRecordId field value
// and a boolean to check if the value has been set.
func (o *DataLinkDto) GetExternalRecordIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalRecordId, true
}

// SetExternalRecordId sets field value
func (o *DataLinkDto) SetExternalRecordId(v string) {
	o.ExternalRecordId = v
}

func (o DataLinkDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataLinkDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["dataLinkTableInstanceId"] = o.DataLinkTableInstanceId
	toSerialize["direction"] = o.Direction
	toSerialize["appRecordId"] = o.AppRecordId
	toSerialize["externalRecordId"] = o.ExternalRecordId
	return toSerialize, nil
}

func (o *DataLinkDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"dataLinkTableInstanceId",
		"direction",
		"appRecordId",
		"externalRecordId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataLinkDto := _DataLinkDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataLinkDto)

	if err != nil {
		return err
	}

	*o = DataLinkDto(varDataLinkDto)

	return err
}

type NullableDataLinkDto struct {
	value *DataLinkDto
	isSet bool
}

func (v NullableDataLinkDto) Get() *DataLinkDto {
	return v.value
}

func (v *NullableDataLinkDto) Set(val *DataLinkDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLinkDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLinkDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLinkDto(val *DataLinkDto) *NullableDataLinkDto {
	return &NullableDataLinkDto{value: val, isSet: true}
}

func (v NullableDataLinkDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLinkDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


