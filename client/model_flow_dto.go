/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FlowDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowDto{}

// FlowDto struct for FlowDto
type FlowDto struct {
	Id string `json:"id"`
	Key string `json:"key"`
	Name string `json:"name"`
	ArchivedAt *string `json:"archivedAt,omitempty"`
	Revision string `json:"revision"`
	UniversalFlowId *string `json:"universalFlowId,omitempty"`
	IntegrationId *string `json:"integrationId,omitempty"`
	Integration *IntegrationDto `json:"integration,omitempty"`
	UniversalFlowRevision *string `json:"universalFlowRevision,omitempty"`
	ParametersSchema map[string]interface{} `json:"parametersSchema,omitempty"`
	Nodes map[string]interface{} `json:"nodes,omitempty"`
	AutoCreateInstances *bool `json:"autoCreateInstances,omitempty"`
	Customized *bool `json:"customized,omitempty"`
	AppliedToIntegrations []string `json:"appliedToIntegrations,omitempty"`
	Dependencies []map[string]interface{} `json:"dependencies,omitempty"`
	IsDeployed *bool `json:"isDeployed,omitempty"`
	ConfigurationState *string `json:"configurationState,omitempty"`
	ConfigurationStateMessage *string `json:"configurationStateMessage,omitempty"`
}

type _FlowDto FlowDto

// NewFlowDto instantiates a new FlowDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowDto(id string, key string, name string, revision string) *FlowDto {
	this := FlowDto{}
	this.Id = id
	this.Key = key
	this.Name = name
	this.Revision = revision
	return &this
}

// NewFlowDtoWithDefaults instantiates a new FlowDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowDtoWithDefaults() *FlowDto {
	this := FlowDto{}
	return &this
}

// GetId returns the Id field value
func (o *FlowDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FlowDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FlowDto) SetId(v string) {
	o.Id = v
}

// GetKey returns the Key field value
func (o *FlowDto) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *FlowDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *FlowDto) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *FlowDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FlowDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FlowDto) SetName(v string) {
	o.Name = v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *FlowDto) GetArchivedAt() string {
	if o == nil || IsNil(o.ArchivedAt) {
		var ret string
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetArchivedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ArchivedAt) {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *FlowDto) HasArchivedAt() bool {
	if o != nil && !IsNil(o.ArchivedAt) {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given string and assigns it to the ArchivedAt field.
func (o *FlowDto) SetArchivedAt(v string) {
	o.ArchivedAt = &v
}

// GetRevision returns the Revision field value
func (o *FlowDto) GetRevision() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *FlowDto) GetRevisionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *FlowDto) SetRevision(v string) {
	o.Revision = v
}

// GetUniversalFlowId returns the UniversalFlowId field value if set, zero value otherwise.
func (o *FlowDto) GetUniversalFlowId() string {
	if o == nil || IsNil(o.UniversalFlowId) {
		var ret string
		return ret
	}
	return *o.UniversalFlowId
}

// GetUniversalFlowIdOk returns a tuple with the UniversalFlowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetUniversalFlowIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniversalFlowId) {
		return nil, false
	}
	return o.UniversalFlowId, true
}

// HasUniversalFlowId returns a boolean if a field has been set.
func (o *FlowDto) HasUniversalFlowId() bool {
	if o != nil && !IsNil(o.UniversalFlowId) {
		return true
	}

	return false
}

// SetUniversalFlowId gets a reference to the given string and assigns it to the UniversalFlowId field.
func (o *FlowDto) SetUniversalFlowId(v string) {
	o.UniversalFlowId = &v
}

// GetIntegrationId returns the IntegrationId field value if set, zero value otherwise.
func (o *FlowDto) GetIntegrationId() string {
	if o == nil || IsNil(o.IntegrationId) {
		var ret string
		return ret
	}
	return *o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetIntegrationIdOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationId) {
		return nil, false
	}
	return o.IntegrationId, true
}

// HasIntegrationId returns a boolean if a field has been set.
func (o *FlowDto) HasIntegrationId() bool {
	if o != nil && !IsNil(o.IntegrationId) {
		return true
	}

	return false
}

// SetIntegrationId gets a reference to the given string and assigns it to the IntegrationId field.
func (o *FlowDto) SetIntegrationId(v string) {
	o.IntegrationId = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *FlowDto) GetIntegration() IntegrationDto {
	if o == nil || IsNil(o.Integration) {
		var ret IntegrationDto
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetIntegrationOk() (*IntegrationDto, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *FlowDto) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given IntegrationDto and assigns it to the Integration field.
func (o *FlowDto) SetIntegration(v IntegrationDto) {
	o.Integration = &v
}

// GetUniversalFlowRevision returns the UniversalFlowRevision field value if set, zero value otherwise.
func (o *FlowDto) GetUniversalFlowRevision() string {
	if o == nil || IsNil(o.UniversalFlowRevision) {
		var ret string
		return ret
	}
	return *o.UniversalFlowRevision
}

// GetUniversalFlowRevisionOk returns a tuple with the UniversalFlowRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetUniversalFlowRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.UniversalFlowRevision) {
		return nil, false
	}
	return o.UniversalFlowRevision, true
}

// HasUniversalFlowRevision returns a boolean if a field has been set.
func (o *FlowDto) HasUniversalFlowRevision() bool {
	if o != nil && !IsNil(o.UniversalFlowRevision) {
		return true
	}

	return false
}

// SetUniversalFlowRevision gets a reference to the given string and assigns it to the UniversalFlowRevision field.
func (o *FlowDto) SetUniversalFlowRevision(v string) {
	o.UniversalFlowRevision = &v
}

// GetParametersSchema returns the ParametersSchema field value if set, zero value otherwise.
func (o *FlowDto) GetParametersSchema() map[string]interface{} {
	if o == nil || IsNil(o.ParametersSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.ParametersSchema
}

// GetParametersSchemaOk returns a tuple with the ParametersSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetParametersSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ParametersSchema) {
		return map[string]interface{}{}, false
	}
	return o.ParametersSchema, true
}

// HasParametersSchema returns a boolean if a field has been set.
func (o *FlowDto) HasParametersSchema() bool {
	if o != nil && !IsNil(o.ParametersSchema) {
		return true
	}

	return false
}

// SetParametersSchema gets a reference to the given map[string]interface{} and assigns it to the ParametersSchema field.
func (o *FlowDto) SetParametersSchema(v map[string]interface{}) {
	o.ParametersSchema = v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *FlowDto) GetNodes() map[string]interface{} {
	if o == nil || IsNil(o.Nodes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetNodesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Nodes) {
		return map[string]interface{}{}, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *FlowDto) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given map[string]interface{} and assigns it to the Nodes field.
func (o *FlowDto) SetNodes(v map[string]interface{}) {
	o.Nodes = v
}

// GetAutoCreateInstances returns the AutoCreateInstances field value if set, zero value otherwise.
func (o *FlowDto) GetAutoCreateInstances() bool {
	if o == nil || IsNil(o.AutoCreateInstances) {
		var ret bool
		return ret
	}
	return *o.AutoCreateInstances
}

// GetAutoCreateInstancesOk returns a tuple with the AutoCreateInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetAutoCreateInstancesOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreateInstances) {
		return nil, false
	}
	return o.AutoCreateInstances, true
}

// HasAutoCreateInstances returns a boolean if a field has been set.
func (o *FlowDto) HasAutoCreateInstances() bool {
	if o != nil && !IsNil(o.AutoCreateInstances) {
		return true
	}

	return false
}

// SetAutoCreateInstances gets a reference to the given bool and assigns it to the AutoCreateInstances field.
func (o *FlowDto) SetAutoCreateInstances(v bool) {
	o.AutoCreateInstances = &v
}

// GetCustomized returns the Customized field value if set, zero value otherwise.
func (o *FlowDto) GetCustomized() bool {
	if o == nil || IsNil(o.Customized) {
		var ret bool
		return ret
	}
	return *o.Customized
}

// GetCustomizedOk returns a tuple with the Customized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetCustomizedOk() (*bool, bool) {
	if o == nil || IsNil(o.Customized) {
		return nil, false
	}
	return o.Customized, true
}

// HasCustomized returns a boolean if a field has been set.
func (o *FlowDto) HasCustomized() bool {
	if o != nil && !IsNil(o.Customized) {
		return true
	}

	return false
}

// SetCustomized gets a reference to the given bool and assigns it to the Customized field.
func (o *FlowDto) SetCustomized(v bool) {
	o.Customized = &v
}

// GetAppliedToIntegrations returns the AppliedToIntegrations field value if set, zero value otherwise.
func (o *FlowDto) GetAppliedToIntegrations() []string {
	if o == nil || IsNil(o.AppliedToIntegrations) {
		var ret []string
		return ret
	}
	return o.AppliedToIntegrations
}

// GetAppliedToIntegrationsOk returns a tuple with the AppliedToIntegrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetAppliedToIntegrationsOk() ([]string, bool) {
	if o == nil || IsNil(o.AppliedToIntegrations) {
		return nil, false
	}
	return o.AppliedToIntegrations, true
}

// HasAppliedToIntegrations returns a boolean if a field has been set.
func (o *FlowDto) HasAppliedToIntegrations() bool {
	if o != nil && !IsNil(o.AppliedToIntegrations) {
		return true
	}

	return false
}

// SetAppliedToIntegrations gets a reference to the given []string and assigns it to the AppliedToIntegrations field.
func (o *FlowDto) SetAppliedToIntegrations(v []string) {
	o.AppliedToIntegrations = v
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *FlowDto) GetDependencies() []map[string]interface{} {
	if o == nil || IsNil(o.Dependencies) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetDependenciesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Dependencies) {
		return nil, false
	}
	return o.Dependencies, true
}

// HasDependencies returns a boolean if a field has been set.
func (o *FlowDto) HasDependencies() bool {
	if o != nil && !IsNil(o.Dependencies) {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given []map[string]interface{} and assigns it to the Dependencies field.
func (o *FlowDto) SetDependencies(v []map[string]interface{}) {
	o.Dependencies = v
}

// GetIsDeployed returns the IsDeployed field value if set, zero value otherwise.
func (o *FlowDto) GetIsDeployed() bool {
	if o == nil || IsNil(o.IsDeployed) {
		var ret bool
		return ret
	}
	return *o.IsDeployed
}

// GetIsDeployedOk returns a tuple with the IsDeployed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetIsDeployedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeployed) {
		return nil, false
	}
	return o.IsDeployed, true
}

// HasIsDeployed returns a boolean if a field has been set.
func (o *FlowDto) HasIsDeployed() bool {
	if o != nil && !IsNil(o.IsDeployed) {
		return true
	}

	return false
}

// SetIsDeployed gets a reference to the given bool and assigns it to the IsDeployed field.
func (o *FlowDto) SetIsDeployed(v bool) {
	o.IsDeployed = &v
}

// GetConfigurationState returns the ConfigurationState field value if set, zero value otherwise.
func (o *FlowDto) GetConfigurationState() string {
	if o == nil || IsNil(o.ConfigurationState) {
		var ret string
		return ret
	}
	return *o.ConfigurationState
}

// GetConfigurationStateOk returns a tuple with the ConfigurationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetConfigurationStateOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationState) {
		return nil, false
	}
	return o.ConfigurationState, true
}

// HasConfigurationState returns a boolean if a field has been set.
func (o *FlowDto) HasConfigurationState() bool {
	if o != nil && !IsNil(o.ConfigurationState) {
		return true
	}

	return false
}

// SetConfigurationState gets a reference to the given string and assigns it to the ConfigurationState field.
func (o *FlowDto) SetConfigurationState(v string) {
	o.ConfigurationState = &v
}

// GetConfigurationStateMessage returns the ConfigurationStateMessage field value if set, zero value otherwise.
func (o *FlowDto) GetConfigurationStateMessage() string {
	if o == nil || IsNil(o.ConfigurationStateMessage) {
		var ret string
		return ret
	}
	return *o.ConfigurationStateMessage
}

// GetConfigurationStateMessageOk returns a tuple with the ConfigurationStateMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowDto) GetConfigurationStateMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationStateMessage) {
		return nil, false
	}
	return o.ConfigurationStateMessage, true
}

// HasConfigurationStateMessage returns a boolean if a field has been set.
func (o *FlowDto) HasConfigurationStateMessage() bool {
	if o != nil && !IsNil(o.ConfigurationStateMessage) {
		return true
	}

	return false
}

// SetConfigurationStateMessage gets a reference to the given string and assigns it to the ConfigurationStateMessage field.
func (o *FlowDto) SetConfigurationStateMessage(v string) {
	o.ConfigurationStateMessage = &v
}

func (o FlowDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	if !IsNil(o.ArchivedAt) {
		toSerialize["archivedAt"] = o.ArchivedAt
	}
	toSerialize["revision"] = o.Revision
	if !IsNil(o.UniversalFlowId) {
		toSerialize["universalFlowId"] = o.UniversalFlowId
	}
	if !IsNil(o.IntegrationId) {
		toSerialize["integrationId"] = o.IntegrationId
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.UniversalFlowRevision) {
		toSerialize["universalFlowRevision"] = o.UniversalFlowRevision
	}
	if !IsNil(o.ParametersSchema) {
		toSerialize["parametersSchema"] = o.ParametersSchema
	}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	if !IsNil(o.AutoCreateInstances) {
		toSerialize["autoCreateInstances"] = o.AutoCreateInstances
	}
	if !IsNil(o.Customized) {
		toSerialize["customized"] = o.Customized
	}
	if !IsNil(o.AppliedToIntegrations) {
		toSerialize["appliedToIntegrations"] = o.AppliedToIntegrations
	}
	if !IsNil(o.Dependencies) {
		toSerialize["dependencies"] = o.Dependencies
	}
	if !IsNil(o.IsDeployed) {
		toSerialize["isDeployed"] = o.IsDeployed
	}
	if !IsNil(o.ConfigurationState) {
		toSerialize["configurationState"] = o.ConfigurationState
	}
	if !IsNil(o.ConfigurationStateMessage) {
		toSerialize["configurationStateMessage"] = o.ConfigurationStateMessage
	}
	return toSerialize, nil
}

func (o *FlowDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"key",
		"name",
		"revision",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlowDto := _FlowDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlowDto)

	if err != nil {
		return err
	}

	*o = FlowDto(varFlowDto)

	return err
}

type NullableFlowDto struct {
	value *FlowDto
	isSet bool
}

func (v NullableFlowDto) Get() *FlowDto {
	return v.value
}

func (v *NullableFlowDto) Set(val *FlowDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowDto(val *FlowDto) *NullableFlowDto {
	return &NullableFlowDto{value: val, isSet: true}
}

func (v NullableFlowDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


