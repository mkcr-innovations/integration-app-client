/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the FlowInstanceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowInstanceDto{}

// FlowInstanceDto struct for FlowInstanceDto
type FlowInstanceDto struct {
	Id string `json:"id"`
	UserId *string `json:"userId,omitempty"`
	User *CustomerDto `json:"user,omitempty"`
	InstanceKey *string `json:"instanceKey,omitempty"`
	ConnectionId *string `json:"connectionId,omitempty"`
	IntegrationId *string `json:"integrationId,omitempty"`
	Integration *IntegrationDto `json:"integration,omitempty"`
	FlowId *string `json:"flowId,omitempty"`
	Flow *FlowDto `json:"flow,omitempty"`
	UniversalFlowId *string `json:"universalFlowId,omitempty"`
	FlowRevision *string `json:"flowRevision,omitempty"`
	Outdated *bool `json:"outdated,omitempty"`
	Name *string `json:"name,omitempty"`
	ParametersSchema map[string]interface{} `json:"parametersSchema,omitempty"`
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	Nodes map[string]interface{} `json:"nodes,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`
	Dependencies []IntegrationElementInstanceDependencyDto `json:"dependencies,omitempty"`
	State *string `json:"state,omitempty"`
	Connection *ConnectionDto `json:"connection,omitempty"`
}

type _FlowInstanceDto FlowInstanceDto

// NewFlowInstanceDto instantiates a new FlowInstanceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowInstanceDto(id string) *FlowInstanceDto {
	this := FlowInstanceDto{}
	this.Id = id
	return &this
}

// NewFlowInstanceDtoWithDefaults instantiates a new FlowInstanceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowInstanceDtoWithDefaults() *FlowInstanceDto {
	this := FlowInstanceDto{}
	return &this
}

// GetId returns the Id field value
func (o *FlowInstanceDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FlowInstanceDto) SetId(v string) {
	o.Id = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *FlowInstanceDto) SetUserId(v string) {
	o.UserId = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetUser() CustomerDto {
	if o == nil || IsNil(o.User) {
		var ret CustomerDto
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetUserOk() (*CustomerDto, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given CustomerDto and assigns it to the User field.
func (o *FlowInstanceDto) SetUser(v CustomerDto) {
	o.User = &v
}

// GetInstanceKey returns the InstanceKey field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetInstanceKey() string {
	if o == nil || IsNil(o.InstanceKey) {
		var ret string
		return ret
	}
	return *o.InstanceKey
}

// GetInstanceKeyOk returns a tuple with the InstanceKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetInstanceKeyOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceKey) {
		return nil, false
	}
	return o.InstanceKey, true
}

// HasInstanceKey returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasInstanceKey() bool {
	if o != nil && !IsNil(o.InstanceKey) {
		return true
	}

	return false
}

// SetInstanceKey gets a reference to the given string and assigns it to the InstanceKey field.
func (o *FlowInstanceDto) SetInstanceKey(v string) {
	o.InstanceKey = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *FlowInstanceDto) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetIntegrationId returns the IntegrationId field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetIntegrationId() string {
	if o == nil || IsNil(o.IntegrationId) {
		var ret string
		return ret
	}
	return *o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetIntegrationIdOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationId) {
		return nil, false
	}
	return o.IntegrationId, true
}

// HasIntegrationId returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasIntegrationId() bool {
	if o != nil && !IsNil(o.IntegrationId) {
		return true
	}

	return false
}

// SetIntegrationId gets a reference to the given string and assigns it to the IntegrationId field.
func (o *FlowInstanceDto) SetIntegrationId(v string) {
	o.IntegrationId = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetIntegration() IntegrationDto {
	if o == nil || IsNil(o.Integration) {
		var ret IntegrationDto
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetIntegrationOk() (*IntegrationDto, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given IntegrationDto and assigns it to the Integration field.
func (o *FlowInstanceDto) SetIntegration(v IntegrationDto) {
	o.Integration = &v
}

// GetFlowId returns the FlowId field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetFlowId() string {
	if o == nil || IsNil(o.FlowId) {
		var ret string
		return ret
	}
	return *o.FlowId
}

// GetFlowIdOk returns a tuple with the FlowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetFlowIdOk() (*string, bool) {
	if o == nil || IsNil(o.FlowId) {
		return nil, false
	}
	return o.FlowId, true
}

// HasFlowId returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasFlowId() bool {
	if o != nil && !IsNil(o.FlowId) {
		return true
	}

	return false
}

// SetFlowId gets a reference to the given string and assigns it to the FlowId field.
func (o *FlowInstanceDto) SetFlowId(v string) {
	o.FlowId = &v
}

// GetFlow returns the Flow field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetFlow() FlowDto {
	if o == nil || IsNil(o.Flow) {
		var ret FlowDto
		return ret
	}
	return *o.Flow
}

// GetFlowOk returns a tuple with the Flow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetFlowOk() (*FlowDto, bool) {
	if o == nil || IsNil(o.Flow) {
		return nil, false
	}
	return o.Flow, true
}

// HasFlow returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasFlow() bool {
	if o != nil && !IsNil(o.Flow) {
		return true
	}

	return false
}

// SetFlow gets a reference to the given FlowDto and assigns it to the Flow field.
func (o *FlowInstanceDto) SetFlow(v FlowDto) {
	o.Flow = &v
}

// GetUniversalFlowId returns the UniversalFlowId field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetUniversalFlowId() string {
	if o == nil || IsNil(o.UniversalFlowId) {
		var ret string
		return ret
	}
	return *o.UniversalFlowId
}

// GetUniversalFlowIdOk returns a tuple with the UniversalFlowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetUniversalFlowIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniversalFlowId) {
		return nil, false
	}
	return o.UniversalFlowId, true
}

// HasUniversalFlowId returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasUniversalFlowId() bool {
	if o != nil && !IsNil(o.UniversalFlowId) {
		return true
	}

	return false
}

// SetUniversalFlowId gets a reference to the given string and assigns it to the UniversalFlowId field.
func (o *FlowInstanceDto) SetUniversalFlowId(v string) {
	o.UniversalFlowId = &v
}

// GetFlowRevision returns the FlowRevision field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetFlowRevision() string {
	if o == nil || IsNil(o.FlowRevision) {
		var ret string
		return ret
	}
	return *o.FlowRevision
}

// GetFlowRevisionOk returns a tuple with the FlowRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetFlowRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.FlowRevision) {
		return nil, false
	}
	return o.FlowRevision, true
}

// HasFlowRevision returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasFlowRevision() bool {
	if o != nil && !IsNil(o.FlowRevision) {
		return true
	}

	return false
}

// SetFlowRevision gets a reference to the given string and assigns it to the FlowRevision field.
func (o *FlowInstanceDto) SetFlowRevision(v string) {
	o.FlowRevision = &v
}

// GetOutdated returns the Outdated field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetOutdated() bool {
	if o == nil || IsNil(o.Outdated) {
		var ret bool
		return ret
	}
	return *o.Outdated
}

// GetOutdatedOk returns a tuple with the Outdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetOutdatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Outdated) {
		return nil, false
	}
	return o.Outdated, true
}

// HasOutdated returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasOutdated() bool {
	if o != nil && !IsNil(o.Outdated) {
		return true
	}

	return false
}

// SetOutdated gets a reference to the given bool and assigns it to the Outdated field.
func (o *FlowInstanceDto) SetOutdated(v bool) {
	o.Outdated = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FlowInstanceDto) SetName(v string) {
	o.Name = &v
}

// GetParametersSchema returns the ParametersSchema field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetParametersSchema() map[string]interface{} {
	if o == nil || IsNil(o.ParametersSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.ParametersSchema
}

// GetParametersSchemaOk returns a tuple with the ParametersSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetParametersSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ParametersSchema) {
		return map[string]interface{}{}, false
	}
	return o.ParametersSchema, true
}

// HasParametersSchema returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasParametersSchema() bool {
	if o != nil && !IsNil(o.ParametersSchema) {
		return true
	}

	return false
}

// SetParametersSchema gets a reference to the given map[string]interface{} and assigns it to the ParametersSchema field.
func (o *FlowInstanceDto) SetParametersSchema(v map[string]interface{}) {
	o.ParametersSchema = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetParameters() map[string]interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *FlowInstanceDto) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetNodes() map[string]interface{} {
	if o == nil || IsNil(o.Nodes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetNodesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Nodes) {
		return map[string]interface{}{}, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given map[string]interface{} and assigns it to the Nodes field.
func (o *FlowInstanceDto) SetNodes(v map[string]interface{}) {
	o.Nodes = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FlowInstanceDto) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *FlowInstanceDto) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *FlowInstanceDto) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetArchivedAt() time.Time {
	if o == nil || IsNil(o.ArchivedAt) {
		var ret time.Time
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetArchivedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ArchivedAt) {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasArchivedAt() bool {
	if o != nil && !IsNil(o.ArchivedAt) {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given time.Time and assigns it to the ArchivedAt field.
func (o *FlowInstanceDto) SetArchivedAt(v time.Time) {
	o.ArchivedAt = &v
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetDependencies() []IntegrationElementInstanceDependencyDto {
	if o == nil || IsNil(o.Dependencies) {
		var ret []IntegrationElementInstanceDependencyDto
		return ret
	}
	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetDependenciesOk() ([]IntegrationElementInstanceDependencyDto, bool) {
	if o == nil || IsNil(o.Dependencies) {
		return nil, false
	}
	return o.Dependencies, true
}

// HasDependencies returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasDependencies() bool {
	if o != nil && !IsNil(o.Dependencies) {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given []IntegrationElementInstanceDependencyDto and assigns it to the Dependencies field.
func (o *FlowInstanceDto) SetDependencies(v []IntegrationElementInstanceDependencyDto) {
	o.Dependencies = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *FlowInstanceDto) SetState(v string) {
	o.State = &v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *FlowInstanceDto) GetConnection() ConnectionDto {
	if o == nil || IsNil(o.Connection) {
		var ret ConnectionDto
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowInstanceDto) GetConnectionOk() (*ConnectionDto, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *FlowInstanceDto) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given ConnectionDto and assigns it to the Connection field.
func (o *FlowInstanceDto) SetConnection(v ConnectionDto) {
	o.Connection = &v
}

func (o FlowInstanceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowInstanceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.InstanceKey) {
		toSerialize["instanceKey"] = o.InstanceKey
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connectionId"] = o.ConnectionId
	}
	if !IsNil(o.IntegrationId) {
		toSerialize["integrationId"] = o.IntegrationId
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.FlowId) {
		toSerialize["flowId"] = o.FlowId
	}
	if !IsNil(o.Flow) {
		toSerialize["flow"] = o.Flow
	}
	if !IsNil(o.UniversalFlowId) {
		toSerialize["universalFlowId"] = o.UniversalFlowId
	}
	if !IsNil(o.FlowRevision) {
		toSerialize["flowRevision"] = o.FlowRevision
	}
	if !IsNil(o.Outdated) {
		toSerialize["outdated"] = o.Outdated
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ParametersSchema) {
		toSerialize["parametersSchema"] = o.ParametersSchema
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.ArchivedAt) {
		toSerialize["archivedAt"] = o.ArchivedAt
	}
	if !IsNil(o.Dependencies) {
		toSerialize["dependencies"] = o.Dependencies
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	return toSerialize, nil
}

func (o *FlowInstanceDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlowInstanceDto := _FlowInstanceDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlowInstanceDto)

	if err != nil {
		return err
	}

	*o = FlowInstanceDto(varFlowInstanceDto)

	return err
}

type NullableFlowInstanceDto struct {
	value *FlowInstanceDto
	isSet bool
}

func (v NullableFlowInstanceDto) Get() *FlowInstanceDto {
	return v.value
}

func (v *NullableFlowInstanceDto) Set(val *FlowInstanceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowInstanceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowInstanceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowInstanceDto(val *FlowInstanceDto) *NullableFlowInstanceDto {
	return &NullableFlowInstanceDto{value: val, isSet: true}
}

func (v NullableFlowInstanceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowInstanceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


