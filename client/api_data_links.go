/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type DataLinksAPI interface {

	/*
	DataLinkTableInstanceControllerArchiveDataLinkTableInstance Archive data link table instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest
	*/
	DataLinkTableInstanceControllerArchiveDataLinkTableInstance(ctx context.Context) ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest

	// DataLinkTableInstanceControllerArchiveDataLinkTableInstanceExecute executes the request
	DataLinkTableInstanceControllerArchiveDataLinkTableInstanceExecute(r ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest) (*http.Response, error)

	/*
	DataLinkTableInstanceControllerCreateDataLinkTableInstanceLinks Create data link table instance link

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest
	*/
	DataLinkTableInstanceControllerCreateDataLinkTableInstanceLinks(ctx context.Context) ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest

	// DataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksExecute executes the request
	DataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksExecute(r ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest) (*http.Response, error)

	/*
	DataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinks Delete data link table instance link

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest
	*/
	DataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinks(ctx context.Context) ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest

	// DataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksExecute executes the request
	DataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksExecute(r ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest) (*http.Response, error)

	/*
	DataLinkTableInstanceControllerGetDataLinkTableInstance Get data link table instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest
	*/
	DataLinkTableInstanceControllerGetDataLinkTableInstance(ctx context.Context) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest

	// DataLinkTableInstanceControllerGetDataLinkTableInstanceExecute executes the request
	//  @return DataLinkTableInstanceDto
	DataLinkTableInstanceControllerGetDataLinkTableInstanceExecute(r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest) (*DataLinkTableInstanceDto, *http.Response, error)

	/*
	DataLinkTableInstanceControllerGetDataLinkTableInstanceLinks Get data link table instance links

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest
	*/
	DataLinkTableInstanceControllerGetDataLinkTableInstanceLinks(ctx context.Context) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest

	// DataLinkTableInstanceControllerGetDataLinkTableInstanceLinksExecute executes the request
	DataLinkTableInstanceControllerGetDataLinkTableInstanceLinksExecute(r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) (*http.Response, error)

	/*
	DataLinkTableInstanceControllerPatchDataLinkTableInstance Path data link table instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest
	*/
	DataLinkTableInstanceControllerPatchDataLinkTableInstance(ctx context.Context) ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest

	// DataLinkTableInstanceControllerPatchDataLinkTableInstanceExecute executes the request
	//  @return DataLinkTableInstanceDto
	DataLinkTableInstanceControllerPatchDataLinkTableInstanceExecute(r ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest) (*DataLinkTableInstanceDto, *http.Response, error)

	/*
	DataLinkTableInstanceControllerPostDataLinkTableInstance Create data link table instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest
	*/
	DataLinkTableInstanceControllerPostDataLinkTableInstance(ctx context.Context) ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest

	// DataLinkTableInstanceControllerPostDataLinkTableInstanceExecute executes the request
	//  @return DataLinkTableInstanceDto
	DataLinkTableInstanceControllerPostDataLinkTableInstanceExecute(r ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest) (*DataLinkTableInstanceDto, *http.Response, error)

	/*
	DataLinkTableInstanceControllerPutDataLinkTableInstance Update data link table instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest
	*/
	DataLinkTableInstanceControllerPutDataLinkTableInstance(ctx context.Context) ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest

	// DataLinkTableInstanceControllerPutDataLinkTableInstanceExecute executes the request
	//  @return DataLinkTableInstanceDto
	DataLinkTableInstanceControllerPutDataLinkTableInstanceExecute(r ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest) (*DataLinkTableInstanceDto, *http.Response, error)

	/*
	DataLinkTableInstancesControllerListDataLinkTableInstances List data link table instances

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest
	*/
	DataLinkTableInstancesControllerListDataLinkTableInstances(ctx context.Context) ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest

	// DataLinkTableInstancesControllerListDataLinkTableInstancesExecute executes the request
	//  @return DataLinkTableInstancesControllerListDataLinkTableInstances200Response
	DataLinkTableInstancesControllerListDataLinkTableInstancesExecute(r ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest) (*DataLinkTableInstancesControllerListDataLinkTableInstances200Response, *http.Response, error)

	/*
	DataLinkTablesControllerCreateDataLinkTable Create data link table

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDataLinkTablesControllerCreateDataLinkTableRequest
	*/
	DataLinkTablesControllerCreateDataLinkTable(ctx context.Context) ApiDataLinkTablesControllerCreateDataLinkTableRequest

	// DataLinkTablesControllerCreateDataLinkTableExecute executes the request
	//  @return DataLinkTableDto
	DataLinkTablesControllerCreateDataLinkTableExecute(r ApiDataLinkTablesControllerCreateDataLinkTableRequest) (*DataLinkTableDto, *http.Response, error)

	/*
	DataLinkTablesControllerDeleteDataLinkTable Archive data link table

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param idOrKey
	@return ApiDataLinkTablesControllerDeleteDataLinkTableRequest
	*/
	DataLinkTablesControllerDeleteDataLinkTable(ctx context.Context, idOrKey string) ApiDataLinkTablesControllerDeleteDataLinkTableRequest

	// DataLinkTablesControllerDeleteDataLinkTableExecute executes the request
	DataLinkTablesControllerDeleteDataLinkTableExecute(r ApiDataLinkTablesControllerDeleteDataLinkTableRequest) (*http.Response, error)

	/*
	DataLinkTablesControllerGetDataLinkTable Get data link table

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param idOrKey
	@return ApiDataLinkTablesControllerGetDataLinkTableRequest
	*/
	DataLinkTablesControllerGetDataLinkTable(ctx context.Context, idOrKey string) ApiDataLinkTablesControllerGetDataLinkTableRequest

	// DataLinkTablesControllerGetDataLinkTableExecute executes the request
	//  @return DataLinkTableDto
	DataLinkTablesControllerGetDataLinkTableExecute(r ApiDataLinkTablesControllerGetDataLinkTableRequest) (*DataLinkTableDto, *http.Response, error)

	/*
	DataLinkTablesControllerListDataLinkTables List data link tables

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDataLinkTablesControllerListDataLinkTablesRequest
	*/
	DataLinkTablesControllerListDataLinkTables(ctx context.Context) ApiDataLinkTablesControllerListDataLinkTablesRequest

	// DataLinkTablesControllerListDataLinkTablesExecute executes the request
	//  @return DataLinkTablesControllerListDataLinkTables200Response
	DataLinkTablesControllerListDataLinkTablesExecute(r ApiDataLinkTablesControllerListDataLinkTablesRequest) (*DataLinkTablesControllerListDataLinkTables200Response, *http.Response, error)

	/*
	DataLinkTablesControllerPatchDataLinkTable Patch data link table

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param idOrKey
	@return ApiDataLinkTablesControllerPatchDataLinkTableRequest
	*/
	DataLinkTablesControllerPatchDataLinkTable(ctx context.Context, idOrKey string) ApiDataLinkTablesControllerPatchDataLinkTableRequest

	// DataLinkTablesControllerPatchDataLinkTableExecute executes the request
	//  @return DataLinkTableDto
	DataLinkTablesControllerPatchDataLinkTableExecute(r ApiDataLinkTablesControllerPatchDataLinkTableRequest) (*DataLinkTableDto, *http.Response, error)

	/*
	DataLinkTablesControllerPutDataLinkTable Update data link table

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param idOrKey
	@return ApiDataLinkTablesControllerPutDataLinkTableRequest
	*/
	DataLinkTablesControllerPutDataLinkTable(ctx context.Context, idOrKey string) ApiDataLinkTablesControllerPutDataLinkTableRequest

	// DataLinkTablesControllerPutDataLinkTableExecute executes the request
	//  @return DataLinkTableDto
	DataLinkTablesControllerPutDataLinkTableExecute(r ApiDataLinkTablesControllerPutDataLinkTableRequest) (*DataLinkTableDto, *http.Response, error)

	/*
	DataLinksControllerDeleteDataLinkDto Delete data link

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param dataLinkId
	@return ApiDataLinksControllerDeleteDataLinkDtoRequest
	*/
	DataLinksControllerDeleteDataLinkDto(ctx context.Context, dataLinkId string) ApiDataLinksControllerDeleteDataLinkDtoRequest

	// DataLinksControllerDeleteDataLinkDtoExecute executes the request
	DataLinksControllerDeleteDataLinkDtoExecute(r ApiDataLinksControllerDeleteDataLinkDtoRequest) (*http.Response, error)

	/*
	DataLinksControllerListDataLinks List data links

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDataLinksControllerListDataLinksRequest
	*/
	DataLinksControllerListDataLinks(ctx context.Context) ApiDataLinksControllerListDataLinksRequest

	// DataLinksControllerListDataLinksExecute executes the request
	//  @return DataLinksControllerListDataLinks200Response
	DataLinksControllerListDataLinksExecute(r ApiDataLinksControllerListDataLinksRequest) (*DataLinksControllerListDataLinks200Response, *http.Response, error)
}

// DataLinksAPIService DataLinksAPI service
type DataLinksAPIService service

type ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	id *string
	instanceKey *string
	dataLinkTableId *string
	dataLinkTableKey *string
	autoCreate *bool
	integrationKey *string
	integrationId *string
	connectionId *string
}

func (r ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest) Id(id string) ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest {
	r.id = &id
	return r
}

func (r ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest) InstanceKey(instanceKey string) ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest) DataLinkTableId(dataLinkTableId string) ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest {
	r.dataLinkTableId = &dataLinkTableId
	return r
}

func (r ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest) DataLinkTableKey(dataLinkTableKey string) ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest {
	r.dataLinkTableKey = &dataLinkTableKey
	return r
}

func (r ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest) AutoCreate(autoCreate bool) ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest) IntegrationKey(integrationKey string) ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest {
	r.integrationKey = &integrationKey
	return r
}

func (r ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest) IntegrationId(integrationId string) ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest) ConnectionId(connectionId string) ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DataLinkTableInstanceControllerArchiveDataLinkTableInstanceExecute(r)
}

/*
DataLinkTableInstanceControllerArchiveDataLinkTableInstance Archive data link table instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest
*/
func (a *DataLinksAPIService) DataLinkTableInstanceControllerArchiveDataLinkTableInstance(ctx context.Context) ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest {
	return ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DataLinksAPIService) DataLinkTableInstanceControllerArchiveDataLinkTableInstanceExecute(r ApiDataLinkTableInstanceControllerArchiveDataLinkTableInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTableInstanceControllerArchiveDataLinkTableInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-table-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.dataLinkTableId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableId", r.dataLinkTableId, "")
	}
	if r.dataLinkTableKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableKey", r.dataLinkTableKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	if r.integrationKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationKey", r.integrationKey, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	createDataLinkDto *CreateDataLinkDto
	id *string
	instanceKey *string
	dataLinkTableId *string
	dataLinkTableKey *string
	autoCreate *bool
	integrationKey *string
	integrationId *string
	connectionId *string
}

func (r ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest) CreateDataLinkDto(createDataLinkDto CreateDataLinkDto) ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest {
	r.createDataLinkDto = &createDataLinkDto
	return r
}

func (r ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest) Id(id string) ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest {
	r.id = &id
	return r
}

func (r ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest) InstanceKey(instanceKey string) ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest) DataLinkTableId(dataLinkTableId string) ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest {
	r.dataLinkTableId = &dataLinkTableId
	return r
}

func (r ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest) DataLinkTableKey(dataLinkTableKey string) ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest {
	r.dataLinkTableKey = &dataLinkTableKey
	return r
}

func (r ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest) AutoCreate(autoCreate bool) ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest) IntegrationKey(integrationKey string) ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest {
	r.integrationKey = &integrationKey
	return r
}

func (r ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest) IntegrationId(integrationId string) ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest) ConnectionId(connectionId string) ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest) Execute() (*http.Response, error) {
	return r.ApiService.DataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksExecute(r)
}

/*
DataLinkTableInstanceControllerCreateDataLinkTableInstanceLinks Create data link table instance link

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest
*/
func (a *DataLinksAPIService) DataLinkTableInstanceControllerCreateDataLinkTableInstanceLinks(ctx context.Context) ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest {
	return ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DataLinksAPIService) DataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksExecute(r ApiDataLinkTableInstanceControllerCreateDataLinkTableInstanceLinksRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTableInstanceControllerCreateDataLinkTableInstanceLinks")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-table-instance/links"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createDataLinkDto == nil {
		return nil, reportError("createDataLinkDto is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.dataLinkTableId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableId", r.dataLinkTableId, "")
	}
	if r.dataLinkTableKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableKey", r.dataLinkTableKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	if r.integrationKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationKey", r.integrationKey, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createDataLinkDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	deleteDataLinkDto *DeleteDataLinkDto
	id *string
	instanceKey *string
	dataLinkTableId *string
	dataLinkTableKey *string
	autoCreate *bool
	integrationKey *string
	integrationId *string
	connectionId *string
}

func (r ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest) DeleteDataLinkDto(deleteDataLinkDto DeleteDataLinkDto) ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest {
	r.deleteDataLinkDto = &deleteDataLinkDto
	return r
}

func (r ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest) Id(id string) ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest {
	r.id = &id
	return r
}

func (r ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest) InstanceKey(instanceKey string) ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest) DataLinkTableId(dataLinkTableId string) ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest {
	r.dataLinkTableId = &dataLinkTableId
	return r
}

func (r ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest) DataLinkTableKey(dataLinkTableKey string) ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest {
	r.dataLinkTableKey = &dataLinkTableKey
	return r
}

func (r ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest) AutoCreate(autoCreate bool) ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest) IntegrationKey(integrationKey string) ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest {
	r.integrationKey = &integrationKey
	return r
}

func (r ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest) IntegrationId(integrationId string) ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest) ConnectionId(connectionId string) ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest) Execute() (*http.Response, error) {
	return r.ApiService.DataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksExecute(r)
}

/*
DataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinks Delete data link table instance link

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest
*/
func (a *DataLinksAPIService) DataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinks(ctx context.Context) ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest {
	return ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DataLinksAPIService) DataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksExecute(r ApiDataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinksRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTableInstanceControllerDeleteDataLinkTableInstanceLinks")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-table-instance/links"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deleteDataLinkDto == nil {
		return nil, reportError("deleteDataLinkDto is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.dataLinkTableId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableId", r.dataLinkTableId, "")
	}
	if r.dataLinkTableKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableKey", r.dataLinkTableKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	if r.integrationKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationKey", r.integrationKey, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deleteDataLinkDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	id *string
	instanceKey *string
	dataLinkTableId *string
	dataLinkTableKey *string
	autoCreate *bool
	integrationKey *string
	integrationId *string
	connectionId *string
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest) Id(id string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest {
	r.id = &id
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest) InstanceKey(instanceKey string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest) DataLinkTableId(dataLinkTableId string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest {
	r.dataLinkTableId = &dataLinkTableId
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest) DataLinkTableKey(dataLinkTableKey string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest {
	r.dataLinkTableKey = &dataLinkTableKey
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest) AutoCreate(autoCreate bool) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest) IntegrationKey(integrationKey string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest {
	r.integrationKey = &integrationKey
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest) IntegrationId(integrationId string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest) ConnectionId(connectionId string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest) Execute() (*DataLinkTableInstanceDto, *http.Response, error) {
	return r.ApiService.DataLinkTableInstanceControllerGetDataLinkTableInstanceExecute(r)
}

/*
DataLinkTableInstanceControllerGetDataLinkTableInstance Get data link table instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest
*/
func (a *DataLinksAPIService) DataLinkTableInstanceControllerGetDataLinkTableInstance(ctx context.Context) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest {
	return ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataLinkTableInstanceDto
func (a *DataLinksAPIService) DataLinkTableInstanceControllerGetDataLinkTableInstanceExecute(r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceRequest) (*DataLinkTableInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataLinkTableInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTableInstanceControllerGetDataLinkTableInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-table-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.dataLinkTableId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableId", r.dataLinkTableId, "")
	}
	if r.dataLinkTableKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableKey", r.dataLinkTableKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	if r.integrationKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationKey", r.integrationKey, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	id *string
	instanceKey *string
	dataLinkTableId *string
	dataLinkTableKey *string
	autoCreate *bool
	integrationKey *string
	integrationId *string
	connectionId *string
	direction *string
	appRecordId *string
	externalRecordId *string
	limit *float32
	cursor *string
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) Id(id string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	r.id = &id
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) InstanceKey(instanceKey string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) DataLinkTableId(dataLinkTableId string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	r.dataLinkTableId = &dataLinkTableId
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) DataLinkTableKey(dataLinkTableKey string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	r.dataLinkTableKey = &dataLinkTableKey
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) AutoCreate(autoCreate bool) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) IntegrationKey(integrationKey string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	r.integrationKey = &integrationKey
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) IntegrationId(integrationId string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) ConnectionId(connectionId string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) Direction(direction string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	r.direction = &direction
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) AppRecordId(appRecordId string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	r.appRecordId = &appRecordId
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) ExternalRecordId(externalRecordId string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	r.externalRecordId = &externalRecordId
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) Limit(limit float32) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	r.limit = &limit
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) Cursor(cursor string) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	r.cursor = &cursor
	return r
}

func (r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) Execute() (*http.Response, error) {
	return r.ApiService.DataLinkTableInstanceControllerGetDataLinkTableInstanceLinksExecute(r)
}

/*
DataLinkTableInstanceControllerGetDataLinkTableInstanceLinks Get data link table instance links

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest
*/
func (a *DataLinksAPIService) DataLinkTableInstanceControllerGetDataLinkTableInstanceLinks(ctx context.Context) ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest {
	return ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DataLinksAPIService) DataLinkTableInstanceControllerGetDataLinkTableInstanceLinksExecute(r ApiDataLinkTableInstanceControllerGetDataLinkTableInstanceLinksRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTableInstanceControllerGetDataLinkTableInstanceLinks")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-table-instance/links"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.dataLinkTableId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableId", r.dataLinkTableId, "")
	}
	if r.dataLinkTableKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableKey", r.dataLinkTableKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	if r.integrationKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationKey", r.integrationKey, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	if r.appRecordId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appRecordId", r.appRecordId, "")
	}
	if r.externalRecordId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalRecordId", r.externalRecordId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	body *map[string]interface{}
	id *string
	instanceKey *string
	dataLinkTableId *string
	dataLinkTableKey *string
	autoCreate *bool
	integrationKey *string
	integrationId *string
	connectionId *string
}

func (r ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest) Body(body map[string]interface{}) ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest {
	r.body = &body
	return r
}

func (r ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest) Id(id string) ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest {
	r.id = &id
	return r
}

func (r ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest) InstanceKey(instanceKey string) ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest) DataLinkTableId(dataLinkTableId string) ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest {
	r.dataLinkTableId = &dataLinkTableId
	return r
}

func (r ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest) DataLinkTableKey(dataLinkTableKey string) ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest {
	r.dataLinkTableKey = &dataLinkTableKey
	return r
}

func (r ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest) AutoCreate(autoCreate bool) ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest) IntegrationKey(integrationKey string) ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest {
	r.integrationKey = &integrationKey
	return r
}

func (r ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest) IntegrationId(integrationId string) ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest) ConnectionId(connectionId string) ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest) Execute() (*DataLinkTableInstanceDto, *http.Response, error) {
	return r.ApiService.DataLinkTableInstanceControllerPatchDataLinkTableInstanceExecute(r)
}

/*
DataLinkTableInstanceControllerPatchDataLinkTableInstance Path data link table instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest
*/
func (a *DataLinksAPIService) DataLinkTableInstanceControllerPatchDataLinkTableInstance(ctx context.Context) ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest {
	return ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataLinkTableInstanceDto
func (a *DataLinksAPIService) DataLinkTableInstanceControllerPatchDataLinkTableInstanceExecute(r ApiDataLinkTableInstanceControllerPatchDataLinkTableInstanceRequest) (*DataLinkTableInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataLinkTableInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTableInstanceControllerPatchDataLinkTableInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-table-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.dataLinkTableId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableId", r.dataLinkTableId, "")
	}
	if r.dataLinkTableKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableKey", r.dataLinkTableKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	if r.integrationKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationKey", r.integrationKey, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	body *map[string]interface{}
	id *string
	instanceKey *string
	dataLinkTableId *string
	dataLinkTableKey *string
	autoCreate *bool
	integrationKey *string
	integrationId *string
	connectionId *string
}

func (r ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest) Body(body map[string]interface{}) ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest {
	r.body = &body
	return r
}

func (r ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest) Id(id string) ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest {
	r.id = &id
	return r
}

func (r ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest) InstanceKey(instanceKey string) ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest) DataLinkTableId(dataLinkTableId string) ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest {
	r.dataLinkTableId = &dataLinkTableId
	return r
}

func (r ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest) DataLinkTableKey(dataLinkTableKey string) ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest {
	r.dataLinkTableKey = &dataLinkTableKey
	return r
}

func (r ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest) AutoCreate(autoCreate bool) ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest) IntegrationKey(integrationKey string) ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest {
	r.integrationKey = &integrationKey
	return r
}

func (r ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest) IntegrationId(integrationId string) ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest) ConnectionId(connectionId string) ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest) Execute() (*DataLinkTableInstanceDto, *http.Response, error) {
	return r.ApiService.DataLinkTableInstanceControllerPostDataLinkTableInstanceExecute(r)
}

/*
DataLinkTableInstanceControllerPostDataLinkTableInstance Create data link table instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest
*/
func (a *DataLinksAPIService) DataLinkTableInstanceControllerPostDataLinkTableInstance(ctx context.Context) ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest {
	return ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataLinkTableInstanceDto
func (a *DataLinksAPIService) DataLinkTableInstanceControllerPostDataLinkTableInstanceExecute(r ApiDataLinkTableInstanceControllerPostDataLinkTableInstanceRequest) (*DataLinkTableInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataLinkTableInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTableInstanceControllerPostDataLinkTableInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-table-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.dataLinkTableId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableId", r.dataLinkTableId, "")
	}
	if r.dataLinkTableKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableKey", r.dataLinkTableKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	if r.integrationKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationKey", r.integrationKey, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	body *map[string]interface{}
	id *string
	instanceKey *string
	dataLinkTableId *string
	dataLinkTableKey *string
	autoCreate *bool
	integrationKey *string
	integrationId *string
	connectionId *string
}

func (r ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest) Body(body map[string]interface{}) ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest {
	r.body = &body
	return r
}

func (r ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest) Id(id string) ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest {
	r.id = &id
	return r
}

func (r ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest) InstanceKey(instanceKey string) ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest {
	r.instanceKey = &instanceKey
	return r
}

func (r ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest) DataLinkTableId(dataLinkTableId string) ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest {
	r.dataLinkTableId = &dataLinkTableId
	return r
}

func (r ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest) DataLinkTableKey(dataLinkTableKey string) ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest {
	r.dataLinkTableKey = &dataLinkTableKey
	return r
}

func (r ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest) AutoCreate(autoCreate bool) ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest) IntegrationKey(integrationKey string) ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest {
	r.integrationKey = &integrationKey
	return r
}

func (r ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest) IntegrationId(integrationId string) ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest) ConnectionId(connectionId string) ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest) Execute() (*DataLinkTableInstanceDto, *http.Response, error) {
	return r.ApiService.DataLinkTableInstanceControllerPutDataLinkTableInstanceExecute(r)
}

/*
DataLinkTableInstanceControllerPutDataLinkTableInstance Update data link table instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest
*/
func (a *DataLinksAPIService) DataLinkTableInstanceControllerPutDataLinkTableInstance(ctx context.Context) ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest {
	return ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataLinkTableInstanceDto
func (a *DataLinksAPIService) DataLinkTableInstanceControllerPutDataLinkTableInstanceExecute(r ApiDataLinkTableInstanceControllerPutDataLinkTableInstanceRequest) (*DataLinkTableInstanceDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataLinkTableInstanceDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTableInstanceControllerPutDataLinkTableInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-table-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.instanceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceKey", r.instanceKey, "")
	}
	if r.dataLinkTableId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableId", r.dataLinkTableId, "")
	}
	if r.dataLinkTableKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableKey", r.dataLinkTableKey, "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoCreate", r.autoCreate, "")
	}
	if r.integrationKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationKey", r.integrationKey, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	limit *float32
	cursor *string
	id *string
	userId *string
	dataLinkTableId *string
	connectionId *string
	integrationId *string
}

func (r ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest) Limit(limit float32) ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest {
	r.limit = &limit
	return r
}

func (r ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest) Cursor(cursor string) ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest {
	r.cursor = &cursor
	return r
}

func (r ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest) Id(id string) ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest {
	r.id = &id
	return r
}

func (r ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest) UserId(userId string) ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest {
	r.userId = &userId
	return r
}

func (r ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest) DataLinkTableId(dataLinkTableId string) ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest {
	r.dataLinkTableId = &dataLinkTableId
	return r
}

func (r ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest) ConnectionId(connectionId string) ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest) IntegrationId(integrationId string) ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest) Execute() (*DataLinkTableInstancesControllerListDataLinkTableInstances200Response, *http.Response, error) {
	return r.ApiService.DataLinkTableInstancesControllerListDataLinkTableInstancesExecute(r)
}

/*
DataLinkTableInstancesControllerListDataLinkTableInstances List data link table instances

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest
*/
func (a *DataLinksAPIService) DataLinkTableInstancesControllerListDataLinkTableInstances(ctx context.Context) ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest {
	return ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataLinkTableInstancesControllerListDataLinkTableInstances200Response
func (a *DataLinksAPIService) DataLinkTableInstancesControllerListDataLinkTableInstancesExecute(r ApiDataLinkTableInstancesControllerListDataLinkTableInstancesRequest) (*DataLinkTableInstancesControllerListDataLinkTableInstances200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataLinkTableInstancesControllerListDataLinkTableInstances200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTableInstancesControllerListDataLinkTableInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-table-instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.dataLinkTableId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableId", r.dataLinkTableId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataLinkTablesControllerCreateDataLinkTableRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	createDataLinkTableDto *CreateDataLinkTableDto
}

func (r ApiDataLinkTablesControllerCreateDataLinkTableRequest) CreateDataLinkTableDto(createDataLinkTableDto CreateDataLinkTableDto) ApiDataLinkTablesControllerCreateDataLinkTableRequest {
	r.createDataLinkTableDto = &createDataLinkTableDto
	return r
}

func (r ApiDataLinkTablesControllerCreateDataLinkTableRequest) Execute() (*DataLinkTableDto, *http.Response, error) {
	return r.ApiService.DataLinkTablesControllerCreateDataLinkTableExecute(r)
}

/*
DataLinkTablesControllerCreateDataLinkTable Create data link table

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataLinkTablesControllerCreateDataLinkTableRequest
*/
func (a *DataLinksAPIService) DataLinkTablesControllerCreateDataLinkTable(ctx context.Context) ApiDataLinkTablesControllerCreateDataLinkTableRequest {
	return ApiDataLinkTablesControllerCreateDataLinkTableRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataLinkTableDto
func (a *DataLinksAPIService) DataLinkTablesControllerCreateDataLinkTableExecute(r ApiDataLinkTablesControllerCreateDataLinkTableRequest) (*DataLinkTableDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataLinkTableDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTablesControllerCreateDataLinkTable")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-tables"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createDataLinkTableDto == nil {
		return localVarReturnValue, nil, reportError("createDataLinkTableDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createDataLinkTableDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataLinkTablesControllerDeleteDataLinkTableRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	idOrKey string
}

func (r ApiDataLinkTablesControllerDeleteDataLinkTableRequest) Execute() (*http.Response, error) {
	return r.ApiService.DataLinkTablesControllerDeleteDataLinkTableExecute(r)
}

/*
DataLinkTablesControllerDeleteDataLinkTable Archive data link table

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param idOrKey
 @return ApiDataLinkTablesControllerDeleteDataLinkTableRequest
*/
func (a *DataLinksAPIService) DataLinkTablesControllerDeleteDataLinkTable(ctx context.Context, idOrKey string) ApiDataLinkTablesControllerDeleteDataLinkTableRequest {
	return ApiDataLinkTablesControllerDeleteDataLinkTableRequest{
		ApiService: a,
		ctx: ctx,
		idOrKey: idOrKey,
	}
}

// Execute executes the request
func (a *DataLinksAPIService) DataLinkTablesControllerDeleteDataLinkTableExecute(r ApiDataLinkTablesControllerDeleteDataLinkTableRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTablesControllerDeleteDataLinkTable")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-tables/{idOrKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"idOrKey"+"}", url.PathEscape(parameterValueToString(r.idOrKey, "idOrKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDataLinkTablesControllerGetDataLinkTableRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	idOrKey string
}

func (r ApiDataLinkTablesControllerGetDataLinkTableRequest) Execute() (*DataLinkTableDto, *http.Response, error) {
	return r.ApiService.DataLinkTablesControllerGetDataLinkTableExecute(r)
}

/*
DataLinkTablesControllerGetDataLinkTable Get data link table

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param idOrKey
 @return ApiDataLinkTablesControllerGetDataLinkTableRequest
*/
func (a *DataLinksAPIService) DataLinkTablesControllerGetDataLinkTable(ctx context.Context, idOrKey string) ApiDataLinkTablesControllerGetDataLinkTableRequest {
	return ApiDataLinkTablesControllerGetDataLinkTableRequest{
		ApiService: a,
		ctx: ctx,
		idOrKey: idOrKey,
	}
}

// Execute executes the request
//  @return DataLinkTableDto
func (a *DataLinksAPIService) DataLinkTablesControllerGetDataLinkTableExecute(r ApiDataLinkTablesControllerGetDataLinkTableRequest) (*DataLinkTableDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataLinkTableDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTablesControllerGetDataLinkTable")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-tables/{idOrKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"idOrKey"+"}", url.PathEscape(parameterValueToString(r.idOrKey, "idOrKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataLinkTablesControllerListDataLinkTablesRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	limit *float32
	cursor *string
	search *string
	connectorId *string
}

func (r ApiDataLinkTablesControllerListDataLinkTablesRequest) Limit(limit float32) ApiDataLinkTablesControllerListDataLinkTablesRequest {
	r.limit = &limit
	return r
}

func (r ApiDataLinkTablesControllerListDataLinkTablesRequest) Cursor(cursor string) ApiDataLinkTablesControllerListDataLinkTablesRequest {
	r.cursor = &cursor
	return r
}

func (r ApiDataLinkTablesControllerListDataLinkTablesRequest) Search(search string) ApiDataLinkTablesControllerListDataLinkTablesRequest {
	r.search = &search
	return r
}

func (r ApiDataLinkTablesControllerListDataLinkTablesRequest) ConnectorId(connectorId string) ApiDataLinkTablesControllerListDataLinkTablesRequest {
	r.connectorId = &connectorId
	return r
}

func (r ApiDataLinkTablesControllerListDataLinkTablesRequest) Execute() (*DataLinkTablesControllerListDataLinkTables200Response, *http.Response, error) {
	return r.ApiService.DataLinkTablesControllerListDataLinkTablesExecute(r)
}

/*
DataLinkTablesControllerListDataLinkTables List data link tables

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataLinkTablesControllerListDataLinkTablesRequest
*/
func (a *DataLinksAPIService) DataLinkTablesControllerListDataLinkTables(ctx context.Context) ApiDataLinkTablesControllerListDataLinkTablesRequest {
	return ApiDataLinkTablesControllerListDataLinkTablesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataLinkTablesControllerListDataLinkTables200Response
func (a *DataLinksAPIService) DataLinkTablesControllerListDataLinkTablesExecute(r ApiDataLinkTablesControllerListDataLinkTablesRequest) (*DataLinkTablesControllerListDataLinkTables200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataLinkTablesControllerListDataLinkTables200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTablesControllerListDataLinkTables")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-tables"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.connectorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectorId", r.connectorId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataLinkTablesControllerPatchDataLinkTableRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	idOrKey string
	updateDataLinkTableDto *UpdateDataLinkTableDto
}

func (r ApiDataLinkTablesControllerPatchDataLinkTableRequest) UpdateDataLinkTableDto(updateDataLinkTableDto UpdateDataLinkTableDto) ApiDataLinkTablesControllerPatchDataLinkTableRequest {
	r.updateDataLinkTableDto = &updateDataLinkTableDto
	return r
}

func (r ApiDataLinkTablesControllerPatchDataLinkTableRequest) Execute() (*DataLinkTableDto, *http.Response, error) {
	return r.ApiService.DataLinkTablesControllerPatchDataLinkTableExecute(r)
}

/*
DataLinkTablesControllerPatchDataLinkTable Patch data link table

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param idOrKey
 @return ApiDataLinkTablesControllerPatchDataLinkTableRequest
*/
func (a *DataLinksAPIService) DataLinkTablesControllerPatchDataLinkTable(ctx context.Context, idOrKey string) ApiDataLinkTablesControllerPatchDataLinkTableRequest {
	return ApiDataLinkTablesControllerPatchDataLinkTableRequest{
		ApiService: a,
		ctx: ctx,
		idOrKey: idOrKey,
	}
}

// Execute executes the request
//  @return DataLinkTableDto
func (a *DataLinksAPIService) DataLinkTablesControllerPatchDataLinkTableExecute(r ApiDataLinkTablesControllerPatchDataLinkTableRequest) (*DataLinkTableDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataLinkTableDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTablesControllerPatchDataLinkTable")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-tables/{idOrKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"idOrKey"+"}", url.PathEscape(parameterValueToString(r.idOrKey, "idOrKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateDataLinkTableDto == nil {
		return localVarReturnValue, nil, reportError("updateDataLinkTableDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateDataLinkTableDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataLinkTablesControllerPutDataLinkTableRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	idOrKey string
	createDataLinkTableDto *CreateDataLinkTableDto
}

func (r ApiDataLinkTablesControllerPutDataLinkTableRequest) CreateDataLinkTableDto(createDataLinkTableDto CreateDataLinkTableDto) ApiDataLinkTablesControllerPutDataLinkTableRequest {
	r.createDataLinkTableDto = &createDataLinkTableDto
	return r
}

func (r ApiDataLinkTablesControllerPutDataLinkTableRequest) Execute() (*DataLinkTableDto, *http.Response, error) {
	return r.ApiService.DataLinkTablesControllerPutDataLinkTableExecute(r)
}

/*
DataLinkTablesControllerPutDataLinkTable Update data link table

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param idOrKey
 @return ApiDataLinkTablesControllerPutDataLinkTableRequest
*/
func (a *DataLinksAPIService) DataLinkTablesControllerPutDataLinkTable(ctx context.Context, idOrKey string) ApiDataLinkTablesControllerPutDataLinkTableRequest {
	return ApiDataLinkTablesControllerPutDataLinkTableRequest{
		ApiService: a,
		ctx: ctx,
		idOrKey: idOrKey,
	}
}

// Execute executes the request
//  @return DataLinkTableDto
func (a *DataLinksAPIService) DataLinkTablesControllerPutDataLinkTableExecute(r ApiDataLinkTablesControllerPutDataLinkTableRequest) (*DataLinkTableDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataLinkTableDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinkTablesControllerPutDataLinkTable")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-link-tables/{idOrKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"idOrKey"+"}", url.PathEscape(parameterValueToString(r.idOrKey, "idOrKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createDataLinkTableDto == nil {
		return localVarReturnValue, nil, reportError("createDataLinkTableDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createDataLinkTableDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataLinksControllerDeleteDataLinkDtoRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	dataLinkId string
}

func (r ApiDataLinksControllerDeleteDataLinkDtoRequest) Execute() (*http.Response, error) {
	return r.ApiService.DataLinksControllerDeleteDataLinkDtoExecute(r)
}

/*
DataLinksControllerDeleteDataLinkDto Delete data link

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataLinkId
 @return ApiDataLinksControllerDeleteDataLinkDtoRequest
*/
func (a *DataLinksAPIService) DataLinksControllerDeleteDataLinkDto(ctx context.Context, dataLinkId string) ApiDataLinksControllerDeleteDataLinkDtoRequest {
	return ApiDataLinksControllerDeleteDataLinkDtoRequest{
		ApiService: a,
		ctx: ctx,
		dataLinkId: dataLinkId,
	}
}

// Execute executes the request
func (a *DataLinksAPIService) DataLinksControllerDeleteDataLinkDtoExecute(r ApiDataLinksControllerDeleteDataLinkDtoRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinksControllerDeleteDataLinkDto")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-links/{dataLinkId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataLinkId"+"}", url.PathEscape(parameterValueToString(r.dataLinkId, "dataLinkId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDataLinksControllerListDataLinksRequest struct {
	ctx context.Context
	ApiService DataLinksAPI
	dataLinkTableInstanceId *string
	limit *float32
	cursor *string
	externalRecordId *string
	appRecordId *string
	direction *string
}

func (r ApiDataLinksControllerListDataLinksRequest) DataLinkTableInstanceId(dataLinkTableInstanceId string) ApiDataLinksControllerListDataLinksRequest {
	r.dataLinkTableInstanceId = &dataLinkTableInstanceId
	return r
}

func (r ApiDataLinksControllerListDataLinksRequest) Limit(limit float32) ApiDataLinksControllerListDataLinksRequest {
	r.limit = &limit
	return r
}

func (r ApiDataLinksControllerListDataLinksRequest) Cursor(cursor string) ApiDataLinksControllerListDataLinksRequest {
	r.cursor = &cursor
	return r
}

func (r ApiDataLinksControllerListDataLinksRequest) ExternalRecordId(externalRecordId string) ApiDataLinksControllerListDataLinksRequest {
	r.externalRecordId = &externalRecordId
	return r
}

func (r ApiDataLinksControllerListDataLinksRequest) AppRecordId(appRecordId string) ApiDataLinksControllerListDataLinksRequest {
	r.appRecordId = &appRecordId
	return r
}

func (r ApiDataLinksControllerListDataLinksRequest) Direction(direction string) ApiDataLinksControllerListDataLinksRequest {
	r.direction = &direction
	return r
}

func (r ApiDataLinksControllerListDataLinksRequest) Execute() (*DataLinksControllerListDataLinks200Response, *http.Response, error) {
	return r.ApiService.DataLinksControllerListDataLinksExecute(r)
}

/*
DataLinksControllerListDataLinks List data links

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataLinksControllerListDataLinksRequest
*/
func (a *DataLinksAPIService) DataLinksControllerListDataLinks(ctx context.Context) ApiDataLinksControllerListDataLinksRequest {
	return ApiDataLinksControllerListDataLinksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataLinksControllerListDataLinks200Response
func (a *DataLinksAPIService) DataLinksControllerListDataLinksExecute(r ApiDataLinksControllerListDataLinksRequest) (*DataLinksControllerListDataLinks200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataLinksControllerListDataLinks200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataLinksAPIService.DataLinksControllerListDataLinks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-links"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dataLinkTableInstanceId == nil {
		return localVarReturnValue, nil, reportError("dataLinkTableInstanceId is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "dataLinkTableInstanceId", r.dataLinkTableInstanceId, "")
	if r.externalRecordId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalRecordId", r.externalRecordId, "")
	}
	if r.appRecordId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "appRecordId", r.appRecordId, "")
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
