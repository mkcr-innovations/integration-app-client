/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExternalEventSubscriptionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalEventSubscriptionDto{}

// ExternalEventSubscriptionDto struct for ExternalEventSubscriptionDto
type ExternalEventSubscriptionDto struct {
	Id string `json:"id"`
	UserId *string `json:"userId,omitempty"`
	User *CustomerDto `json:"user,omitempty"`
	ConnectionId *string `json:"connectionId,omitempty"`
	Connection *ConnectionDto `json:"connection,omitempty"`
	IntegrationId *string `json:"integrationId,omitempty"`
	Integration *IntegrationDto `json:"integration,omitempty"`
	Config map[string]interface{} `json:"config,omitempty"`
	Status *string `json:"status,omitempty"`
	IsRealTime *bool `json:"isRealTime,omitempty"`
	RequiresPull *bool `json:"requiresPull,omitempty"`
	RequiresFullSync *bool `json:"requiresFullSync,omitempty"`
	StateData map[string]interface{} `json:"stateData,omitempty"`
	GlobalWebhookKey *string `json:"globalWebhookKey,omitempty"`
	GlobalWebhookEventSelector *string `json:"globalWebhookEventSelector,omitempty"`
	PullUpdatesIntervalSeconds *float32 `json:"pullUpdatesIntervalSeconds,omitempty"`
	FullSyncIntervalSeconds *float32 `json:"fullSyncIntervalSeconds,omitempty"`
	NextPullEventsTimestamp *float32 `json:"nextPullEventsTimestamp,omitempty"`
	NextRefreshTimestamp *float32 `json:"nextRefreshTimestamp,omitempty"`
	Error map[string]interface{} `json:"error,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	ArchivedAt *string `json:"archivedAt,omitempty"`
}

type _ExternalEventSubscriptionDto ExternalEventSubscriptionDto

// NewExternalEventSubscriptionDto instantiates a new ExternalEventSubscriptionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalEventSubscriptionDto(id string) *ExternalEventSubscriptionDto {
	this := ExternalEventSubscriptionDto{}
	this.Id = id
	return &this
}

// NewExternalEventSubscriptionDtoWithDefaults instantiates a new ExternalEventSubscriptionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalEventSubscriptionDtoWithDefaults() *ExternalEventSubscriptionDto {
	this := ExternalEventSubscriptionDto{}
	return &this
}

// GetId returns the Id field value
func (o *ExternalEventSubscriptionDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExternalEventSubscriptionDto) SetId(v string) {
	o.Id = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ExternalEventSubscriptionDto) SetUserId(v string) {
	o.UserId = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetUser() CustomerDto {
	if o == nil || IsNil(o.User) {
		var ret CustomerDto
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetUserOk() (*CustomerDto, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given CustomerDto and assigns it to the User field.
func (o *ExternalEventSubscriptionDto) SetUser(v CustomerDto) {
	o.User = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *ExternalEventSubscriptionDto) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetConnection() ConnectionDto {
	if o == nil || IsNil(o.Connection) {
		var ret ConnectionDto
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetConnectionOk() (*ConnectionDto, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given ConnectionDto and assigns it to the Connection field.
func (o *ExternalEventSubscriptionDto) SetConnection(v ConnectionDto) {
	o.Connection = &v
}

// GetIntegrationId returns the IntegrationId field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetIntegrationId() string {
	if o == nil || IsNil(o.IntegrationId) {
		var ret string
		return ret
	}
	return *o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetIntegrationIdOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationId) {
		return nil, false
	}
	return o.IntegrationId, true
}

// HasIntegrationId returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasIntegrationId() bool {
	if o != nil && !IsNil(o.IntegrationId) {
		return true
	}

	return false
}

// SetIntegrationId gets a reference to the given string and assigns it to the IntegrationId field.
func (o *ExternalEventSubscriptionDto) SetIntegrationId(v string) {
	o.IntegrationId = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetIntegration() IntegrationDto {
	if o == nil || IsNil(o.Integration) {
		var ret IntegrationDto
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetIntegrationOk() (*IntegrationDto, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given IntegrationDto and assigns it to the Integration field.
func (o *ExternalEventSubscriptionDto) SetIntegration(v IntegrationDto) {
	o.Integration = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *ExternalEventSubscriptionDto) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ExternalEventSubscriptionDto) SetStatus(v string) {
	o.Status = &v
}

// GetIsRealTime returns the IsRealTime field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetIsRealTime() bool {
	if o == nil || IsNil(o.IsRealTime) {
		var ret bool
		return ret
	}
	return *o.IsRealTime
}

// GetIsRealTimeOk returns a tuple with the IsRealTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetIsRealTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRealTime) {
		return nil, false
	}
	return o.IsRealTime, true
}

// HasIsRealTime returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasIsRealTime() bool {
	if o != nil && !IsNil(o.IsRealTime) {
		return true
	}

	return false
}

// SetIsRealTime gets a reference to the given bool and assigns it to the IsRealTime field.
func (o *ExternalEventSubscriptionDto) SetIsRealTime(v bool) {
	o.IsRealTime = &v
}

// GetRequiresPull returns the RequiresPull field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetRequiresPull() bool {
	if o == nil || IsNil(o.RequiresPull) {
		var ret bool
		return ret
	}
	return *o.RequiresPull
}

// GetRequiresPullOk returns a tuple with the RequiresPull field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetRequiresPullOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresPull) {
		return nil, false
	}
	return o.RequiresPull, true
}

// HasRequiresPull returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasRequiresPull() bool {
	if o != nil && !IsNil(o.RequiresPull) {
		return true
	}

	return false
}

// SetRequiresPull gets a reference to the given bool and assigns it to the RequiresPull field.
func (o *ExternalEventSubscriptionDto) SetRequiresPull(v bool) {
	o.RequiresPull = &v
}

// GetRequiresFullSync returns the RequiresFullSync field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetRequiresFullSync() bool {
	if o == nil || IsNil(o.RequiresFullSync) {
		var ret bool
		return ret
	}
	return *o.RequiresFullSync
}

// GetRequiresFullSyncOk returns a tuple with the RequiresFullSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetRequiresFullSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresFullSync) {
		return nil, false
	}
	return o.RequiresFullSync, true
}

// HasRequiresFullSync returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasRequiresFullSync() bool {
	if o != nil && !IsNil(o.RequiresFullSync) {
		return true
	}

	return false
}

// SetRequiresFullSync gets a reference to the given bool and assigns it to the RequiresFullSync field.
func (o *ExternalEventSubscriptionDto) SetRequiresFullSync(v bool) {
	o.RequiresFullSync = &v
}

// GetStateData returns the StateData field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetStateData() map[string]interface{} {
	if o == nil || IsNil(o.StateData) {
		var ret map[string]interface{}
		return ret
	}
	return o.StateData
}

// GetStateDataOk returns a tuple with the StateData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetStateDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.StateData) {
		return map[string]interface{}{}, false
	}
	return o.StateData, true
}

// HasStateData returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasStateData() bool {
	if o != nil && !IsNil(o.StateData) {
		return true
	}

	return false
}

// SetStateData gets a reference to the given map[string]interface{} and assigns it to the StateData field.
func (o *ExternalEventSubscriptionDto) SetStateData(v map[string]interface{}) {
	o.StateData = v
}

// GetGlobalWebhookKey returns the GlobalWebhookKey field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetGlobalWebhookKey() string {
	if o == nil || IsNil(o.GlobalWebhookKey) {
		var ret string
		return ret
	}
	return *o.GlobalWebhookKey
}

// GetGlobalWebhookKeyOk returns a tuple with the GlobalWebhookKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetGlobalWebhookKeyOk() (*string, bool) {
	if o == nil || IsNil(o.GlobalWebhookKey) {
		return nil, false
	}
	return o.GlobalWebhookKey, true
}

// HasGlobalWebhookKey returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasGlobalWebhookKey() bool {
	if o != nil && !IsNil(o.GlobalWebhookKey) {
		return true
	}

	return false
}

// SetGlobalWebhookKey gets a reference to the given string and assigns it to the GlobalWebhookKey field.
func (o *ExternalEventSubscriptionDto) SetGlobalWebhookKey(v string) {
	o.GlobalWebhookKey = &v
}

// GetGlobalWebhookEventSelector returns the GlobalWebhookEventSelector field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetGlobalWebhookEventSelector() string {
	if o == nil || IsNil(o.GlobalWebhookEventSelector) {
		var ret string
		return ret
	}
	return *o.GlobalWebhookEventSelector
}

// GetGlobalWebhookEventSelectorOk returns a tuple with the GlobalWebhookEventSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetGlobalWebhookEventSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.GlobalWebhookEventSelector) {
		return nil, false
	}
	return o.GlobalWebhookEventSelector, true
}

// HasGlobalWebhookEventSelector returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasGlobalWebhookEventSelector() bool {
	if o != nil && !IsNil(o.GlobalWebhookEventSelector) {
		return true
	}

	return false
}

// SetGlobalWebhookEventSelector gets a reference to the given string and assigns it to the GlobalWebhookEventSelector field.
func (o *ExternalEventSubscriptionDto) SetGlobalWebhookEventSelector(v string) {
	o.GlobalWebhookEventSelector = &v
}

// GetPullUpdatesIntervalSeconds returns the PullUpdatesIntervalSeconds field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetPullUpdatesIntervalSeconds() float32 {
	if o == nil || IsNil(o.PullUpdatesIntervalSeconds) {
		var ret float32
		return ret
	}
	return *o.PullUpdatesIntervalSeconds
}

// GetPullUpdatesIntervalSecondsOk returns a tuple with the PullUpdatesIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetPullUpdatesIntervalSecondsOk() (*float32, bool) {
	if o == nil || IsNil(o.PullUpdatesIntervalSeconds) {
		return nil, false
	}
	return o.PullUpdatesIntervalSeconds, true
}

// HasPullUpdatesIntervalSeconds returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasPullUpdatesIntervalSeconds() bool {
	if o != nil && !IsNil(o.PullUpdatesIntervalSeconds) {
		return true
	}

	return false
}

// SetPullUpdatesIntervalSeconds gets a reference to the given float32 and assigns it to the PullUpdatesIntervalSeconds field.
func (o *ExternalEventSubscriptionDto) SetPullUpdatesIntervalSeconds(v float32) {
	o.PullUpdatesIntervalSeconds = &v
}

// GetFullSyncIntervalSeconds returns the FullSyncIntervalSeconds field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetFullSyncIntervalSeconds() float32 {
	if o == nil || IsNil(o.FullSyncIntervalSeconds) {
		var ret float32
		return ret
	}
	return *o.FullSyncIntervalSeconds
}

// GetFullSyncIntervalSecondsOk returns a tuple with the FullSyncIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetFullSyncIntervalSecondsOk() (*float32, bool) {
	if o == nil || IsNil(o.FullSyncIntervalSeconds) {
		return nil, false
	}
	return o.FullSyncIntervalSeconds, true
}

// HasFullSyncIntervalSeconds returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasFullSyncIntervalSeconds() bool {
	if o != nil && !IsNil(o.FullSyncIntervalSeconds) {
		return true
	}

	return false
}

// SetFullSyncIntervalSeconds gets a reference to the given float32 and assigns it to the FullSyncIntervalSeconds field.
func (o *ExternalEventSubscriptionDto) SetFullSyncIntervalSeconds(v float32) {
	o.FullSyncIntervalSeconds = &v
}

// GetNextPullEventsTimestamp returns the NextPullEventsTimestamp field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetNextPullEventsTimestamp() float32 {
	if o == nil || IsNil(o.NextPullEventsTimestamp) {
		var ret float32
		return ret
	}
	return *o.NextPullEventsTimestamp
}

// GetNextPullEventsTimestampOk returns a tuple with the NextPullEventsTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetNextPullEventsTimestampOk() (*float32, bool) {
	if o == nil || IsNil(o.NextPullEventsTimestamp) {
		return nil, false
	}
	return o.NextPullEventsTimestamp, true
}

// HasNextPullEventsTimestamp returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasNextPullEventsTimestamp() bool {
	if o != nil && !IsNil(o.NextPullEventsTimestamp) {
		return true
	}

	return false
}

// SetNextPullEventsTimestamp gets a reference to the given float32 and assigns it to the NextPullEventsTimestamp field.
func (o *ExternalEventSubscriptionDto) SetNextPullEventsTimestamp(v float32) {
	o.NextPullEventsTimestamp = &v
}

// GetNextRefreshTimestamp returns the NextRefreshTimestamp field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetNextRefreshTimestamp() float32 {
	if o == nil || IsNil(o.NextRefreshTimestamp) {
		var ret float32
		return ret
	}
	return *o.NextRefreshTimestamp
}

// GetNextRefreshTimestampOk returns a tuple with the NextRefreshTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetNextRefreshTimestampOk() (*float32, bool) {
	if o == nil || IsNil(o.NextRefreshTimestamp) {
		return nil, false
	}
	return o.NextRefreshTimestamp, true
}

// HasNextRefreshTimestamp returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasNextRefreshTimestamp() bool {
	if o != nil && !IsNil(o.NextRefreshTimestamp) {
		return true
	}

	return false
}

// SetNextRefreshTimestamp gets a reference to the given float32 and assigns it to the NextRefreshTimestamp field.
func (o *ExternalEventSubscriptionDto) SetNextRefreshTimestamp(v float32) {
	o.NextRefreshTimestamp = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetError() map[string]interface{} {
	if o == nil || IsNil(o.Error) {
		var ret map[string]interface{}
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetErrorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Error) {
		return map[string]interface{}{}, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given map[string]interface{} and assigns it to the Error field.
func (o *ExternalEventSubscriptionDto) SetError(v map[string]interface{}) {
	o.Error = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ExternalEventSubscriptionDto) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *ExternalEventSubscriptionDto) GetArchivedAt() string {
	if o == nil || IsNil(o.ArchivedAt) {
		var ret string
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalEventSubscriptionDto) GetArchivedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ArchivedAt) {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *ExternalEventSubscriptionDto) HasArchivedAt() bool {
	if o != nil && !IsNil(o.ArchivedAt) {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given string and assigns it to the ArchivedAt field.
func (o *ExternalEventSubscriptionDto) SetArchivedAt(v string) {
	o.ArchivedAt = &v
}

func (o ExternalEventSubscriptionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalEventSubscriptionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connectionId"] = o.ConnectionId
	}
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	if !IsNil(o.IntegrationId) {
		toSerialize["integrationId"] = o.IntegrationId
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.IsRealTime) {
		toSerialize["isRealTime"] = o.IsRealTime
	}
	if !IsNil(o.RequiresPull) {
		toSerialize["requiresPull"] = o.RequiresPull
	}
	if !IsNil(o.RequiresFullSync) {
		toSerialize["requiresFullSync"] = o.RequiresFullSync
	}
	if !IsNil(o.StateData) {
		toSerialize["stateData"] = o.StateData
	}
	if !IsNil(o.GlobalWebhookKey) {
		toSerialize["globalWebhookKey"] = o.GlobalWebhookKey
	}
	if !IsNil(o.GlobalWebhookEventSelector) {
		toSerialize["globalWebhookEventSelector"] = o.GlobalWebhookEventSelector
	}
	if !IsNil(o.PullUpdatesIntervalSeconds) {
		toSerialize["pullUpdatesIntervalSeconds"] = o.PullUpdatesIntervalSeconds
	}
	if !IsNil(o.FullSyncIntervalSeconds) {
		toSerialize["fullSyncIntervalSeconds"] = o.FullSyncIntervalSeconds
	}
	if !IsNil(o.NextPullEventsTimestamp) {
		toSerialize["nextPullEventsTimestamp"] = o.NextPullEventsTimestamp
	}
	if !IsNil(o.NextRefreshTimestamp) {
		toSerialize["nextRefreshTimestamp"] = o.NextRefreshTimestamp
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.ArchivedAt) {
		toSerialize["archivedAt"] = o.ArchivedAt
	}
	return toSerialize, nil
}

func (o *ExternalEventSubscriptionDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalEventSubscriptionDto := _ExternalEventSubscriptionDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExternalEventSubscriptionDto)

	if err != nil {
		return err
	}

	*o = ExternalEventSubscriptionDto(varExternalEventSubscriptionDto)

	return err
}

type NullableExternalEventSubscriptionDto struct {
	value *ExternalEventSubscriptionDto
	isSet bool
}

func (v NullableExternalEventSubscriptionDto) Get() *ExternalEventSubscriptionDto {
	return v.value
}

func (v *NullableExternalEventSubscriptionDto) Set(val *ExternalEventSubscriptionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalEventSubscriptionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalEventSubscriptionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalEventSubscriptionDto(val *ExternalEventSubscriptionDto) *NullableExternalEventSubscriptionDto {
	return &NullableExternalEventSubscriptionDto{value: val, isSet: true}
}

func (v NullableExternalEventSubscriptionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalEventSubscriptionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


