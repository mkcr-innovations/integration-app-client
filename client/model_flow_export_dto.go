/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FlowExportDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowExportDto{}

// FlowExportDto struct for FlowExportDto
type FlowExportDto struct {
	Key *string `json:"key,omitempty"`
	Name string `json:"name"`
	IntegrationKeys []string `json:"integrationKeys,omitempty"`
	ParametersSchema map[string]interface{} `json:"parametersSchema,omitempty"`
	Nodes map[string]interface{} `json:"nodes,omitempty"`
	AutoCreateInstances *bool `json:"autoCreateInstances,omitempty"`
}

type _FlowExportDto FlowExportDto

// NewFlowExportDto instantiates a new FlowExportDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowExportDto(name string) *FlowExportDto {
	this := FlowExportDto{}
	this.Name = name
	return &this
}

// NewFlowExportDtoWithDefaults instantiates a new FlowExportDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowExportDtoWithDefaults() *FlowExportDto {
	this := FlowExportDto{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *FlowExportDto) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowExportDto) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *FlowExportDto) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *FlowExportDto) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value
func (o *FlowExportDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FlowExportDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FlowExportDto) SetName(v string) {
	o.Name = v
}

// GetIntegrationKeys returns the IntegrationKeys field value if set, zero value otherwise.
func (o *FlowExportDto) GetIntegrationKeys() []string {
	if o == nil || IsNil(o.IntegrationKeys) {
		var ret []string
		return ret
	}
	return o.IntegrationKeys
}

// GetIntegrationKeysOk returns a tuple with the IntegrationKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowExportDto) GetIntegrationKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.IntegrationKeys) {
		return nil, false
	}
	return o.IntegrationKeys, true
}

// HasIntegrationKeys returns a boolean if a field has been set.
func (o *FlowExportDto) HasIntegrationKeys() bool {
	if o != nil && !IsNil(o.IntegrationKeys) {
		return true
	}

	return false
}

// SetIntegrationKeys gets a reference to the given []string and assigns it to the IntegrationKeys field.
func (o *FlowExportDto) SetIntegrationKeys(v []string) {
	o.IntegrationKeys = v
}

// GetParametersSchema returns the ParametersSchema field value if set, zero value otherwise.
func (o *FlowExportDto) GetParametersSchema() map[string]interface{} {
	if o == nil || IsNil(o.ParametersSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.ParametersSchema
}

// GetParametersSchemaOk returns a tuple with the ParametersSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowExportDto) GetParametersSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ParametersSchema) {
		return map[string]interface{}{}, false
	}
	return o.ParametersSchema, true
}

// HasParametersSchema returns a boolean if a field has been set.
func (o *FlowExportDto) HasParametersSchema() bool {
	if o != nil && !IsNil(o.ParametersSchema) {
		return true
	}

	return false
}

// SetParametersSchema gets a reference to the given map[string]interface{} and assigns it to the ParametersSchema field.
func (o *FlowExportDto) SetParametersSchema(v map[string]interface{}) {
	o.ParametersSchema = v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *FlowExportDto) GetNodes() map[string]interface{} {
	if o == nil || IsNil(o.Nodes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowExportDto) GetNodesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Nodes) {
		return map[string]interface{}{}, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *FlowExportDto) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given map[string]interface{} and assigns it to the Nodes field.
func (o *FlowExportDto) SetNodes(v map[string]interface{}) {
	o.Nodes = v
}

// GetAutoCreateInstances returns the AutoCreateInstances field value if set, zero value otherwise.
func (o *FlowExportDto) GetAutoCreateInstances() bool {
	if o == nil || IsNil(o.AutoCreateInstances) {
		var ret bool
		return ret
	}
	return *o.AutoCreateInstances
}

// GetAutoCreateInstancesOk returns a tuple with the AutoCreateInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowExportDto) GetAutoCreateInstancesOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreateInstances) {
		return nil, false
	}
	return o.AutoCreateInstances, true
}

// HasAutoCreateInstances returns a boolean if a field has been set.
func (o *FlowExportDto) HasAutoCreateInstances() bool {
	if o != nil && !IsNil(o.AutoCreateInstances) {
		return true
	}

	return false
}

// SetAutoCreateInstances gets a reference to the given bool and assigns it to the AutoCreateInstances field.
func (o *FlowExportDto) SetAutoCreateInstances(v bool) {
	o.AutoCreateInstances = &v
}

func (o FlowExportDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowExportDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.IntegrationKeys) {
		toSerialize["integrationKeys"] = o.IntegrationKeys
	}
	if !IsNil(o.ParametersSchema) {
		toSerialize["parametersSchema"] = o.ParametersSchema
	}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	if !IsNil(o.AutoCreateInstances) {
		toSerialize["autoCreateInstances"] = o.AutoCreateInstances
	}
	return toSerialize, nil
}

func (o *FlowExportDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlowExportDto := _FlowExportDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlowExportDto)

	if err != nil {
		return err
	}

	*o = FlowExportDto(varFlowExportDto)

	return err
}

type NullableFlowExportDto struct {
	value *FlowExportDto
	isSet bool
}

func (v NullableFlowExportDto) Get() *FlowExportDto {
	return v.value
}

func (v *NullableFlowExportDto) Set(val *FlowExportDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowExportDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowExportDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowExportDto(val *FlowExportDto) *NullableFlowExportDto {
	return &NullableFlowExportDto{value: val, isSet: true}
}

func (v NullableFlowExportDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowExportDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


