/*
Integration Engine API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FieldMappingDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldMappingDto{}

// FieldMappingDto struct for FieldMappingDto
type FieldMappingDto struct {
	Customized *bool `json:"customized,omitempty"`
	Revision string `json:"revision"`
	UniversalFieldMappingId *string `json:"universalFieldMappingId,omitempty"`
	UniversalFieldMappingRevision *string `json:"universalFieldMappingRevision,omitempty"`
	IntegrationId *string `json:"integrationId,omitempty"`
	DataSourceKey string `json:"dataSourceKey"`
	DataSourceId string `json:"dataSourceId"`
	AppSchema map[string]interface{} `json:"appSchema"`
	Direction string `json:"direction"`
	DefaultImportValue map[string]interface{} `json:"defaultImportValue"`
	DefaultExportValue map[string]interface{} `json:"defaultExportValue,omitempty"`
	ExportValue map[string]interface{} `json:"exportValue,omitempty"`
	ImportValue map[string]interface{} `json:"importValue,omitempty"`
	FrozenImportFields map[string]interface{} `json:"frozenImportFields,omitempty"`
	FrozenExportFields map[string]interface{} `json:"frozenExportFields,omitempty"`
	FrozenUnifiedExportFields map[string]interface{} `json:"frozenUnifiedExportFields,omitempty"`
	AppliedToIntegrations []string `json:"appliedToIntegrations,omitempty"`
}

type _FieldMappingDto FieldMappingDto

// NewFieldMappingDto instantiates a new FieldMappingDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldMappingDto(revision string, dataSourceKey string, dataSourceId string, appSchema map[string]interface{}, direction string, defaultImportValue map[string]interface{}) *FieldMappingDto {
	this := FieldMappingDto{}
	this.Revision = revision
	this.DataSourceKey = dataSourceKey
	this.DataSourceId = dataSourceId
	this.AppSchema = appSchema
	this.Direction = direction
	this.DefaultImportValue = defaultImportValue
	return &this
}

// NewFieldMappingDtoWithDefaults instantiates a new FieldMappingDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldMappingDtoWithDefaults() *FieldMappingDto {
	this := FieldMappingDto{}
	return &this
}

// GetCustomized returns the Customized field value if set, zero value otherwise.
func (o *FieldMappingDto) GetCustomized() bool {
	if o == nil || IsNil(o.Customized) {
		var ret bool
		return ret
	}
	return *o.Customized
}

// GetCustomizedOk returns a tuple with the Customized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetCustomizedOk() (*bool, bool) {
	if o == nil || IsNil(o.Customized) {
		return nil, false
	}
	return o.Customized, true
}

// HasCustomized returns a boolean if a field has been set.
func (o *FieldMappingDto) HasCustomized() bool {
	if o != nil && !IsNil(o.Customized) {
		return true
	}

	return false
}

// SetCustomized gets a reference to the given bool and assigns it to the Customized field.
func (o *FieldMappingDto) SetCustomized(v bool) {
	o.Customized = &v
}

// GetRevision returns the Revision field value
func (o *FieldMappingDto) GetRevision() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetRevisionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *FieldMappingDto) SetRevision(v string) {
	o.Revision = v
}

// GetUniversalFieldMappingId returns the UniversalFieldMappingId field value if set, zero value otherwise.
func (o *FieldMappingDto) GetUniversalFieldMappingId() string {
	if o == nil || IsNil(o.UniversalFieldMappingId) {
		var ret string
		return ret
	}
	return *o.UniversalFieldMappingId
}

// GetUniversalFieldMappingIdOk returns a tuple with the UniversalFieldMappingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetUniversalFieldMappingIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniversalFieldMappingId) {
		return nil, false
	}
	return o.UniversalFieldMappingId, true
}

// HasUniversalFieldMappingId returns a boolean if a field has been set.
func (o *FieldMappingDto) HasUniversalFieldMappingId() bool {
	if o != nil && !IsNil(o.UniversalFieldMappingId) {
		return true
	}

	return false
}

// SetUniversalFieldMappingId gets a reference to the given string and assigns it to the UniversalFieldMappingId field.
func (o *FieldMappingDto) SetUniversalFieldMappingId(v string) {
	o.UniversalFieldMappingId = &v
}

// GetUniversalFieldMappingRevision returns the UniversalFieldMappingRevision field value if set, zero value otherwise.
func (o *FieldMappingDto) GetUniversalFieldMappingRevision() string {
	if o == nil || IsNil(o.UniversalFieldMappingRevision) {
		var ret string
		return ret
	}
	return *o.UniversalFieldMappingRevision
}

// GetUniversalFieldMappingRevisionOk returns a tuple with the UniversalFieldMappingRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetUniversalFieldMappingRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.UniversalFieldMappingRevision) {
		return nil, false
	}
	return o.UniversalFieldMappingRevision, true
}

// HasUniversalFieldMappingRevision returns a boolean if a field has been set.
func (o *FieldMappingDto) HasUniversalFieldMappingRevision() bool {
	if o != nil && !IsNil(o.UniversalFieldMappingRevision) {
		return true
	}

	return false
}

// SetUniversalFieldMappingRevision gets a reference to the given string and assigns it to the UniversalFieldMappingRevision field.
func (o *FieldMappingDto) SetUniversalFieldMappingRevision(v string) {
	o.UniversalFieldMappingRevision = &v
}

// GetIntegrationId returns the IntegrationId field value if set, zero value otherwise.
func (o *FieldMappingDto) GetIntegrationId() string {
	if o == nil || IsNil(o.IntegrationId) {
		var ret string
		return ret
	}
	return *o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetIntegrationIdOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationId) {
		return nil, false
	}
	return o.IntegrationId, true
}

// HasIntegrationId returns a boolean if a field has been set.
func (o *FieldMappingDto) HasIntegrationId() bool {
	if o != nil && !IsNil(o.IntegrationId) {
		return true
	}

	return false
}

// SetIntegrationId gets a reference to the given string and assigns it to the IntegrationId field.
func (o *FieldMappingDto) SetIntegrationId(v string) {
	o.IntegrationId = &v
}

// GetDataSourceKey returns the DataSourceKey field value
func (o *FieldMappingDto) GetDataSourceKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataSourceKey
}

// GetDataSourceKeyOk returns a tuple with the DataSourceKey field value
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetDataSourceKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSourceKey, true
}

// SetDataSourceKey sets field value
func (o *FieldMappingDto) SetDataSourceKey(v string) {
	o.DataSourceKey = v
}

// GetDataSourceId returns the DataSourceId field value
func (o *FieldMappingDto) GetDataSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataSourceId
}

// GetDataSourceIdOk returns a tuple with the DataSourceId field value
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetDataSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSourceId, true
}

// SetDataSourceId sets field value
func (o *FieldMappingDto) SetDataSourceId(v string) {
	o.DataSourceId = v
}

// GetAppSchema returns the AppSchema field value
func (o *FieldMappingDto) GetAppSchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.AppSchema
}

// GetAppSchemaOk returns a tuple with the AppSchema field value
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetAppSchemaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.AppSchema, true
}

// SetAppSchema sets field value
func (o *FieldMappingDto) SetAppSchema(v map[string]interface{}) {
	o.AppSchema = v
}

// GetDirection returns the Direction field value
func (o *FieldMappingDto) GetDirection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetDirectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *FieldMappingDto) SetDirection(v string) {
	o.Direction = v
}

// GetDefaultImportValue returns the DefaultImportValue field value
func (o *FieldMappingDto) GetDefaultImportValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.DefaultImportValue
}

// GetDefaultImportValueOk returns a tuple with the DefaultImportValue field value
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetDefaultImportValueOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.DefaultImportValue, true
}

// SetDefaultImportValue sets field value
func (o *FieldMappingDto) SetDefaultImportValue(v map[string]interface{}) {
	o.DefaultImportValue = v
}

// GetDefaultExportValue returns the DefaultExportValue field value if set, zero value otherwise.
func (o *FieldMappingDto) GetDefaultExportValue() map[string]interface{} {
	if o == nil || IsNil(o.DefaultExportValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultExportValue
}

// GetDefaultExportValueOk returns a tuple with the DefaultExportValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetDefaultExportValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultExportValue) {
		return map[string]interface{}{}, false
	}
	return o.DefaultExportValue, true
}

// HasDefaultExportValue returns a boolean if a field has been set.
func (o *FieldMappingDto) HasDefaultExportValue() bool {
	if o != nil && !IsNil(o.DefaultExportValue) {
		return true
	}

	return false
}

// SetDefaultExportValue gets a reference to the given map[string]interface{} and assigns it to the DefaultExportValue field.
func (o *FieldMappingDto) SetDefaultExportValue(v map[string]interface{}) {
	o.DefaultExportValue = v
}

// GetExportValue returns the ExportValue field value if set, zero value otherwise.
func (o *FieldMappingDto) GetExportValue() map[string]interface{} {
	if o == nil || IsNil(o.ExportValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExportValue
}

// GetExportValueOk returns a tuple with the ExportValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetExportValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExportValue) {
		return map[string]interface{}{}, false
	}
	return o.ExportValue, true
}

// HasExportValue returns a boolean if a field has been set.
func (o *FieldMappingDto) HasExportValue() bool {
	if o != nil && !IsNil(o.ExportValue) {
		return true
	}

	return false
}

// SetExportValue gets a reference to the given map[string]interface{} and assigns it to the ExportValue field.
func (o *FieldMappingDto) SetExportValue(v map[string]interface{}) {
	o.ExportValue = v
}

// GetImportValue returns the ImportValue field value if set, zero value otherwise.
func (o *FieldMappingDto) GetImportValue() map[string]interface{} {
	if o == nil || IsNil(o.ImportValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.ImportValue
}

// GetImportValueOk returns a tuple with the ImportValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetImportValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ImportValue) {
		return map[string]interface{}{}, false
	}
	return o.ImportValue, true
}

// HasImportValue returns a boolean if a field has been set.
func (o *FieldMappingDto) HasImportValue() bool {
	if o != nil && !IsNil(o.ImportValue) {
		return true
	}

	return false
}

// SetImportValue gets a reference to the given map[string]interface{} and assigns it to the ImportValue field.
func (o *FieldMappingDto) SetImportValue(v map[string]interface{}) {
	o.ImportValue = v
}

// GetFrozenImportFields returns the FrozenImportFields field value if set, zero value otherwise.
func (o *FieldMappingDto) GetFrozenImportFields() map[string]interface{} {
	if o == nil || IsNil(o.FrozenImportFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.FrozenImportFields
}

// GetFrozenImportFieldsOk returns a tuple with the FrozenImportFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetFrozenImportFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FrozenImportFields) {
		return map[string]interface{}{}, false
	}
	return o.FrozenImportFields, true
}

// HasFrozenImportFields returns a boolean if a field has been set.
func (o *FieldMappingDto) HasFrozenImportFields() bool {
	if o != nil && !IsNil(o.FrozenImportFields) {
		return true
	}

	return false
}

// SetFrozenImportFields gets a reference to the given map[string]interface{} and assigns it to the FrozenImportFields field.
func (o *FieldMappingDto) SetFrozenImportFields(v map[string]interface{}) {
	o.FrozenImportFields = v
}

// GetFrozenExportFields returns the FrozenExportFields field value if set, zero value otherwise.
func (o *FieldMappingDto) GetFrozenExportFields() map[string]interface{} {
	if o == nil || IsNil(o.FrozenExportFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.FrozenExportFields
}

// GetFrozenExportFieldsOk returns a tuple with the FrozenExportFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetFrozenExportFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FrozenExportFields) {
		return map[string]interface{}{}, false
	}
	return o.FrozenExportFields, true
}

// HasFrozenExportFields returns a boolean if a field has been set.
func (o *FieldMappingDto) HasFrozenExportFields() bool {
	if o != nil && !IsNil(o.FrozenExportFields) {
		return true
	}

	return false
}

// SetFrozenExportFields gets a reference to the given map[string]interface{} and assigns it to the FrozenExportFields field.
func (o *FieldMappingDto) SetFrozenExportFields(v map[string]interface{}) {
	o.FrozenExportFields = v
}

// GetFrozenUnifiedExportFields returns the FrozenUnifiedExportFields field value if set, zero value otherwise.
func (o *FieldMappingDto) GetFrozenUnifiedExportFields() map[string]interface{} {
	if o == nil || IsNil(o.FrozenUnifiedExportFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.FrozenUnifiedExportFields
}

// GetFrozenUnifiedExportFieldsOk returns a tuple with the FrozenUnifiedExportFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetFrozenUnifiedExportFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FrozenUnifiedExportFields) {
		return map[string]interface{}{}, false
	}
	return o.FrozenUnifiedExportFields, true
}

// HasFrozenUnifiedExportFields returns a boolean if a field has been set.
func (o *FieldMappingDto) HasFrozenUnifiedExportFields() bool {
	if o != nil && !IsNil(o.FrozenUnifiedExportFields) {
		return true
	}

	return false
}

// SetFrozenUnifiedExportFields gets a reference to the given map[string]interface{} and assigns it to the FrozenUnifiedExportFields field.
func (o *FieldMappingDto) SetFrozenUnifiedExportFields(v map[string]interface{}) {
	o.FrozenUnifiedExportFields = v
}

// GetAppliedToIntegrations returns the AppliedToIntegrations field value if set, zero value otherwise.
func (o *FieldMappingDto) GetAppliedToIntegrations() []string {
	if o == nil || IsNil(o.AppliedToIntegrations) {
		var ret []string
		return ret
	}
	return o.AppliedToIntegrations
}

// GetAppliedToIntegrationsOk returns a tuple with the AppliedToIntegrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldMappingDto) GetAppliedToIntegrationsOk() ([]string, bool) {
	if o == nil || IsNil(o.AppliedToIntegrations) {
		return nil, false
	}
	return o.AppliedToIntegrations, true
}

// HasAppliedToIntegrations returns a boolean if a field has been set.
func (o *FieldMappingDto) HasAppliedToIntegrations() bool {
	if o != nil && !IsNil(o.AppliedToIntegrations) {
		return true
	}

	return false
}

// SetAppliedToIntegrations gets a reference to the given []string and assigns it to the AppliedToIntegrations field.
func (o *FieldMappingDto) SetAppliedToIntegrations(v []string) {
	o.AppliedToIntegrations = v
}

func (o FieldMappingDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldMappingDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Customized) {
		toSerialize["customized"] = o.Customized
	}
	toSerialize["revision"] = o.Revision
	if !IsNil(o.UniversalFieldMappingId) {
		toSerialize["universalFieldMappingId"] = o.UniversalFieldMappingId
	}
	if !IsNil(o.UniversalFieldMappingRevision) {
		toSerialize["universalFieldMappingRevision"] = o.UniversalFieldMappingRevision
	}
	if !IsNil(o.IntegrationId) {
		toSerialize["integrationId"] = o.IntegrationId
	}
	toSerialize["dataSourceKey"] = o.DataSourceKey
	toSerialize["dataSourceId"] = o.DataSourceId
	toSerialize["appSchema"] = o.AppSchema
	toSerialize["direction"] = o.Direction
	toSerialize["defaultImportValue"] = o.DefaultImportValue
	if !IsNil(o.DefaultExportValue) {
		toSerialize["defaultExportValue"] = o.DefaultExportValue
	}
	if !IsNil(o.ExportValue) {
		toSerialize["exportValue"] = o.ExportValue
	}
	if !IsNil(o.ImportValue) {
		toSerialize["importValue"] = o.ImportValue
	}
	if !IsNil(o.FrozenImportFields) {
		toSerialize["frozenImportFields"] = o.FrozenImportFields
	}
	if !IsNil(o.FrozenExportFields) {
		toSerialize["frozenExportFields"] = o.FrozenExportFields
	}
	if !IsNil(o.FrozenUnifiedExportFields) {
		toSerialize["frozenUnifiedExportFields"] = o.FrozenUnifiedExportFields
	}
	if !IsNil(o.AppliedToIntegrations) {
		toSerialize["appliedToIntegrations"] = o.AppliedToIntegrations
	}
	return toSerialize, nil
}

func (o *FieldMappingDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revision",
		"dataSourceKey",
		"dataSourceId",
		"appSchema",
		"direction",
		"defaultImportValue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFieldMappingDto := _FieldMappingDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFieldMappingDto)

	if err != nil {
		return err
	}

	*o = FieldMappingDto(varFieldMappingDto)

	return err
}

type NullableFieldMappingDto struct {
	value *FieldMappingDto
	isSet bool
}

func (v NullableFieldMappingDto) Get() *FieldMappingDto {
	return v.value
}

func (v *NullableFieldMappingDto) Set(val *FieldMappingDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldMappingDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldMappingDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldMappingDto(val *FieldMappingDto) *NullableFieldMappingDto {
	return &NullableFieldMappingDto{value: val, isSet: true}
}

func (v NullableFieldMappingDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldMappingDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


