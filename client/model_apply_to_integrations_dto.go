/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ApplyToIntegrationsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplyToIntegrationsDto{}

// ApplyToIntegrationsDto struct for ApplyToIntegrationsDto
type ApplyToIntegrationsDto struct {
	IntegrationKeys []string `json:"integrationKeys,omitempty"`
}

// NewApplyToIntegrationsDto instantiates a new ApplyToIntegrationsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplyToIntegrationsDto() *ApplyToIntegrationsDto {
	this := ApplyToIntegrationsDto{}
	return &this
}

// NewApplyToIntegrationsDtoWithDefaults instantiates a new ApplyToIntegrationsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyToIntegrationsDtoWithDefaults() *ApplyToIntegrationsDto {
	this := ApplyToIntegrationsDto{}
	return &this
}

// GetIntegrationKeys returns the IntegrationKeys field value if set, zero value otherwise.
func (o *ApplyToIntegrationsDto) GetIntegrationKeys() []string {
	if o == nil || IsNil(o.IntegrationKeys) {
		var ret []string
		return ret
	}
	return o.IntegrationKeys
}

// GetIntegrationKeysOk returns a tuple with the IntegrationKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyToIntegrationsDto) GetIntegrationKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.IntegrationKeys) {
		return nil, false
	}
	return o.IntegrationKeys, true
}

// HasIntegrationKeys returns a boolean if a field has been set.
func (o *ApplyToIntegrationsDto) HasIntegrationKeys() bool {
	if o != nil && !IsNil(o.IntegrationKeys) {
		return true
	}

	return false
}

// SetIntegrationKeys gets a reference to the given []string and assigns it to the IntegrationKeys field.
func (o *ApplyToIntegrationsDto) SetIntegrationKeys(v []string) {
	o.IntegrationKeys = v
}

func (o ApplyToIntegrationsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplyToIntegrationsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IntegrationKeys) {
		toSerialize["integrationKeys"] = o.IntegrationKeys
	}
	return toSerialize, nil
}

type NullableApplyToIntegrationsDto struct {
	value *ApplyToIntegrationsDto
	isSet bool
}

func (v NullableApplyToIntegrationsDto) Get() *ApplyToIntegrationsDto {
	return v.value
}

func (v *NullableApplyToIntegrationsDto) Set(val *ApplyToIntegrationsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyToIntegrationsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyToIntegrationsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyToIntegrationsDto(val *ApplyToIntegrationsDto) *NullableApplyToIntegrationsDto {
	return &NullableApplyToIntegrationsDto{value: val, isSet: true}
}

func (v NullableApplyToIntegrationsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyToIntegrationsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


