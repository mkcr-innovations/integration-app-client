/*
Integration Engine API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ExternalEventsAPI interface {

	/*
	GetExternalEventLogRecord Method for GetExternalEventLogRecord

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiGetExternalEventLogRecordRequest
	*/
	GetExternalEventLogRecord(ctx context.Context, id string) ApiGetExternalEventLogRecordRequest

	// GetExternalEventLogRecordExecute executes the request
	//  @return ExternalEventLogRecordDto
	GetExternalEventLogRecordExecute(r ApiGetExternalEventLogRecordRequest) (*ExternalEventLogRecordDto, *http.Response, error)

	/*
	GetExternalEventPull Method for GetExternalEventPull

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiGetExternalEventPullRequest
	*/
	GetExternalEventPull(ctx context.Context, id string) ApiGetExternalEventPullRequest

	// GetExternalEventPullExecute executes the request
	//  @return ExternalEventPullDto
	GetExternalEventPullExecute(r ApiGetExternalEventPullRequest) (*ExternalEventPullDto, *http.Response, error)

	/*
	GetLogs Method for GetLogs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiGetLogsRequest
	*/
	GetLogs(ctx context.Context, id string) ApiGetLogsRequest

	// GetLogsExecute executes the request
	//  @return map[string]interface{}
	GetLogsExecute(r ApiGetLogsRequest) (map[string]interface{}, *http.Response, error)

	/*
	List Method for List

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListRequest
	*/
	List(ctx context.Context) ApiListRequest

	// ListExecute executes the request
	//  @return List200Response
	ListExecute(r ApiListRequest) (*List200Response, *http.Response, error)

	/*
	ListExternalEventLogRecords Method for ListExternalEventLogRecords

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListExternalEventLogRecordsRequest
	*/
	ListExternalEventLogRecords(ctx context.Context) ApiListExternalEventLogRecordsRequest

	// ListExternalEventLogRecordsExecute executes the request
	//  @return ListExternalEventLogRecords200Response
	ListExternalEventLogRecordsExecute(r ApiListExternalEventLogRecordsRequest) (*ListExternalEventLogRecords200Response, *http.Response, error)
}

// ExternalEventsAPIService ExternalEventsAPI service
type ExternalEventsAPIService service

type ApiGetExternalEventLogRecordRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id string
}

func (r ApiGetExternalEventLogRecordRequest) Execute() (*ExternalEventLogRecordDto, *http.Response, error) {
	return r.ApiService.GetExternalEventLogRecordExecute(r)
}

/*
GetExternalEventLogRecord Method for GetExternalEventLogRecord

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGetExternalEventLogRecordRequest
*/
func (a *ExternalEventsAPIService) GetExternalEventLogRecord(ctx context.Context, id string) ApiGetExternalEventLogRecordRequest {
	return ApiGetExternalEventLogRecordRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExternalEventLogRecordDto
func (a *ExternalEventsAPIService) GetExternalEventLogRecordExecute(r ApiGetExternalEventLogRecordRequest) (*ExternalEventLogRecordDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalEventLogRecordDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.GetExternalEventLogRecord")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-log-records/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExternalEventPullRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id string
}

func (r ApiGetExternalEventPullRequest) Execute() (*ExternalEventPullDto, *http.Response, error) {
	return r.ApiService.GetExternalEventPullExecute(r)
}

/*
GetExternalEventPull Method for GetExternalEventPull

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGetExternalEventPullRequest
*/
func (a *ExternalEventsAPIService) GetExternalEventPull(ctx context.Context, id string) ApiGetExternalEventPullRequest {
	return ApiGetExternalEventPullRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExternalEventPullDto
func (a *ExternalEventsAPIService) GetExternalEventPullExecute(r ApiGetExternalEventPullRequest) (*ExternalEventPullDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalEventPullDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.GetExternalEventPull")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-pulls/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLogsRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id string
}

func (r ApiGetLogsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetLogsExecute(r)
}

/*
GetLogs Method for GetLogs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGetLogsRequest
*/
func (a *ExternalEventsAPIService) GetLogs(ctx context.Context, id string) ApiGetLogsRequest {
	return ApiGetLogsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ExternalEventsAPIService) GetLogsExecute(r ApiGetLogsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.GetLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-pulls/{id}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	externalEventSubscriptionId *string
	integrationId *string
	connectionId *string
	userId *string
	status *string
	startedAfter *string
}

func (r ApiListRequest) ExternalEventSubscriptionId(externalEventSubscriptionId string) ApiListRequest {
	r.externalEventSubscriptionId = &externalEventSubscriptionId
	return r
}

func (r ApiListRequest) IntegrationId(integrationId string) ApiListRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiListRequest) ConnectionId(connectionId string) ApiListRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiListRequest) UserId(userId string) ApiListRequest {
	r.userId = &userId
	return r
}

func (r ApiListRequest) Status(status string) ApiListRequest {
	r.status = &status
	return r
}

func (r ApiListRequest) StartedAfter(startedAfter string) ApiListRequest {
	r.startedAfter = &startedAfter
	return r
}

func (r ApiListRequest) Execute() (*List200Response, *http.Response, error) {
	return r.ApiService.ListExecute(r)
}

/*
List Method for List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRequest
*/
func (a *ExternalEventsAPIService) List(ctx context.Context) ApiListRequest {
	return ApiListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return List200Response
func (a *ExternalEventsAPIService) ListExecute(r ApiListRequest) (*List200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *List200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.List")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-pulls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.externalEventSubscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalEventSubscriptionId", r.externalEventSubscriptionId, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.startedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedAfter", r.startedAfter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListExternalEventLogRecordsRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id *string
	userId *string
	externalEventSubscriptionId *string
	connectionId *string
	integrationId *string
}

func (r ApiListExternalEventLogRecordsRequest) Id(id string) ApiListExternalEventLogRecordsRequest {
	r.id = &id
	return r
}

func (r ApiListExternalEventLogRecordsRequest) UserId(userId string) ApiListExternalEventLogRecordsRequest {
	r.userId = &userId
	return r
}

func (r ApiListExternalEventLogRecordsRequest) ExternalEventSubscriptionId(externalEventSubscriptionId string) ApiListExternalEventLogRecordsRequest {
	r.externalEventSubscriptionId = &externalEventSubscriptionId
	return r
}

func (r ApiListExternalEventLogRecordsRequest) ConnectionId(connectionId string) ApiListExternalEventLogRecordsRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiListExternalEventLogRecordsRequest) IntegrationId(integrationId string) ApiListExternalEventLogRecordsRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiListExternalEventLogRecordsRequest) Execute() (*ListExternalEventLogRecords200Response, *http.Response, error) {
	return r.ApiService.ListExternalEventLogRecordsExecute(r)
}

/*
ListExternalEventLogRecords Method for ListExternalEventLogRecords

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListExternalEventLogRecordsRequest
*/
func (a *ExternalEventsAPIService) ListExternalEventLogRecords(ctx context.Context) ApiListExternalEventLogRecordsRequest {
	return ApiListExternalEventLogRecordsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListExternalEventLogRecords200Response
func (a *ExternalEventsAPIService) ListExternalEventLogRecordsExecute(r ApiListExternalEventLogRecordsRequest) (*ListExternalEventLogRecords200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListExternalEventLogRecords200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ListExternalEventLogRecords")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-log-records"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.externalEventSubscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalEventSubscriptionId", r.externalEventSubscriptionId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
