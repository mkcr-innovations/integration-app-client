/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ExternalEventsAPI interface {

	/*
	ExternalEventLogRecordsControllerGetExternalEventLogRecord Get external event log record

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExternalEventLogRecordsControllerGetExternalEventLogRecordRequest
	*/
	ExternalEventLogRecordsControllerGetExternalEventLogRecord(ctx context.Context, id string) ApiExternalEventLogRecordsControllerGetExternalEventLogRecordRequest

	// ExternalEventLogRecordsControllerGetExternalEventLogRecordExecute executes the request
	//  @return ExternalEventLogRecordDto
	ExternalEventLogRecordsControllerGetExternalEventLogRecordExecute(r ApiExternalEventLogRecordsControllerGetExternalEventLogRecordRequest) (*ExternalEventLogRecordDto, *http.Response, error)

	/*
	ExternalEventLogRecordsControllerListExternalEventLogRecords List external event log records

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest
	*/
	ExternalEventLogRecordsControllerListExternalEventLogRecords(ctx context.Context) ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest

	// ExternalEventLogRecordsControllerListExternalEventLogRecordsExecute executes the request
	//  @return ExternalEventLogRecordsControllerListExternalEventLogRecords200Response
	ExternalEventLogRecordsControllerListExternalEventLogRecordsExecute(r ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest) (*ExternalEventLogRecordsControllerListExternalEventLogRecords200Response, *http.Response, error)

	/*
	ExternalEventPullsControllerGetById Get external event pull

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExternalEventPullsControllerGetByIdRequest
	*/
	ExternalEventPullsControllerGetById(ctx context.Context, id string) ApiExternalEventPullsControllerGetByIdRequest

	// ExternalEventPullsControllerGetByIdExecute executes the request
	//  @return ExternalEventPullDto
	ExternalEventPullsControllerGetByIdExecute(r ApiExternalEventPullsControllerGetByIdRequest) (*ExternalEventPullDto, *http.Response, error)

	/*
	ExternalEventPullsControllerGetLogs Get external event pull logs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExternalEventPullsControllerGetLogsRequest
	*/
	ExternalEventPullsControllerGetLogs(ctx context.Context, id string) ApiExternalEventPullsControllerGetLogsRequest

	// ExternalEventPullsControllerGetLogsExecute executes the request
	//  @return map[string]interface{}
	ExternalEventPullsControllerGetLogsExecute(r ApiExternalEventPullsControllerGetLogsRequest) (map[string]interface{}, *http.Response, error)

	/*
	ExternalEventPullsControllerList List external event pulls

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExternalEventPullsControllerListRequest
	*/
	ExternalEventPullsControllerList(ctx context.Context) ApiExternalEventPullsControllerListRequest

	// ExternalEventPullsControllerListExecute executes the request
	//  @return ExternalEventPullsControllerList200Response
	ExternalEventPullsControllerListExecute(r ApiExternalEventPullsControllerListRequest) (*ExternalEventPullsControllerList200Response, *http.Response, error)

	/*
	ExternalEventSubscriptionsControllerDeleteExternalEventSubscription Delete external event subscription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExternalEventSubscriptionsControllerDeleteExternalEventSubscriptionRequest
	*/
	ExternalEventSubscriptionsControllerDeleteExternalEventSubscription(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerDeleteExternalEventSubscriptionRequest

	// ExternalEventSubscriptionsControllerDeleteExternalEventSubscriptionExecute executes the request
	ExternalEventSubscriptionsControllerDeleteExternalEventSubscriptionExecute(r ApiExternalEventSubscriptionsControllerDeleteExternalEventSubscriptionRequest) (*http.Response, error)

	/*
	ExternalEventSubscriptionsControllerGetExternalEventSubscription Get external event subscription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExternalEventSubscriptionsControllerGetExternalEventSubscriptionRequest
	*/
	ExternalEventSubscriptionsControllerGetExternalEventSubscription(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerGetExternalEventSubscriptionRequest

	// ExternalEventSubscriptionsControllerGetExternalEventSubscriptionExecute executes the request
	//  @return ExternalEventSubscriptionDto
	ExternalEventSubscriptionsControllerGetExternalEventSubscriptionExecute(r ApiExternalEventSubscriptionsControllerGetExternalEventSubscriptionRequest) (*ExternalEventSubscriptionDto, *http.Response, error)

	/*
	ExternalEventSubscriptionsControllerListExternalEventSubscriptions List external event subscriptions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest
	*/
	ExternalEventSubscriptionsControllerListExternalEventSubscriptions(ctx context.Context) ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest

	// ExternalEventSubscriptionsControllerListExternalEventSubscriptionsExecute executes the request
	//  @return ExternalEventSubscriptionsControllerListExternalEventSubscriptions200Response
	ExternalEventSubscriptionsControllerListExternalEventSubscriptionsExecute(r ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest) (*ExternalEventSubscriptionsControllerListExternalEventSubscriptions200Response, *http.Response, error)

	/*
	ExternalEventSubscriptionsControllerPullExternalEventSubscriptionEvents Triggers pull events for external event subscription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExternalEventSubscriptionsControllerPullExternalEventSubscriptionEventsRequest
	*/
	ExternalEventSubscriptionsControllerPullExternalEventSubscriptionEvents(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerPullExternalEventSubscriptionEventsRequest

	// ExternalEventSubscriptionsControllerPullExternalEventSubscriptionEventsExecute executes the request
	//  @return ExternalEventSubscriptionDto
	ExternalEventSubscriptionsControllerPullExternalEventSubscriptionEventsExecute(r ApiExternalEventSubscriptionsControllerPullExternalEventSubscriptionEventsRequest) (*ExternalEventSubscriptionDto, *http.Response, error)

	/*
	ExternalEventSubscriptionsControllerResubscribeToExternalEventSubscription Resubscribe to external event subscription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExternalEventSubscriptionsControllerResubscribeToExternalEventSubscriptionRequest
	*/
	ExternalEventSubscriptionsControllerResubscribeToExternalEventSubscription(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerResubscribeToExternalEventSubscriptionRequest

	// ExternalEventSubscriptionsControllerResubscribeToExternalEventSubscriptionExecute executes the request
	//  @return ExternalEventSubscriptionDto
	ExternalEventSubscriptionsControllerResubscribeToExternalEventSubscriptionExecute(r ApiExternalEventSubscriptionsControllerResubscribeToExternalEventSubscriptionRequest) (*ExternalEventSubscriptionDto, *http.Response, error)

	/*
	ExternalEventSubscriptionsControllerSetupExternalEventSubscription Setup external event subscription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExternalEventSubscriptionsControllerSetupExternalEventSubscriptionRequest
	*/
	ExternalEventSubscriptionsControllerSetupExternalEventSubscription(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerSetupExternalEventSubscriptionRequest

	// ExternalEventSubscriptionsControllerSetupExternalEventSubscriptionExecute executes the request
	//  @return ExternalEventSubscriptionDto
	ExternalEventSubscriptionsControllerSetupExternalEventSubscriptionExecute(r ApiExternalEventSubscriptionsControllerSetupExternalEventSubscriptionRequest) (*ExternalEventSubscriptionDto, *http.Response, error)

	/*
	ExternalEventSubscriptionsControllerSubscribeToExternalEventSubscription Subscribe to external event subscription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExternalEventSubscriptionsControllerSubscribeToExternalEventSubscriptionRequest
	*/
	ExternalEventSubscriptionsControllerSubscribeToExternalEventSubscription(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerSubscribeToExternalEventSubscriptionRequest

	// ExternalEventSubscriptionsControllerSubscribeToExternalEventSubscriptionExecute executes the request
	//  @return ExternalEventSubscriptionDto
	ExternalEventSubscriptionsControllerSubscribeToExternalEventSubscriptionExecute(r ApiExternalEventSubscriptionsControllerSubscribeToExternalEventSubscriptionRequest) (*ExternalEventSubscriptionDto, *http.Response, error)

	/*
	ExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscription Unsubscribe from external event subscription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscriptionRequest
	*/
	ExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscription(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscriptionRequest

	// ExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscriptionExecute executes the request
	//  @return ExternalEventSubscriptionDto
	ExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscriptionExecute(r ApiExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscriptionRequest) (*ExternalEventSubscriptionDto, *http.Response, error)
}

// ExternalEventsAPIService ExternalEventsAPI service
type ExternalEventsAPIService service

type ApiExternalEventLogRecordsControllerGetExternalEventLogRecordRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id string
}

func (r ApiExternalEventLogRecordsControllerGetExternalEventLogRecordRequest) Execute() (*ExternalEventLogRecordDto, *http.Response, error) {
	return r.ApiService.ExternalEventLogRecordsControllerGetExternalEventLogRecordExecute(r)
}

/*
ExternalEventLogRecordsControllerGetExternalEventLogRecord Get external event log record

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiExternalEventLogRecordsControllerGetExternalEventLogRecordRequest
*/
func (a *ExternalEventsAPIService) ExternalEventLogRecordsControllerGetExternalEventLogRecord(ctx context.Context, id string) ApiExternalEventLogRecordsControllerGetExternalEventLogRecordRequest {
	return ApiExternalEventLogRecordsControllerGetExternalEventLogRecordRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExternalEventLogRecordDto
func (a *ExternalEventsAPIService) ExternalEventLogRecordsControllerGetExternalEventLogRecordExecute(r ApiExternalEventLogRecordsControllerGetExternalEventLogRecordRequest) (*ExternalEventLogRecordDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalEventLogRecordDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ExternalEventLogRecordsControllerGetExternalEventLogRecord")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-log-records/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	limit *float32
	cursor *string
	search *string
	connectorId *string
	id *string
	userId *string
	externalEventSubscriptionId *string
	connectionId *string
	integrationId *string
}

func (r ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest) Limit(limit float32) ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest {
	r.limit = &limit
	return r
}

func (r ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest) Cursor(cursor string) ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest {
	r.cursor = &cursor
	return r
}

func (r ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest) Search(search string) ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest {
	r.search = &search
	return r
}

func (r ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest) ConnectorId(connectorId string) ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest {
	r.connectorId = &connectorId
	return r
}

func (r ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest) Id(id string) ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest {
	r.id = &id
	return r
}

func (r ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest) UserId(userId string) ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest {
	r.userId = &userId
	return r
}

func (r ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest) ExternalEventSubscriptionId(externalEventSubscriptionId string) ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest {
	r.externalEventSubscriptionId = &externalEventSubscriptionId
	return r
}

func (r ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest) ConnectionId(connectionId string) ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest) IntegrationId(integrationId string) ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest) Execute() (*ExternalEventLogRecordsControllerListExternalEventLogRecords200Response, *http.Response, error) {
	return r.ApiService.ExternalEventLogRecordsControllerListExternalEventLogRecordsExecute(r)
}

/*
ExternalEventLogRecordsControllerListExternalEventLogRecords List external event log records

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest
*/
func (a *ExternalEventsAPIService) ExternalEventLogRecordsControllerListExternalEventLogRecords(ctx context.Context) ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest {
	return ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExternalEventLogRecordsControllerListExternalEventLogRecords200Response
func (a *ExternalEventsAPIService) ExternalEventLogRecordsControllerListExternalEventLogRecordsExecute(r ApiExternalEventLogRecordsControllerListExternalEventLogRecordsRequest) (*ExternalEventLogRecordsControllerListExternalEventLogRecords200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalEventLogRecordsControllerListExternalEventLogRecords200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ExternalEventLogRecordsControllerListExternalEventLogRecords")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-log-records"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.connectorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectorId", r.connectorId, "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.externalEventSubscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalEventSubscriptionId", r.externalEventSubscriptionId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExternalEventPullsControllerGetByIdRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id string
}

func (r ApiExternalEventPullsControllerGetByIdRequest) Execute() (*ExternalEventPullDto, *http.Response, error) {
	return r.ApiService.ExternalEventPullsControllerGetByIdExecute(r)
}

/*
ExternalEventPullsControllerGetById Get external event pull

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiExternalEventPullsControllerGetByIdRequest
*/
func (a *ExternalEventsAPIService) ExternalEventPullsControllerGetById(ctx context.Context, id string) ApiExternalEventPullsControllerGetByIdRequest {
	return ApiExternalEventPullsControllerGetByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExternalEventPullDto
func (a *ExternalEventsAPIService) ExternalEventPullsControllerGetByIdExecute(r ApiExternalEventPullsControllerGetByIdRequest) (*ExternalEventPullDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalEventPullDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ExternalEventPullsControllerGetById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-pulls/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExternalEventPullsControllerGetLogsRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id string
}

func (r ApiExternalEventPullsControllerGetLogsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ExternalEventPullsControllerGetLogsExecute(r)
}

/*
ExternalEventPullsControllerGetLogs Get external event pull logs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiExternalEventPullsControllerGetLogsRequest
*/
func (a *ExternalEventsAPIService) ExternalEventPullsControllerGetLogs(ctx context.Context, id string) ApiExternalEventPullsControllerGetLogsRequest {
	return ApiExternalEventPullsControllerGetLogsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ExternalEventsAPIService) ExternalEventPullsControllerGetLogsExecute(r ApiExternalEventPullsControllerGetLogsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ExternalEventPullsControllerGetLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-pulls/{id}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExternalEventPullsControllerListRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	limit *float32
	cursor *string
	externalEventSubscriptionId *string
	integrationId *string
	connectionId *string
	userId *string
	status *string
	startedAfter *string
}

func (r ApiExternalEventPullsControllerListRequest) Limit(limit float32) ApiExternalEventPullsControllerListRequest {
	r.limit = &limit
	return r
}

func (r ApiExternalEventPullsControllerListRequest) Cursor(cursor string) ApiExternalEventPullsControllerListRequest {
	r.cursor = &cursor
	return r
}

func (r ApiExternalEventPullsControllerListRequest) ExternalEventSubscriptionId(externalEventSubscriptionId string) ApiExternalEventPullsControllerListRequest {
	r.externalEventSubscriptionId = &externalEventSubscriptionId
	return r
}

func (r ApiExternalEventPullsControllerListRequest) IntegrationId(integrationId string) ApiExternalEventPullsControllerListRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiExternalEventPullsControllerListRequest) ConnectionId(connectionId string) ApiExternalEventPullsControllerListRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiExternalEventPullsControllerListRequest) UserId(userId string) ApiExternalEventPullsControllerListRequest {
	r.userId = &userId
	return r
}

func (r ApiExternalEventPullsControllerListRequest) Status(status string) ApiExternalEventPullsControllerListRequest {
	r.status = &status
	return r
}

func (r ApiExternalEventPullsControllerListRequest) StartedAfter(startedAfter string) ApiExternalEventPullsControllerListRequest {
	r.startedAfter = &startedAfter
	return r
}

func (r ApiExternalEventPullsControllerListRequest) Execute() (*ExternalEventPullsControllerList200Response, *http.Response, error) {
	return r.ApiService.ExternalEventPullsControllerListExecute(r)
}

/*
ExternalEventPullsControllerList List external event pulls

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExternalEventPullsControllerListRequest
*/
func (a *ExternalEventsAPIService) ExternalEventPullsControllerList(ctx context.Context) ApiExternalEventPullsControllerListRequest {
	return ApiExternalEventPullsControllerListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExternalEventPullsControllerList200Response
func (a *ExternalEventsAPIService) ExternalEventPullsControllerListExecute(r ApiExternalEventPullsControllerListRequest) (*ExternalEventPullsControllerList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalEventPullsControllerList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ExternalEventPullsControllerList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-pulls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.externalEventSubscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalEventSubscriptionId", r.externalEventSubscriptionId, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.startedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startedAfter", r.startedAfter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExternalEventSubscriptionsControllerDeleteExternalEventSubscriptionRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id string
}

func (r ApiExternalEventSubscriptionsControllerDeleteExternalEventSubscriptionRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExternalEventSubscriptionsControllerDeleteExternalEventSubscriptionExecute(r)
}

/*
ExternalEventSubscriptionsControllerDeleteExternalEventSubscription Delete external event subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiExternalEventSubscriptionsControllerDeleteExternalEventSubscriptionRequest
*/
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerDeleteExternalEventSubscription(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerDeleteExternalEventSubscriptionRequest {
	return ApiExternalEventSubscriptionsControllerDeleteExternalEventSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerDeleteExternalEventSubscriptionExecute(r ApiExternalEventSubscriptionsControllerDeleteExternalEventSubscriptionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ExternalEventSubscriptionsControllerDeleteExternalEventSubscription")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-subscriptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExternalEventSubscriptionsControllerGetExternalEventSubscriptionRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id string
}

func (r ApiExternalEventSubscriptionsControllerGetExternalEventSubscriptionRequest) Execute() (*ExternalEventSubscriptionDto, *http.Response, error) {
	return r.ApiService.ExternalEventSubscriptionsControllerGetExternalEventSubscriptionExecute(r)
}

/*
ExternalEventSubscriptionsControllerGetExternalEventSubscription Get external event subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiExternalEventSubscriptionsControllerGetExternalEventSubscriptionRequest
*/
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerGetExternalEventSubscription(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerGetExternalEventSubscriptionRequest {
	return ApiExternalEventSubscriptionsControllerGetExternalEventSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExternalEventSubscriptionDto
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerGetExternalEventSubscriptionExecute(r ApiExternalEventSubscriptionsControllerGetExternalEventSubscriptionRequest) (*ExternalEventSubscriptionDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalEventSubscriptionDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ExternalEventSubscriptionsControllerGetExternalEventSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-subscriptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	limit *float32
	cursor *string
	search *string
	connectorId *string
	userId *string
	connectionId *string
	integrationId *string
}

func (r ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest) Limit(limit float32) ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest {
	r.limit = &limit
	return r
}

func (r ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest) Cursor(cursor string) ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest {
	r.cursor = &cursor
	return r
}

func (r ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest) Search(search string) ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest {
	r.search = &search
	return r
}

func (r ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest) ConnectorId(connectorId string) ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest {
	r.connectorId = &connectorId
	return r
}

func (r ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest) UserId(userId string) ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest {
	r.userId = &userId
	return r
}

func (r ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest) ConnectionId(connectionId string) ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest {
	r.connectionId = &connectionId
	return r
}

func (r ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest) IntegrationId(integrationId string) ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest {
	r.integrationId = &integrationId
	return r
}

func (r ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest) Execute() (*ExternalEventSubscriptionsControllerListExternalEventSubscriptions200Response, *http.Response, error) {
	return r.ApiService.ExternalEventSubscriptionsControllerListExternalEventSubscriptionsExecute(r)
}

/*
ExternalEventSubscriptionsControllerListExternalEventSubscriptions List external event subscriptions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest
*/
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerListExternalEventSubscriptions(ctx context.Context) ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest {
	return ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExternalEventSubscriptionsControllerListExternalEventSubscriptions200Response
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerListExternalEventSubscriptionsExecute(r ApiExternalEventSubscriptionsControllerListExternalEventSubscriptionsRequest) (*ExternalEventSubscriptionsControllerListExternalEventSubscriptions200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalEventSubscriptionsControllerListExternalEventSubscriptions200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ExternalEventSubscriptionsControllerListExternalEventSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-subscriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.connectorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectorId", r.connectorId, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.connectionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectionId", r.connectionId, "")
	}
	if r.integrationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrationId", r.integrationId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExternalEventSubscriptionsControllerPullExternalEventSubscriptionEventsRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id string
}

func (r ApiExternalEventSubscriptionsControllerPullExternalEventSubscriptionEventsRequest) Execute() (*ExternalEventSubscriptionDto, *http.Response, error) {
	return r.ApiService.ExternalEventSubscriptionsControllerPullExternalEventSubscriptionEventsExecute(r)
}

/*
ExternalEventSubscriptionsControllerPullExternalEventSubscriptionEvents Triggers pull events for external event subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiExternalEventSubscriptionsControllerPullExternalEventSubscriptionEventsRequest
*/
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerPullExternalEventSubscriptionEvents(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerPullExternalEventSubscriptionEventsRequest {
	return ApiExternalEventSubscriptionsControllerPullExternalEventSubscriptionEventsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExternalEventSubscriptionDto
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerPullExternalEventSubscriptionEventsExecute(r ApiExternalEventSubscriptionsControllerPullExternalEventSubscriptionEventsRequest) (*ExternalEventSubscriptionDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalEventSubscriptionDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ExternalEventSubscriptionsControllerPullExternalEventSubscriptionEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-subscriptions/{id}/pull-events"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExternalEventSubscriptionsControllerResubscribeToExternalEventSubscriptionRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id string
}

func (r ApiExternalEventSubscriptionsControllerResubscribeToExternalEventSubscriptionRequest) Execute() (*ExternalEventSubscriptionDto, *http.Response, error) {
	return r.ApiService.ExternalEventSubscriptionsControllerResubscribeToExternalEventSubscriptionExecute(r)
}

/*
ExternalEventSubscriptionsControllerResubscribeToExternalEventSubscription Resubscribe to external event subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiExternalEventSubscriptionsControllerResubscribeToExternalEventSubscriptionRequest
*/
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerResubscribeToExternalEventSubscription(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerResubscribeToExternalEventSubscriptionRequest {
	return ApiExternalEventSubscriptionsControllerResubscribeToExternalEventSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExternalEventSubscriptionDto
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerResubscribeToExternalEventSubscriptionExecute(r ApiExternalEventSubscriptionsControllerResubscribeToExternalEventSubscriptionRequest) (*ExternalEventSubscriptionDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalEventSubscriptionDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ExternalEventSubscriptionsControllerResubscribeToExternalEventSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-subscriptions/{id}/resubscribe"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExternalEventSubscriptionsControllerSetupExternalEventSubscriptionRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id string
}

func (r ApiExternalEventSubscriptionsControllerSetupExternalEventSubscriptionRequest) Execute() (*ExternalEventSubscriptionDto, *http.Response, error) {
	return r.ApiService.ExternalEventSubscriptionsControllerSetupExternalEventSubscriptionExecute(r)
}

/*
ExternalEventSubscriptionsControllerSetupExternalEventSubscription Setup external event subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiExternalEventSubscriptionsControllerSetupExternalEventSubscriptionRequest
*/
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerSetupExternalEventSubscription(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerSetupExternalEventSubscriptionRequest {
	return ApiExternalEventSubscriptionsControllerSetupExternalEventSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExternalEventSubscriptionDto
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerSetupExternalEventSubscriptionExecute(r ApiExternalEventSubscriptionsControllerSetupExternalEventSubscriptionRequest) (*ExternalEventSubscriptionDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalEventSubscriptionDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ExternalEventSubscriptionsControllerSetupExternalEventSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-subscriptions/{id}/setup"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExternalEventSubscriptionsControllerSubscribeToExternalEventSubscriptionRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id string
}

func (r ApiExternalEventSubscriptionsControllerSubscribeToExternalEventSubscriptionRequest) Execute() (*ExternalEventSubscriptionDto, *http.Response, error) {
	return r.ApiService.ExternalEventSubscriptionsControllerSubscribeToExternalEventSubscriptionExecute(r)
}

/*
ExternalEventSubscriptionsControllerSubscribeToExternalEventSubscription Subscribe to external event subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiExternalEventSubscriptionsControllerSubscribeToExternalEventSubscriptionRequest
*/
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerSubscribeToExternalEventSubscription(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerSubscribeToExternalEventSubscriptionRequest {
	return ApiExternalEventSubscriptionsControllerSubscribeToExternalEventSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExternalEventSubscriptionDto
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerSubscribeToExternalEventSubscriptionExecute(r ApiExternalEventSubscriptionsControllerSubscribeToExternalEventSubscriptionRequest) (*ExternalEventSubscriptionDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalEventSubscriptionDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ExternalEventSubscriptionsControllerSubscribeToExternalEventSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-subscriptions/{id}/subscribe"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscriptionRequest struct {
	ctx context.Context
	ApiService ExternalEventsAPI
	id string
}

func (r ApiExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscriptionRequest) Execute() (*ExternalEventSubscriptionDto, *http.Response, error) {
	return r.ApiService.ExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscriptionExecute(r)
}

/*
ExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscription Unsubscribe from external event subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscriptionRequest
*/
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscription(ctx context.Context, id string) ApiExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscriptionRequest {
	return ApiExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscriptionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExternalEventSubscriptionDto
func (a *ExternalEventsAPIService) ExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscriptionExecute(r ApiExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscriptionRequest) (*ExternalEventSubscriptionDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalEventSubscriptionDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalEventsAPIService.ExternalEventSubscriptionsControllerUnsubscribeFromExternalEventSubscription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external-event-subscriptions/{id}/unsubscribe"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
