/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppDataSchemaInstanceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDataSchemaInstanceDto{}

// AppDataSchemaInstanceDto struct for AppDataSchemaInstanceDto
type AppDataSchemaInstanceDto struct {
	Id string `json:"id"`
	AppId string `json:"appId"`
	UserId string `json:"userId"`
	User map[string]interface{} `json:"user,omitempty"`
	AppDataSchemaId string `json:"appDataSchemaId"`
	AppDataSchemaRevision string `json:"appDataSchemaRevision"`
	AppDataSchema map[string]interface{} `json:"appDataSchema,omitempty"`
	InstanceKey *string `json:"instanceKey,omitempty"`
	Schema map[string]interface{} `json:"schema,omitempty"`
	Error map[string]interface{} `json:"error,omitempty"`
}

type _AppDataSchemaInstanceDto AppDataSchemaInstanceDto

// NewAppDataSchemaInstanceDto instantiates a new AppDataSchemaInstanceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDataSchemaInstanceDto(id string, appId string, userId string, appDataSchemaId string, appDataSchemaRevision string) *AppDataSchemaInstanceDto {
	this := AppDataSchemaInstanceDto{}
	this.Id = id
	this.AppId = appId
	this.UserId = userId
	this.AppDataSchemaId = appDataSchemaId
	this.AppDataSchemaRevision = appDataSchemaRevision
	return &this
}

// NewAppDataSchemaInstanceDtoWithDefaults instantiates a new AppDataSchemaInstanceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDataSchemaInstanceDtoWithDefaults() *AppDataSchemaInstanceDto {
	this := AppDataSchemaInstanceDto{}
	return &this
}

// GetId returns the Id field value
func (o *AppDataSchemaInstanceDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AppDataSchemaInstanceDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AppDataSchemaInstanceDto) SetId(v string) {
	o.Id = v
}

// GetAppId returns the AppId field value
func (o *AppDataSchemaInstanceDto) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *AppDataSchemaInstanceDto) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *AppDataSchemaInstanceDto) SetAppId(v string) {
	o.AppId = v
}

// GetUserId returns the UserId field value
func (o *AppDataSchemaInstanceDto) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *AppDataSchemaInstanceDto) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *AppDataSchemaInstanceDto) SetUserId(v string) {
	o.UserId = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AppDataSchemaInstanceDto) GetUser() map[string]interface{} {
	if o == nil || IsNil(o.User) {
		var ret map[string]interface{}
		return ret
	}
	return o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataSchemaInstanceDto) GetUserOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.User) {
		return map[string]interface{}{}, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AppDataSchemaInstanceDto) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given map[string]interface{} and assigns it to the User field.
func (o *AppDataSchemaInstanceDto) SetUser(v map[string]interface{}) {
	o.User = v
}

// GetAppDataSchemaId returns the AppDataSchemaId field value
func (o *AppDataSchemaInstanceDto) GetAppDataSchemaId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppDataSchemaId
}

// GetAppDataSchemaIdOk returns a tuple with the AppDataSchemaId field value
// and a boolean to check if the value has been set.
func (o *AppDataSchemaInstanceDto) GetAppDataSchemaIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppDataSchemaId, true
}

// SetAppDataSchemaId sets field value
func (o *AppDataSchemaInstanceDto) SetAppDataSchemaId(v string) {
	o.AppDataSchemaId = v
}

// GetAppDataSchemaRevision returns the AppDataSchemaRevision field value
func (o *AppDataSchemaInstanceDto) GetAppDataSchemaRevision() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppDataSchemaRevision
}

// GetAppDataSchemaRevisionOk returns a tuple with the AppDataSchemaRevision field value
// and a boolean to check if the value has been set.
func (o *AppDataSchemaInstanceDto) GetAppDataSchemaRevisionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppDataSchemaRevision, true
}

// SetAppDataSchemaRevision sets field value
func (o *AppDataSchemaInstanceDto) SetAppDataSchemaRevision(v string) {
	o.AppDataSchemaRevision = v
}

// GetAppDataSchema returns the AppDataSchema field value if set, zero value otherwise.
func (o *AppDataSchemaInstanceDto) GetAppDataSchema() map[string]interface{} {
	if o == nil || IsNil(o.AppDataSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.AppDataSchema
}

// GetAppDataSchemaOk returns a tuple with the AppDataSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataSchemaInstanceDto) GetAppDataSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AppDataSchema) {
		return map[string]interface{}{}, false
	}
	return o.AppDataSchema, true
}

// HasAppDataSchema returns a boolean if a field has been set.
func (o *AppDataSchemaInstanceDto) HasAppDataSchema() bool {
	if o != nil && !IsNil(o.AppDataSchema) {
		return true
	}

	return false
}

// SetAppDataSchema gets a reference to the given map[string]interface{} and assigns it to the AppDataSchema field.
func (o *AppDataSchemaInstanceDto) SetAppDataSchema(v map[string]interface{}) {
	o.AppDataSchema = v
}

// GetInstanceKey returns the InstanceKey field value if set, zero value otherwise.
func (o *AppDataSchemaInstanceDto) GetInstanceKey() string {
	if o == nil || IsNil(o.InstanceKey) {
		var ret string
		return ret
	}
	return *o.InstanceKey
}

// GetInstanceKeyOk returns a tuple with the InstanceKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataSchemaInstanceDto) GetInstanceKeyOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceKey) {
		return nil, false
	}
	return o.InstanceKey, true
}

// HasInstanceKey returns a boolean if a field has been set.
func (o *AppDataSchemaInstanceDto) HasInstanceKey() bool {
	if o != nil && !IsNil(o.InstanceKey) {
		return true
	}

	return false
}

// SetInstanceKey gets a reference to the given string and assigns it to the InstanceKey field.
func (o *AppDataSchemaInstanceDto) SetInstanceKey(v string) {
	o.InstanceKey = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *AppDataSchemaInstanceDto) GetSchema() map[string]interface{} {
	if o == nil || IsNil(o.Schema) {
		var ret map[string]interface{}
		return ret
	}
	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataSchemaInstanceDto) GetSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Schema) {
		return map[string]interface{}{}, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *AppDataSchemaInstanceDto) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given map[string]interface{} and assigns it to the Schema field.
func (o *AppDataSchemaInstanceDto) SetSchema(v map[string]interface{}) {
	o.Schema = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *AppDataSchemaInstanceDto) GetError() map[string]interface{} {
	if o == nil || IsNil(o.Error) {
		var ret map[string]interface{}
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataSchemaInstanceDto) GetErrorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Error) {
		return map[string]interface{}{}, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *AppDataSchemaInstanceDto) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given map[string]interface{} and assigns it to the Error field.
func (o *AppDataSchemaInstanceDto) SetError(v map[string]interface{}) {
	o.Error = v
}

func (o AppDataSchemaInstanceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDataSchemaInstanceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["appId"] = o.AppId
	toSerialize["userId"] = o.UserId
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	toSerialize["appDataSchemaId"] = o.AppDataSchemaId
	toSerialize["appDataSchemaRevision"] = o.AppDataSchemaRevision
	if !IsNil(o.AppDataSchema) {
		toSerialize["appDataSchema"] = o.AppDataSchema
	}
	if !IsNil(o.InstanceKey) {
		toSerialize["instanceKey"] = o.InstanceKey
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

func (o *AppDataSchemaInstanceDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"appId",
		"userId",
		"appDataSchemaId",
		"appDataSchemaRevision",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppDataSchemaInstanceDto := _AppDataSchemaInstanceDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppDataSchemaInstanceDto)

	if err != nil {
		return err
	}

	*o = AppDataSchemaInstanceDto(varAppDataSchemaInstanceDto)

	return err
}

type NullableAppDataSchemaInstanceDto struct {
	value *AppDataSchemaInstanceDto
	isSet bool
}

func (v NullableAppDataSchemaInstanceDto) Get() *AppDataSchemaInstanceDto {
	return v.value
}

func (v *NullableAppDataSchemaInstanceDto) Set(val *AppDataSchemaInstanceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDataSchemaInstanceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDataSchemaInstanceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDataSchemaInstanceDto(val *AppDataSchemaInstanceDto) *NullableAppDataSchemaInstanceDto {
	return &NullableAppDataSchemaInstanceDto{value: val, isSet: true}
}

func (v NullableAppDataSchemaInstanceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDataSchemaInstanceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


