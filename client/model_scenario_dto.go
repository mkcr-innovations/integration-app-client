/*
Integration Engine API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScenarioDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScenarioDto{}

// ScenarioDto struct for ScenarioDto
type ScenarioDto struct {
	Id string `json:"id"`
	AppId string `json:"appId"`
	ScenarioTemplateId *string `json:"scenarioTemplateId,omitempty"`
	Name string `json:"name"`
	Key string `json:"key"`
	ShortDescription *string `json:"shortDescription,omitempty"`
	Description *string `json:"description,omitempty"`
	Elements []ScenarioDtoElementsInner `json:"elements,omitempty"`
	Todos []map[string]interface{} `json:"todos,omitempty"`
	ArchivedAt *string `json:"archivedAt,omitempty"`
}

type _ScenarioDto ScenarioDto

// NewScenarioDto instantiates a new ScenarioDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScenarioDto(id string, appId string, name string, key string) *ScenarioDto {
	this := ScenarioDto{}
	this.Id = id
	this.AppId = appId
	this.Name = name
	this.Key = key
	return &this
}

// NewScenarioDtoWithDefaults instantiates a new ScenarioDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScenarioDtoWithDefaults() *ScenarioDto {
	this := ScenarioDto{}
	return &this
}

// GetId returns the Id field value
func (o *ScenarioDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ScenarioDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ScenarioDto) SetId(v string) {
	o.Id = v
}

// GetAppId returns the AppId field value
func (o *ScenarioDto) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *ScenarioDto) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *ScenarioDto) SetAppId(v string) {
	o.AppId = v
}

// GetScenarioTemplateId returns the ScenarioTemplateId field value if set, zero value otherwise.
func (o *ScenarioDto) GetScenarioTemplateId() string {
	if o == nil || IsNil(o.ScenarioTemplateId) {
		var ret string
		return ret
	}
	return *o.ScenarioTemplateId
}

// GetScenarioTemplateIdOk returns a tuple with the ScenarioTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScenarioDto) GetScenarioTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScenarioTemplateId) {
		return nil, false
	}
	return o.ScenarioTemplateId, true
}

// HasScenarioTemplateId returns a boolean if a field has been set.
func (o *ScenarioDto) HasScenarioTemplateId() bool {
	if o != nil && !IsNil(o.ScenarioTemplateId) {
		return true
	}

	return false
}

// SetScenarioTemplateId gets a reference to the given string and assigns it to the ScenarioTemplateId field.
func (o *ScenarioDto) SetScenarioTemplateId(v string) {
	o.ScenarioTemplateId = &v
}

// GetName returns the Name field value
func (o *ScenarioDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ScenarioDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ScenarioDto) SetName(v string) {
	o.Name = v
}

// GetKey returns the Key field value
func (o *ScenarioDto) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ScenarioDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ScenarioDto) SetKey(v string) {
	o.Key = v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *ScenarioDto) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScenarioDto) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *ScenarioDto) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *ScenarioDto) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ScenarioDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScenarioDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ScenarioDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ScenarioDto) SetDescription(v string) {
	o.Description = &v
}

// GetElements returns the Elements field value if set, zero value otherwise.
func (o *ScenarioDto) GetElements() []ScenarioDtoElementsInner {
	if o == nil || IsNil(o.Elements) {
		var ret []ScenarioDtoElementsInner
		return ret
	}
	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScenarioDto) GetElementsOk() ([]ScenarioDtoElementsInner, bool) {
	if o == nil || IsNil(o.Elements) {
		return nil, false
	}
	return o.Elements, true
}

// HasElements returns a boolean if a field has been set.
func (o *ScenarioDto) HasElements() bool {
	if o != nil && !IsNil(o.Elements) {
		return true
	}

	return false
}

// SetElements gets a reference to the given []ScenarioDtoElementsInner and assigns it to the Elements field.
func (o *ScenarioDto) SetElements(v []ScenarioDtoElementsInner) {
	o.Elements = v
}

// GetTodos returns the Todos field value if set, zero value otherwise.
func (o *ScenarioDto) GetTodos() []map[string]interface{} {
	if o == nil || IsNil(o.Todos) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Todos
}

// GetTodosOk returns a tuple with the Todos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScenarioDto) GetTodosOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Todos) {
		return nil, false
	}
	return o.Todos, true
}

// HasTodos returns a boolean if a field has been set.
func (o *ScenarioDto) HasTodos() bool {
	if o != nil && !IsNil(o.Todos) {
		return true
	}

	return false
}

// SetTodos gets a reference to the given []map[string]interface{} and assigns it to the Todos field.
func (o *ScenarioDto) SetTodos(v []map[string]interface{}) {
	o.Todos = v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *ScenarioDto) GetArchivedAt() string {
	if o == nil || IsNil(o.ArchivedAt) {
		var ret string
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScenarioDto) GetArchivedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ArchivedAt) {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *ScenarioDto) HasArchivedAt() bool {
	if o != nil && !IsNil(o.ArchivedAt) {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given string and assigns it to the ArchivedAt field.
func (o *ScenarioDto) SetArchivedAt(v string) {
	o.ArchivedAt = &v
}

func (o ScenarioDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScenarioDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["appId"] = o.AppId
	if !IsNil(o.ScenarioTemplateId) {
		toSerialize["scenarioTemplateId"] = o.ScenarioTemplateId
	}
	toSerialize["name"] = o.Name
	toSerialize["key"] = o.Key
	if !IsNil(o.ShortDescription) {
		toSerialize["shortDescription"] = o.ShortDescription
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Elements) {
		toSerialize["elements"] = o.Elements
	}
	if !IsNil(o.Todos) {
		toSerialize["todos"] = o.Todos
	}
	if !IsNil(o.ArchivedAt) {
		toSerialize["archivedAt"] = o.ArchivedAt
	}
	return toSerialize, nil
}

func (o *ScenarioDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"appId",
		"name",
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScenarioDto := _ScenarioDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScenarioDto)

	if err != nil {
		return err
	}

	*o = ScenarioDto(varScenarioDto)

	return err
}

type NullableScenarioDto struct {
	value *ScenarioDto
	isSet bool
}

func (v NullableScenarioDto) Get() *ScenarioDto {
	return v.value
}

func (v *NullableScenarioDto) Set(val *ScenarioDto) {
	v.value = val
	v.isSet = true
}

func (v NullableScenarioDto) IsSet() bool {
	return v.isSet
}

func (v *NullableScenarioDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScenarioDto(val *ScenarioDto) *NullableScenarioDto {
	return &NullableScenarioDto{value: val, isSet: true}
}

func (v NullableScenarioDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScenarioDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


