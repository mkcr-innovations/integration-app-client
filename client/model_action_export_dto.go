/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActionExportDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionExportDto{}

// ActionExportDto struct for ActionExportDto
type ActionExportDto struct {
	IntegrationKeys []string `json:"integrationKeys,omitempty"`
	Name string `json:"name"`
	Key *string `json:"key,omitempty"`
	Type *string `json:"type,omitempty"`
	Config map[string]interface{} `json:"config,omitempty"`
	InputSchema map[string]interface{} `json:"inputSchema,omitempty"`
	OutputMapping map[string]interface{} `json:"outputMapping,omitempty"`
}

type _ActionExportDto ActionExportDto

// NewActionExportDto instantiates a new ActionExportDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionExportDto(name string) *ActionExportDto {
	this := ActionExportDto{}
	this.Name = name
	return &this
}

// NewActionExportDtoWithDefaults instantiates a new ActionExportDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionExportDtoWithDefaults() *ActionExportDto {
	this := ActionExportDto{}
	return &this
}

// GetIntegrationKeys returns the IntegrationKeys field value if set, zero value otherwise.
func (o *ActionExportDto) GetIntegrationKeys() []string {
	if o == nil || IsNil(o.IntegrationKeys) {
		var ret []string
		return ret
	}
	return o.IntegrationKeys
}

// GetIntegrationKeysOk returns a tuple with the IntegrationKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionExportDto) GetIntegrationKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.IntegrationKeys) {
		return nil, false
	}
	return o.IntegrationKeys, true
}

// HasIntegrationKeys returns a boolean if a field has been set.
func (o *ActionExportDto) HasIntegrationKeys() bool {
	if o != nil && !IsNil(o.IntegrationKeys) {
		return true
	}

	return false
}

// SetIntegrationKeys gets a reference to the given []string and assigns it to the IntegrationKeys field.
func (o *ActionExportDto) SetIntegrationKeys(v []string) {
	o.IntegrationKeys = v
}

// GetName returns the Name field value
func (o *ActionExportDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ActionExportDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ActionExportDto) SetName(v string) {
	o.Name = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ActionExportDto) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionExportDto) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ActionExportDto) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ActionExportDto) SetKey(v string) {
	o.Key = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ActionExportDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionExportDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ActionExportDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ActionExportDto) SetType(v string) {
	o.Type = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ActionExportDto) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionExportDto) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ActionExportDto) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *ActionExportDto) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetInputSchema returns the InputSchema field value if set, zero value otherwise.
func (o *ActionExportDto) GetInputSchema() map[string]interface{} {
	if o == nil || IsNil(o.InputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.InputSchema
}

// GetInputSchemaOk returns a tuple with the InputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionExportDto) GetInputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.InputSchema) {
		return map[string]interface{}{}, false
	}
	return o.InputSchema, true
}

// HasInputSchema returns a boolean if a field has been set.
func (o *ActionExportDto) HasInputSchema() bool {
	if o != nil && !IsNil(o.InputSchema) {
		return true
	}

	return false
}

// SetInputSchema gets a reference to the given map[string]interface{} and assigns it to the InputSchema field.
func (o *ActionExportDto) SetInputSchema(v map[string]interface{}) {
	o.InputSchema = v
}

// GetOutputMapping returns the OutputMapping field value if set, zero value otherwise.
func (o *ActionExportDto) GetOutputMapping() map[string]interface{} {
	if o == nil || IsNil(o.OutputMapping) {
		var ret map[string]interface{}
		return ret
	}
	return o.OutputMapping
}

// GetOutputMappingOk returns a tuple with the OutputMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionExportDto) GetOutputMappingOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OutputMapping) {
		return map[string]interface{}{}, false
	}
	return o.OutputMapping, true
}

// HasOutputMapping returns a boolean if a field has been set.
func (o *ActionExportDto) HasOutputMapping() bool {
	if o != nil && !IsNil(o.OutputMapping) {
		return true
	}

	return false
}

// SetOutputMapping gets a reference to the given map[string]interface{} and assigns it to the OutputMapping field.
func (o *ActionExportDto) SetOutputMapping(v map[string]interface{}) {
	o.OutputMapping = v
}

func (o ActionExportDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionExportDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IntegrationKeys) {
		toSerialize["integrationKeys"] = o.IntegrationKeys
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.InputSchema) {
		toSerialize["inputSchema"] = o.InputSchema
	}
	if !IsNil(o.OutputMapping) {
		toSerialize["outputMapping"] = o.OutputMapping
	}
	return toSerialize, nil
}

func (o *ActionExportDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActionExportDto := _ActionExportDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActionExportDto)

	if err != nil {
		return err
	}

	*o = ActionExportDto(varActionExportDto)

	return err
}

type NullableActionExportDto struct {
	value *ActionExportDto
	isSet bool
}

func (v NullableActionExportDto) Get() *ActionExportDto {
	return v.value
}

func (v *NullableActionExportDto) Set(val *ActionExportDto) {
	v.value = val
	v.isSet = true
}

func (v NullableActionExportDto) IsSet() bool {
	return v.isSet
}

func (v *NullableActionExportDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionExportDto(val *ActionExportDto) *NullableActionExportDto {
	return &NullableActionExportDto{value: val, isSet: true}
}

func (v NullableActionExportDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionExportDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


