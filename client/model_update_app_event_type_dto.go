/*
Integration Engine API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UpdateAppEventTypeDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAppEventTypeDto{}

// UpdateAppEventTypeDto struct for UpdateAppEventTypeDto
type UpdateAppEventTypeDto struct {
	Schema map[string]interface{} `json:"schema,omitempty"`
	Example map[string]interface{} `json:"example,omitempty"`
	UserIdFormula map[string]interface{} `json:"userIdFormula,omitempty"`
	SubscribeRequest map[string]interface{} `json:"subscribeRequest,omitempty"`
}

// NewUpdateAppEventTypeDto instantiates a new UpdateAppEventTypeDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAppEventTypeDto() *UpdateAppEventTypeDto {
	this := UpdateAppEventTypeDto{}
	return &this
}

// NewUpdateAppEventTypeDtoWithDefaults instantiates a new UpdateAppEventTypeDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAppEventTypeDtoWithDefaults() *UpdateAppEventTypeDto {
	this := UpdateAppEventTypeDto{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *UpdateAppEventTypeDto) GetSchema() map[string]interface{} {
	if o == nil || IsNil(o.Schema) {
		var ret map[string]interface{}
		return ret
	}
	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAppEventTypeDto) GetSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Schema) {
		return map[string]interface{}{}, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *UpdateAppEventTypeDto) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given map[string]interface{} and assigns it to the Schema field.
func (o *UpdateAppEventTypeDto) SetSchema(v map[string]interface{}) {
	o.Schema = v
}

// GetExample returns the Example field value if set, zero value otherwise.
func (o *UpdateAppEventTypeDto) GetExample() map[string]interface{} {
	if o == nil || IsNil(o.Example) {
		var ret map[string]interface{}
		return ret
	}
	return o.Example
}

// GetExampleOk returns a tuple with the Example field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAppEventTypeDto) GetExampleOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Example) {
		return map[string]interface{}{}, false
	}
	return o.Example, true
}

// HasExample returns a boolean if a field has been set.
func (o *UpdateAppEventTypeDto) HasExample() bool {
	if o != nil && !IsNil(o.Example) {
		return true
	}

	return false
}

// SetExample gets a reference to the given map[string]interface{} and assigns it to the Example field.
func (o *UpdateAppEventTypeDto) SetExample(v map[string]interface{}) {
	o.Example = v
}

// GetUserIdFormula returns the UserIdFormula field value if set, zero value otherwise.
func (o *UpdateAppEventTypeDto) GetUserIdFormula() map[string]interface{} {
	if o == nil || IsNil(o.UserIdFormula) {
		var ret map[string]interface{}
		return ret
	}
	return o.UserIdFormula
}

// GetUserIdFormulaOk returns a tuple with the UserIdFormula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAppEventTypeDto) GetUserIdFormulaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UserIdFormula) {
		return map[string]interface{}{}, false
	}
	return o.UserIdFormula, true
}

// HasUserIdFormula returns a boolean if a field has been set.
func (o *UpdateAppEventTypeDto) HasUserIdFormula() bool {
	if o != nil && !IsNil(o.UserIdFormula) {
		return true
	}

	return false
}

// SetUserIdFormula gets a reference to the given map[string]interface{} and assigns it to the UserIdFormula field.
func (o *UpdateAppEventTypeDto) SetUserIdFormula(v map[string]interface{}) {
	o.UserIdFormula = v
}

// GetSubscribeRequest returns the SubscribeRequest field value if set, zero value otherwise.
func (o *UpdateAppEventTypeDto) GetSubscribeRequest() map[string]interface{} {
	if o == nil || IsNil(o.SubscribeRequest) {
		var ret map[string]interface{}
		return ret
	}
	return o.SubscribeRequest
}

// GetSubscribeRequestOk returns a tuple with the SubscribeRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAppEventTypeDto) GetSubscribeRequestOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SubscribeRequest) {
		return map[string]interface{}{}, false
	}
	return o.SubscribeRequest, true
}

// HasSubscribeRequest returns a boolean if a field has been set.
func (o *UpdateAppEventTypeDto) HasSubscribeRequest() bool {
	if o != nil && !IsNil(o.SubscribeRequest) {
		return true
	}

	return false
}

// SetSubscribeRequest gets a reference to the given map[string]interface{} and assigns it to the SubscribeRequest field.
func (o *UpdateAppEventTypeDto) SetSubscribeRequest(v map[string]interface{}) {
	o.SubscribeRequest = v
}

func (o UpdateAppEventTypeDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAppEventTypeDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	if !IsNil(o.Example) {
		toSerialize["example"] = o.Example
	}
	if !IsNil(o.UserIdFormula) {
		toSerialize["userIdFormula"] = o.UserIdFormula
	}
	if !IsNil(o.SubscribeRequest) {
		toSerialize["subscribeRequest"] = o.SubscribeRequest
	}
	return toSerialize, nil
}

type NullableUpdateAppEventTypeDto struct {
	value *UpdateAppEventTypeDto
	isSet bool
}

func (v NullableUpdateAppEventTypeDto) Get() *UpdateAppEventTypeDto {
	return v.value
}

func (v *NullableUpdateAppEventTypeDto) Set(val *UpdateAppEventTypeDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAppEventTypeDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAppEventTypeDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAppEventTypeDto(val *UpdateAppEventTypeDto) *NullableUpdateAppEventTypeDto {
	return &NullableUpdateAppEventTypeDto{value: val, isSet: true}
}

func (v NullableUpdateAppEventTypeDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAppEventTypeDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


