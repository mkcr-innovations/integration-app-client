/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomerDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerDto{}

// CustomerDto struct for CustomerDto
type CustomerDto struct {
	Id string `json:"id"`
	InternalId string `json:"internalId"`
	Name string `json:"name"`
	IsTest *bool `json:"isTest,omitempty"`
	Fields map[string]interface{} `json:"fields,omitempty"`
	Credentials map[string]interface{} `json:"credentials,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	LastActiveAt *string `json:"lastActiveAt,omitempty"`
	IsBillable *bool `json:"isBillable,omitempty"`
}

type _CustomerDto CustomerDto

// NewCustomerDto instantiates a new CustomerDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerDto(id string, internalId string, name string) *CustomerDto {
	this := CustomerDto{}
	this.Id = id
	this.InternalId = internalId
	this.Name = name
	return &this
}

// NewCustomerDtoWithDefaults instantiates a new CustomerDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerDtoWithDefaults() *CustomerDto {
	this := CustomerDto{}
	return &this
}

// GetId returns the Id field value
func (o *CustomerDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CustomerDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CustomerDto) SetId(v string) {
	o.Id = v
}

// GetInternalId returns the InternalId field value
func (o *CustomerDto) GetInternalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InternalId
}

// GetInternalIdOk returns a tuple with the InternalId field value
// and a boolean to check if the value has been set.
func (o *CustomerDto) GetInternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InternalId, true
}

// SetInternalId sets field value
func (o *CustomerDto) SetInternalId(v string) {
	o.InternalId = v
}

// GetName returns the Name field value
func (o *CustomerDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomerDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomerDto) SetName(v string) {
	o.Name = v
}

// GetIsTest returns the IsTest field value if set, zero value otherwise.
func (o *CustomerDto) GetIsTest() bool {
	if o == nil || IsNil(o.IsTest) {
		var ret bool
		return ret
	}
	return *o.IsTest
}

// GetIsTestOk returns a tuple with the IsTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDto) GetIsTestOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTest) {
		return nil, false
	}
	return o.IsTest, true
}

// HasIsTest returns a boolean if a field has been set.
func (o *CustomerDto) HasIsTest() bool {
	if o != nil && !IsNil(o.IsTest) {
		return true
	}

	return false
}

// SetIsTest gets a reference to the given bool and assigns it to the IsTest field.
func (o *CustomerDto) SetIsTest(v bool) {
	o.IsTest = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *CustomerDto) GetFields() map[string]interface{} {
	if o == nil || IsNil(o.Fields) {
		var ret map[string]interface{}
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDto) GetFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Fields) {
		return map[string]interface{}{}, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *CustomerDto) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]interface{} and assigns it to the Fields field.
func (o *CustomerDto) SetFields(v map[string]interface{}) {
	o.Fields = v
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *CustomerDto) GetCredentials() map[string]interface{} {
	if o == nil || IsNil(o.Credentials) {
		var ret map[string]interface{}
		return ret
	}
	return o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDto) GetCredentialsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Credentials) {
		return map[string]interface{}{}, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *CustomerDto) HasCredentials() bool {
	if o != nil && !IsNil(o.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given map[string]interface{} and assigns it to the Credentials field.
func (o *CustomerDto) SetCredentials(v map[string]interface{}) {
	o.Credentials = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CustomerDto) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDto) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CustomerDto) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *CustomerDto) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetLastActiveAt returns the LastActiveAt field value if set, zero value otherwise.
func (o *CustomerDto) GetLastActiveAt() string {
	if o == nil || IsNil(o.LastActiveAt) {
		var ret string
		return ret
	}
	return *o.LastActiveAt
}

// GetLastActiveAtOk returns a tuple with the LastActiveAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDto) GetLastActiveAtOk() (*string, bool) {
	if o == nil || IsNil(o.LastActiveAt) {
		return nil, false
	}
	return o.LastActiveAt, true
}

// HasLastActiveAt returns a boolean if a field has been set.
func (o *CustomerDto) HasLastActiveAt() bool {
	if o != nil && !IsNil(o.LastActiveAt) {
		return true
	}

	return false
}

// SetLastActiveAt gets a reference to the given string and assigns it to the LastActiveAt field.
func (o *CustomerDto) SetLastActiveAt(v string) {
	o.LastActiveAt = &v
}

// GetIsBillable returns the IsBillable field value if set, zero value otherwise.
func (o *CustomerDto) GetIsBillable() bool {
	if o == nil || IsNil(o.IsBillable) {
		var ret bool
		return ret
	}
	return *o.IsBillable
}

// GetIsBillableOk returns a tuple with the IsBillable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerDto) GetIsBillableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBillable) {
		return nil, false
	}
	return o.IsBillable, true
}

// HasIsBillable returns a boolean if a field has been set.
func (o *CustomerDto) HasIsBillable() bool {
	if o != nil && !IsNil(o.IsBillable) {
		return true
	}

	return false
}

// SetIsBillable gets a reference to the given bool and assigns it to the IsBillable field.
func (o *CustomerDto) SetIsBillable(v bool) {
	o.IsBillable = &v
}

func (o CustomerDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["internalId"] = o.InternalId
	toSerialize["name"] = o.Name
	if !IsNil(o.IsTest) {
		toSerialize["isTest"] = o.IsTest
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.LastActiveAt) {
		toSerialize["lastActiveAt"] = o.LastActiveAt
	}
	if !IsNil(o.IsBillable) {
		toSerialize["isBillable"] = o.IsBillable
	}
	return toSerialize, nil
}

func (o *CustomerDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"internalId",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerDto := _CustomerDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomerDto)

	if err != nil {
		return err
	}

	*o = CustomerDto(varCustomerDto)

	return err
}

type NullableCustomerDto struct {
	value *CustomerDto
	isSet bool
}

func (v NullableCustomerDto) Get() *CustomerDto {
	return v.value
}

func (v *NullableCustomerDto) Set(val *CustomerDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerDto(val *CustomerDto) *NullableCustomerDto {
	return &NullableCustomerDto{value: val, isSet: true}
}

func (v NullableCustomerDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


