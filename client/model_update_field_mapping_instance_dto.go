/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UpdateFieldMappingInstanceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFieldMappingInstanceDto{}

// UpdateFieldMappingInstanceDto struct for UpdateFieldMappingInstanceDto
type UpdateFieldMappingInstanceDto struct {
	ImportValue map[string]interface{} `json:"importValue,omitempty"`
	ExportValue map[string]interface{} `json:"exportValue,omitempty"`
	// Deprecated
	Config map[string]interface{} `json:"config,omitempty"`
}

// NewUpdateFieldMappingInstanceDto instantiates a new UpdateFieldMappingInstanceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFieldMappingInstanceDto() *UpdateFieldMappingInstanceDto {
	this := UpdateFieldMappingInstanceDto{}
	return &this
}

// NewUpdateFieldMappingInstanceDtoWithDefaults instantiates a new UpdateFieldMappingInstanceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFieldMappingInstanceDtoWithDefaults() *UpdateFieldMappingInstanceDto {
	this := UpdateFieldMappingInstanceDto{}
	return &this
}

// GetImportValue returns the ImportValue field value if set, zero value otherwise.
func (o *UpdateFieldMappingInstanceDto) GetImportValue() map[string]interface{} {
	if o == nil || IsNil(o.ImportValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.ImportValue
}

// GetImportValueOk returns a tuple with the ImportValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFieldMappingInstanceDto) GetImportValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ImportValue) {
		return map[string]interface{}{}, false
	}
	return o.ImportValue, true
}

// HasImportValue returns a boolean if a field has been set.
func (o *UpdateFieldMappingInstanceDto) HasImportValue() bool {
	if o != nil && !IsNil(o.ImportValue) {
		return true
	}

	return false
}

// SetImportValue gets a reference to the given map[string]interface{} and assigns it to the ImportValue field.
func (o *UpdateFieldMappingInstanceDto) SetImportValue(v map[string]interface{}) {
	o.ImportValue = v
}

// GetExportValue returns the ExportValue field value if set, zero value otherwise.
func (o *UpdateFieldMappingInstanceDto) GetExportValue() map[string]interface{} {
	if o == nil || IsNil(o.ExportValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExportValue
}

// GetExportValueOk returns a tuple with the ExportValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFieldMappingInstanceDto) GetExportValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExportValue) {
		return map[string]interface{}{}, false
	}
	return o.ExportValue, true
}

// HasExportValue returns a boolean if a field has been set.
func (o *UpdateFieldMappingInstanceDto) HasExportValue() bool {
	if o != nil && !IsNil(o.ExportValue) {
		return true
	}

	return false
}

// SetExportValue gets a reference to the given map[string]interface{} and assigns it to the ExportValue field.
func (o *UpdateFieldMappingInstanceDto) SetExportValue(v map[string]interface{}) {
	o.ExportValue = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
// Deprecated
func (o *UpdateFieldMappingInstanceDto) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UpdateFieldMappingInstanceDto) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *UpdateFieldMappingInstanceDto) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
// Deprecated
func (o *UpdateFieldMappingInstanceDto) SetConfig(v map[string]interface{}) {
	o.Config = v
}

func (o UpdateFieldMappingInstanceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFieldMappingInstanceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ImportValue) {
		toSerialize["importValue"] = o.ImportValue
	}
	if !IsNil(o.ExportValue) {
		toSerialize["exportValue"] = o.ExportValue
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullableUpdateFieldMappingInstanceDto struct {
	value *UpdateFieldMappingInstanceDto
	isSet bool
}

func (v NullableUpdateFieldMappingInstanceDto) Get() *UpdateFieldMappingInstanceDto {
	return v.value
}

func (v *NullableUpdateFieldMappingInstanceDto) Set(val *UpdateFieldMappingInstanceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFieldMappingInstanceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFieldMappingInstanceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFieldMappingInstanceDto(val *UpdateFieldMappingInstanceDto) *NullableUpdateFieldMappingInstanceDto {
	return &NullableUpdateFieldMappingInstanceDto{value: val, isSet: true}
}

func (v NullableUpdateFieldMappingInstanceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFieldMappingInstanceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


