/*
Integration Engine API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionDto{}

// ConnectionDto struct for ConnectionDto
type ConnectionDto struct {
	Id string `json:"id"`
	UserId string `json:"userId"`
	IsTest *bool `json:"isTest,omitempty"`
	User *CustomerDto `json:"user,omitempty"`
	IntegrationId string `json:"integrationId"`
	Integration *IntegrationDto `json:"integration,omitempty"`
	Disconnected *bool `json:"disconnected,omitempty"`
	Credentials *string `json:"credentials,omitempty"`
	// Deprecated
	IsDefunct *bool `json:"isDefunct,omitempty"`
	Error map[string]interface{} `json:"error,omitempty"`
	Name string `json:"name"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
	LastActiveAt string `json:"lastActiveAt"`
	ArchivedAt *string `json:"archivedAt,omitempty"`
}

type _ConnectionDto ConnectionDto

// NewConnectionDto instantiates a new ConnectionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionDto(id string, userId string, integrationId string, name string, createdAt string, updatedAt string, lastActiveAt string) *ConnectionDto {
	this := ConnectionDto{}
	this.Id = id
	this.UserId = userId
	this.IntegrationId = integrationId
	this.Name = name
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.LastActiveAt = lastActiveAt
	return &this
}

// NewConnectionDtoWithDefaults instantiates a new ConnectionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionDtoWithDefaults() *ConnectionDto {
	this := ConnectionDto{}
	return &this
}

// GetId returns the Id field value
func (o *ConnectionDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConnectionDto) SetId(v string) {
	o.Id = v
}

// GetUserId returns the UserId field value
func (o *ConnectionDto) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ConnectionDto) SetUserId(v string) {
	o.UserId = v
}

// GetIsTest returns the IsTest field value if set, zero value otherwise.
func (o *ConnectionDto) GetIsTest() bool {
	if o == nil || IsNil(o.IsTest) {
		var ret bool
		return ret
	}
	return *o.IsTest
}

// GetIsTestOk returns a tuple with the IsTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetIsTestOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTest) {
		return nil, false
	}
	return o.IsTest, true
}

// HasIsTest returns a boolean if a field has been set.
func (o *ConnectionDto) HasIsTest() bool {
	if o != nil && !IsNil(o.IsTest) {
		return true
	}

	return false
}

// SetIsTest gets a reference to the given bool and assigns it to the IsTest field.
func (o *ConnectionDto) SetIsTest(v bool) {
	o.IsTest = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ConnectionDto) GetUser() CustomerDto {
	if o == nil || IsNil(o.User) {
		var ret CustomerDto
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetUserOk() (*CustomerDto, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ConnectionDto) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given CustomerDto and assigns it to the User field.
func (o *ConnectionDto) SetUser(v CustomerDto) {
	o.User = &v
}

// GetIntegrationId returns the IntegrationId field value
func (o *ConnectionDto) GetIntegrationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetIntegrationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegrationId, true
}

// SetIntegrationId sets field value
func (o *ConnectionDto) SetIntegrationId(v string) {
	o.IntegrationId = v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *ConnectionDto) GetIntegration() IntegrationDto {
	if o == nil || IsNil(o.Integration) {
		var ret IntegrationDto
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetIntegrationOk() (*IntegrationDto, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *ConnectionDto) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given IntegrationDto and assigns it to the Integration field.
func (o *ConnectionDto) SetIntegration(v IntegrationDto) {
	o.Integration = &v
}

// GetDisconnected returns the Disconnected field value if set, zero value otherwise.
func (o *ConnectionDto) GetDisconnected() bool {
	if o == nil || IsNil(o.Disconnected) {
		var ret bool
		return ret
	}
	return *o.Disconnected
}

// GetDisconnectedOk returns a tuple with the Disconnected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetDisconnectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Disconnected) {
		return nil, false
	}
	return o.Disconnected, true
}

// HasDisconnected returns a boolean if a field has been set.
func (o *ConnectionDto) HasDisconnected() bool {
	if o != nil && !IsNil(o.Disconnected) {
		return true
	}

	return false
}

// SetDisconnected gets a reference to the given bool and assigns it to the Disconnected field.
func (o *ConnectionDto) SetDisconnected(v bool) {
	o.Disconnected = &v
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *ConnectionDto) GetCredentials() string {
	if o == nil || IsNil(o.Credentials) {
		var ret string
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetCredentialsOk() (*string, bool) {
	if o == nil || IsNil(o.Credentials) {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *ConnectionDto) HasCredentials() bool {
	if o != nil && !IsNil(o.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given string and assigns it to the Credentials field.
func (o *ConnectionDto) SetCredentials(v string) {
	o.Credentials = &v
}

// GetIsDefunct returns the IsDefunct field value if set, zero value otherwise.
// Deprecated
func (o *ConnectionDto) GetIsDefunct() bool {
	if o == nil || IsNil(o.IsDefunct) {
		var ret bool
		return ret
	}
	return *o.IsDefunct
}

// GetIsDefunctOk returns a tuple with the IsDefunct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ConnectionDto) GetIsDefunctOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefunct) {
		return nil, false
	}
	return o.IsDefunct, true
}

// HasIsDefunct returns a boolean if a field has been set.
func (o *ConnectionDto) HasIsDefunct() bool {
	if o != nil && !IsNil(o.IsDefunct) {
		return true
	}

	return false
}

// SetIsDefunct gets a reference to the given bool and assigns it to the IsDefunct field.
// Deprecated
func (o *ConnectionDto) SetIsDefunct(v bool) {
	o.IsDefunct = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ConnectionDto) GetError() map[string]interface{} {
	if o == nil || IsNil(o.Error) {
		var ret map[string]interface{}
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetErrorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Error) {
		return map[string]interface{}{}, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ConnectionDto) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given map[string]interface{} and assigns it to the Error field.
func (o *ConnectionDto) SetError(v map[string]interface{}) {
	o.Error = v
}

// GetName returns the Name field value
func (o *ConnectionDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectionDto) SetName(v string) {
	o.Name = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ConnectionDto) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ConnectionDto) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ConnectionDto) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ConnectionDto) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetLastActiveAt returns the LastActiveAt field value
func (o *ConnectionDto) GetLastActiveAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastActiveAt
}

// GetLastActiveAtOk returns a tuple with the LastActiveAt field value
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetLastActiveAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastActiveAt, true
}

// SetLastActiveAt sets field value
func (o *ConnectionDto) SetLastActiveAt(v string) {
	o.LastActiveAt = v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *ConnectionDto) GetArchivedAt() string {
	if o == nil || IsNil(o.ArchivedAt) {
		var ret string
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionDto) GetArchivedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ArchivedAt) {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *ConnectionDto) HasArchivedAt() bool {
	if o != nil && !IsNil(o.ArchivedAt) {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given string and assigns it to the ArchivedAt field.
func (o *ConnectionDto) SetArchivedAt(v string) {
	o.ArchivedAt = &v
}

func (o ConnectionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["userId"] = o.UserId
	if !IsNil(o.IsTest) {
		toSerialize["isTest"] = o.IsTest
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	toSerialize["integrationId"] = o.IntegrationId
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.Disconnected) {
		toSerialize["disconnected"] = o.Disconnected
	}
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	if !IsNil(o.IsDefunct) {
		toSerialize["isDefunct"] = o.IsDefunct
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	toSerialize["name"] = o.Name
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["lastActiveAt"] = o.LastActiveAt
	if !IsNil(o.ArchivedAt) {
		toSerialize["archivedAt"] = o.ArchivedAt
	}
	return toSerialize, nil
}

func (o *ConnectionDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"userId",
		"integrationId",
		"name",
		"createdAt",
		"updatedAt",
		"lastActiveAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionDto := _ConnectionDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectionDto)

	if err != nil {
		return err
	}

	*o = ConnectionDto(varConnectionDto)

	return err
}

type NullableConnectionDto struct {
	value *ConnectionDto
	isSet bool
}

func (v NullableConnectionDto) Get() *ConnectionDto {
	return v.value
}

func (v *NullableConnectionDto) Set(val *ConnectionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionDto(val *ConnectionDto) *NullableConnectionDto {
	return &NullableConnectionDto{value: val, isSet: true}
}

func (v NullableConnectionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


