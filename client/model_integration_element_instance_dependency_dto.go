/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IntegrationElementInstanceDependencyDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationElementInstanceDependencyDto{}

// IntegrationElementInstanceDependencyDto struct for IntegrationElementInstanceDependencyDto
type IntegrationElementInstanceDependencyDto struct {
	Type string `json:"type"`
	InstanceId *string `json:"instanceId,omitempty"`
	Instance map[string]interface{} `json:"instance,omitempty"`
}

type _IntegrationElementInstanceDependencyDto IntegrationElementInstanceDependencyDto

// NewIntegrationElementInstanceDependencyDto instantiates a new IntegrationElementInstanceDependencyDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationElementInstanceDependencyDto(type_ string) *IntegrationElementInstanceDependencyDto {
	this := IntegrationElementInstanceDependencyDto{}
	this.Type = type_
	return &this
}

// NewIntegrationElementInstanceDependencyDtoWithDefaults instantiates a new IntegrationElementInstanceDependencyDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationElementInstanceDependencyDtoWithDefaults() *IntegrationElementInstanceDependencyDto {
	this := IntegrationElementInstanceDependencyDto{}
	return &this
}

// GetType returns the Type field value
func (o *IntegrationElementInstanceDependencyDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IntegrationElementInstanceDependencyDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IntegrationElementInstanceDependencyDto) SetType(v string) {
	o.Type = v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *IntegrationElementInstanceDependencyDto) GetInstanceId() string {
	if o == nil || IsNil(o.InstanceId) {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationElementInstanceDependencyDto) GetInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *IntegrationElementInstanceDependencyDto) HasInstanceId() bool {
	if o != nil && !IsNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *IntegrationElementInstanceDependencyDto) SetInstanceId(v string) {
	o.InstanceId = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *IntegrationElementInstanceDependencyDto) GetInstance() map[string]interface{} {
	if o == nil || IsNil(o.Instance) {
		var ret map[string]interface{}
		return ret
	}
	return o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationElementInstanceDependencyDto) GetInstanceOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Instance) {
		return map[string]interface{}{}, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *IntegrationElementInstanceDependencyDto) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given map[string]interface{} and assigns it to the Instance field.
func (o *IntegrationElementInstanceDependencyDto) SetInstance(v map[string]interface{}) {
	o.Instance = v
}

func (o IntegrationElementInstanceDependencyDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationElementInstanceDependencyDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.InstanceId) {
		toSerialize["instanceId"] = o.InstanceId
	}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	return toSerialize, nil
}

func (o *IntegrationElementInstanceDependencyDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIntegrationElementInstanceDependencyDto := _IntegrationElementInstanceDependencyDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIntegrationElementInstanceDependencyDto)

	if err != nil {
		return err
	}

	*o = IntegrationElementInstanceDependencyDto(varIntegrationElementInstanceDependencyDto)

	return err
}

type NullableIntegrationElementInstanceDependencyDto struct {
	value *IntegrationElementInstanceDependencyDto
	isSet bool
}

func (v NullableIntegrationElementInstanceDependencyDto) Get() *IntegrationElementInstanceDependencyDto {
	return v.value
}

func (v *NullableIntegrationElementInstanceDependencyDto) Set(val *IntegrationElementInstanceDependencyDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationElementInstanceDependencyDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationElementInstanceDependencyDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationElementInstanceDependencyDto(val *IntegrationElementInstanceDependencyDto) *NullableIntegrationElementInstanceDependencyDto {
	return &NullableIntegrationElementInstanceDependencyDto{value: val, isSet: true}
}

func (v NullableIntegrationElementInstanceDependencyDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationElementInstanceDependencyDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


