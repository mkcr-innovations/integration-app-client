/*
Integration Engine API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublishConnectorToIntegrationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublishConnectorToIntegrationDto{}

// PublishConnectorToIntegrationDto struct for PublishConnectorToIntegrationDto
type PublishConnectorToIntegrationDto struct {
	ConnectorId string `json:"connectorId"`
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	EncryptedParameters map[string]interface{} `json:"encryptedParameters,omitempty"`
}

type _PublishConnectorToIntegrationDto PublishConnectorToIntegrationDto

// NewPublishConnectorToIntegrationDto instantiates a new PublishConnectorToIntegrationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublishConnectorToIntegrationDto(connectorId string) *PublishConnectorToIntegrationDto {
	this := PublishConnectorToIntegrationDto{}
	this.ConnectorId = connectorId
	return &this
}

// NewPublishConnectorToIntegrationDtoWithDefaults instantiates a new PublishConnectorToIntegrationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublishConnectorToIntegrationDtoWithDefaults() *PublishConnectorToIntegrationDto {
	this := PublishConnectorToIntegrationDto{}
	return &this
}

// GetConnectorId returns the ConnectorId field value
func (o *PublishConnectorToIntegrationDto) GetConnectorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value
// and a boolean to check if the value has been set.
func (o *PublishConnectorToIntegrationDto) GetConnectorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectorId, true
}

// SetConnectorId sets field value
func (o *PublishConnectorToIntegrationDto) SetConnectorId(v string) {
	o.ConnectorId = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *PublishConnectorToIntegrationDto) GetParameters() map[string]interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishConnectorToIntegrationDto) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *PublishConnectorToIntegrationDto) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *PublishConnectorToIntegrationDto) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetEncryptedParameters returns the EncryptedParameters field value if set, zero value otherwise.
func (o *PublishConnectorToIntegrationDto) GetEncryptedParameters() map[string]interface{} {
	if o == nil || IsNil(o.EncryptedParameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.EncryptedParameters
}

// GetEncryptedParametersOk returns a tuple with the EncryptedParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishConnectorToIntegrationDto) GetEncryptedParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.EncryptedParameters) {
		return map[string]interface{}{}, false
	}
	return o.EncryptedParameters, true
}

// HasEncryptedParameters returns a boolean if a field has been set.
func (o *PublishConnectorToIntegrationDto) HasEncryptedParameters() bool {
	if o != nil && !IsNil(o.EncryptedParameters) {
		return true
	}

	return false
}

// SetEncryptedParameters gets a reference to the given map[string]interface{} and assigns it to the EncryptedParameters field.
func (o *PublishConnectorToIntegrationDto) SetEncryptedParameters(v map[string]interface{}) {
	o.EncryptedParameters = v
}

func (o PublishConnectorToIntegrationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublishConnectorToIntegrationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectorId"] = o.ConnectorId
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.EncryptedParameters) {
		toSerialize["encryptedParameters"] = o.EncryptedParameters
	}
	return toSerialize, nil
}

func (o *PublishConnectorToIntegrationDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectorId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublishConnectorToIntegrationDto := _PublishConnectorToIntegrationDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublishConnectorToIntegrationDto)

	if err != nil {
		return err
	}

	*o = PublishConnectorToIntegrationDto(varPublishConnectorToIntegrationDto)

	return err
}

type NullablePublishConnectorToIntegrationDto struct {
	value *PublishConnectorToIntegrationDto
	isSet bool
}

func (v NullablePublishConnectorToIntegrationDto) Get() *PublishConnectorToIntegrationDto {
	return v.value
}

func (v *NullablePublishConnectorToIntegrationDto) Set(val *PublishConnectorToIntegrationDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishConnectorToIntegrationDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishConnectorToIntegrationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishConnectorToIntegrationDto(val *PublishConnectorToIntegrationDto) *NullablePublishConnectorToIntegrationDto {
	return &NullablePublishConnectorToIntegrationDto{value: val, isSet: true}
}

func (v NullablePublishConnectorToIntegrationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishConnectorToIntegrationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


