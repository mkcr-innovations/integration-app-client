/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppDataSchemaExportDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDataSchemaExportDto{}

// AppDataSchemaExportDto struct for AppDataSchemaExportDto
type AppDataSchemaExportDto struct {
	Key *string `json:"key,omitempty"`
	Name string `json:"name"`
	Schema map[string]interface{} `json:"schema,omitempty"`
	Code *string `json:"code,omitempty"`
}

type _AppDataSchemaExportDto AppDataSchemaExportDto

// NewAppDataSchemaExportDto instantiates a new AppDataSchemaExportDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDataSchemaExportDto(name string) *AppDataSchemaExportDto {
	this := AppDataSchemaExportDto{}
	this.Name = name
	return &this
}

// NewAppDataSchemaExportDtoWithDefaults instantiates a new AppDataSchemaExportDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDataSchemaExportDtoWithDefaults() *AppDataSchemaExportDto {
	this := AppDataSchemaExportDto{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *AppDataSchemaExportDto) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataSchemaExportDto) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *AppDataSchemaExportDto) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *AppDataSchemaExportDto) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value
func (o *AppDataSchemaExportDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppDataSchemaExportDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppDataSchemaExportDto) SetName(v string) {
	o.Name = v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *AppDataSchemaExportDto) GetSchema() map[string]interface{} {
	if o == nil || IsNil(o.Schema) {
		var ret map[string]interface{}
		return ret
	}
	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataSchemaExportDto) GetSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Schema) {
		return map[string]interface{}{}, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *AppDataSchemaExportDto) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given map[string]interface{} and assigns it to the Schema field.
func (o *AppDataSchemaExportDto) SetSchema(v map[string]interface{}) {
	o.Schema = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AppDataSchemaExportDto) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataSchemaExportDto) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AppDataSchemaExportDto) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AppDataSchemaExportDto) SetCode(v string) {
	o.Code = &v
}

func (o AppDataSchemaExportDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDataSchemaExportDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

func (o *AppDataSchemaExportDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppDataSchemaExportDto := _AppDataSchemaExportDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppDataSchemaExportDto)

	if err != nil {
		return err
	}

	*o = AppDataSchemaExportDto(varAppDataSchemaExportDto)

	return err
}

type NullableAppDataSchemaExportDto struct {
	value *AppDataSchemaExportDto
	isSet bool
}

func (v NullableAppDataSchemaExportDto) Get() *AppDataSchemaExportDto {
	return v.value
}

func (v *NullableAppDataSchemaExportDto) Set(val *AppDataSchemaExportDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDataSchemaExportDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDataSchemaExportDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDataSchemaExportDto(val *AppDataSchemaExportDto) *NullableAppDataSchemaExportDto {
	return &NullableAppDataSchemaExportDto{value: val, isSet: true}
}

func (v NullableAppDataSchemaExportDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDataSchemaExportDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


