/*
Integration Engine API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActionInstanceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionInstanceDto{}

// ActionInstanceDto struct for ActionInstanceDto
type ActionInstanceDto struct {
	Type string `json:"type"`
	InputSchema map[string]interface{} `json:"inputSchema,omitempty"`
	Config map[string]interface{} `json:"config,omitempty"`
	DefaultOutputSchema map[string]interface{} `json:"defaultOutputSchema,omitempty"`
	OutputSchema map[string]interface{} `json:"outputSchema,omitempty"`
	State string `json:"state"`
	Dependencies []IntegrationElementInstanceDependencyDto `json:"dependencies"`
	Errors []map[string]interface{} `json:"errors,omitempty"`
}

type _ActionInstanceDto ActionInstanceDto

// NewActionInstanceDto instantiates a new ActionInstanceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionInstanceDto(type_ string, state string, dependencies []IntegrationElementInstanceDependencyDto) *ActionInstanceDto {
	this := ActionInstanceDto{}
	this.Type = type_
	this.State = state
	this.Dependencies = dependencies
	return &this
}

// NewActionInstanceDtoWithDefaults instantiates a new ActionInstanceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionInstanceDtoWithDefaults() *ActionInstanceDto {
	this := ActionInstanceDto{}
	return &this
}

// GetType returns the Type field value
func (o *ActionInstanceDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ActionInstanceDto) SetType(v string) {
	o.Type = v
}

// GetInputSchema returns the InputSchema field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetInputSchema() map[string]interface{} {
	if o == nil || IsNil(o.InputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.InputSchema
}

// GetInputSchemaOk returns a tuple with the InputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetInputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.InputSchema) {
		return map[string]interface{}{}, false
	}
	return o.InputSchema, true
}

// HasInputSchema returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasInputSchema() bool {
	if o != nil && !IsNil(o.InputSchema) {
		return true
	}

	return false
}

// SetInputSchema gets a reference to the given map[string]interface{} and assigns it to the InputSchema field.
func (o *ActionInstanceDto) SetInputSchema(v map[string]interface{}) {
	o.InputSchema = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *ActionInstanceDto) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetDefaultOutputSchema returns the DefaultOutputSchema field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetDefaultOutputSchema() map[string]interface{} {
	if o == nil || IsNil(o.DefaultOutputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultOutputSchema
}

// GetDefaultOutputSchemaOk returns a tuple with the DefaultOutputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetDefaultOutputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultOutputSchema) {
		return map[string]interface{}{}, false
	}
	return o.DefaultOutputSchema, true
}

// HasDefaultOutputSchema returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasDefaultOutputSchema() bool {
	if o != nil && !IsNil(o.DefaultOutputSchema) {
		return true
	}

	return false
}

// SetDefaultOutputSchema gets a reference to the given map[string]interface{} and assigns it to the DefaultOutputSchema field.
func (o *ActionInstanceDto) SetDefaultOutputSchema(v map[string]interface{}) {
	o.DefaultOutputSchema = v
}

// GetOutputSchema returns the OutputSchema field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetOutputSchema() map[string]interface{} {
	if o == nil || IsNil(o.OutputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.OutputSchema
}

// GetOutputSchemaOk returns a tuple with the OutputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetOutputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OutputSchema) {
		return map[string]interface{}{}, false
	}
	return o.OutputSchema, true
}

// HasOutputSchema returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasOutputSchema() bool {
	if o != nil && !IsNil(o.OutputSchema) {
		return true
	}

	return false
}

// SetOutputSchema gets a reference to the given map[string]interface{} and assigns it to the OutputSchema field.
func (o *ActionInstanceDto) SetOutputSchema(v map[string]interface{}) {
	o.OutputSchema = v
}

// GetState returns the State field value
func (o *ActionInstanceDto) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ActionInstanceDto) SetState(v string) {
	o.State = v
}

// GetDependencies returns the Dependencies field value
func (o *ActionInstanceDto) GetDependencies() []IntegrationElementInstanceDependencyDto {
	if o == nil {
		var ret []IntegrationElementInstanceDependencyDto
		return ret
	}

	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetDependenciesOk() ([]IntegrationElementInstanceDependencyDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dependencies, true
}

// SetDependencies sets field value
func (o *ActionInstanceDto) SetDependencies(v []IntegrationElementInstanceDependencyDto) {
	o.Dependencies = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetErrors() []map[string]interface{} {
	if o == nil || IsNil(o.Errors) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetErrorsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []map[string]interface{} and assigns it to the Errors field.
func (o *ActionInstanceDto) SetErrors(v []map[string]interface{}) {
	o.Errors = v
}

func (o ActionInstanceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionInstanceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.InputSchema) {
		toSerialize["inputSchema"] = o.InputSchema
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.DefaultOutputSchema) {
		toSerialize["defaultOutputSchema"] = o.DefaultOutputSchema
	}
	if !IsNil(o.OutputSchema) {
		toSerialize["outputSchema"] = o.OutputSchema
	}
	toSerialize["state"] = o.State
	toSerialize["dependencies"] = o.Dependencies
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

func (o *ActionInstanceDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"state",
		"dependencies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActionInstanceDto := _ActionInstanceDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActionInstanceDto)

	if err != nil {
		return err
	}

	*o = ActionInstanceDto(varActionInstanceDto)

	return err
}

type NullableActionInstanceDto struct {
	value *ActionInstanceDto
	isSet bool
}

func (v NullableActionInstanceDto) Get() *ActionInstanceDto {
	return v.value
}

func (v *NullableActionInstanceDto) Set(val *ActionInstanceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableActionInstanceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableActionInstanceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionInstanceDto(val *ActionInstanceDto) *NullableActionInstanceDto {
	return &NullableActionInstanceDto{value: val, isSet: true}
}

func (v NullableActionInstanceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionInstanceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


