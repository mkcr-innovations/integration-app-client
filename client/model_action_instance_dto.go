/*
Integration.app API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActionInstanceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionInstanceDto{}

// ActionInstanceDto struct for ActionInstanceDto
type ActionInstanceDto struct {
	Id string `json:"id"`
	Name string `json:"name"`
	InstanceKey *string `json:"instanceKey,omitempty"`
	UserId *string `json:"userId,omitempty"`
	User *CustomerDto `json:"user,omitempty"`
	ConnectionId *string `json:"connectionId,omitempty"`
	Connection *ConnectionDto `json:"connection,omitempty"`
	IntegrationId *string `json:"integrationId,omitempty"`
	Integration *IntegrationDto `json:"integration,omitempty"`
	ParentId *string `json:"parentId,omitempty"`
	ParentRevision *string `json:"parentRevision,omitempty"`
	Revision string `json:"revision"`
	IsCustomized *bool `json:"isCustomized,omitempty"`
	IsOutdated *bool `json:"isOutdated,omitempty"`
	Error map[string]interface{} `json:"error,omitempty"`
	ArchivedAt *string `json:"archivedAt,omitempty"`
	Parent *ActionDto `json:"parent,omitempty"`
	Type string `json:"type"`
	InputSchema map[string]interface{} `json:"inputSchema,omitempty"`
	Config map[string]interface{} `json:"config,omitempty"`
	DefaultOutputSchema map[string]interface{} `json:"defaultOutputSchema,omitempty"`
	OutputSchema map[string]interface{} `json:"outputSchema,omitempty"`
	State string `json:"state"`
	Dependencies []IntegrationElementInstanceDependencyDto `json:"dependencies,omitempty"`
	Errors []map[string]interface{} `json:"errors,omitempty"`
}

type _ActionInstanceDto ActionInstanceDto

// NewActionInstanceDto instantiates a new ActionInstanceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionInstanceDto(id string, name string, revision string, type_ string, state string) *ActionInstanceDto {
	this := ActionInstanceDto{}
	this.Id = id
	this.Name = name
	this.Revision = revision
	this.Type = type_
	this.State = state
	return &this
}

// NewActionInstanceDtoWithDefaults instantiates a new ActionInstanceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionInstanceDtoWithDefaults() *ActionInstanceDto {
	this := ActionInstanceDto{}
	return &this
}

// GetId returns the Id field value
func (o *ActionInstanceDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActionInstanceDto) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ActionInstanceDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ActionInstanceDto) SetName(v string) {
	o.Name = v
}

// GetInstanceKey returns the InstanceKey field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetInstanceKey() string {
	if o == nil || IsNil(o.InstanceKey) {
		var ret string
		return ret
	}
	return *o.InstanceKey
}

// GetInstanceKeyOk returns a tuple with the InstanceKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetInstanceKeyOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceKey) {
		return nil, false
	}
	return o.InstanceKey, true
}

// HasInstanceKey returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasInstanceKey() bool {
	if o != nil && !IsNil(o.InstanceKey) {
		return true
	}

	return false
}

// SetInstanceKey gets a reference to the given string and assigns it to the InstanceKey field.
func (o *ActionInstanceDto) SetInstanceKey(v string) {
	o.InstanceKey = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ActionInstanceDto) SetUserId(v string) {
	o.UserId = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetUser() CustomerDto {
	if o == nil || IsNil(o.User) {
		var ret CustomerDto
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetUserOk() (*CustomerDto, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given CustomerDto and assigns it to the User field.
func (o *ActionInstanceDto) SetUser(v CustomerDto) {
	o.User = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *ActionInstanceDto) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetConnection() ConnectionDto {
	if o == nil || IsNil(o.Connection) {
		var ret ConnectionDto
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetConnectionOk() (*ConnectionDto, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given ConnectionDto and assigns it to the Connection field.
func (o *ActionInstanceDto) SetConnection(v ConnectionDto) {
	o.Connection = &v
}

// GetIntegrationId returns the IntegrationId field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetIntegrationId() string {
	if o == nil || IsNil(o.IntegrationId) {
		var ret string
		return ret
	}
	return *o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetIntegrationIdOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationId) {
		return nil, false
	}
	return o.IntegrationId, true
}

// HasIntegrationId returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasIntegrationId() bool {
	if o != nil && !IsNil(o.IntegrationId) {
		return true
	}

	return false
}

// SetIntegrationId gets a reference to the given string and assigns it to the IntegrationId field.
func (o *ActionInstanceDto) SetIntegrationId(v string) {
	o.IntegrationId = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetIntegration() IntegrationDto {
	if o == nil || IsNil(o.Integration) {
		var ret IntegrationDto
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetIntegrationOk() (*IntegrationDto, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given IntegrationDto and assigns it to the Integration field.
func (o *ActionInstanceDto) SetIntegration(v IntegrationDto) {
	o.Integration = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *ActionInstanceDto) SetParentId(v string) {
	o.ParentId = &v
}

// GetParentRevision returns the ParentRevision field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetParentRevision() string {
	if o == nil || IsNil(o.ParentRevision) {
		var ret string
		return ret
	}
	return *o.ParentRevision
}

// GetParentRevisionOk returns a tuple with the ParentRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetParentRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.ParentRevision) {
		return nil, false
	}
	return o.ParentRevision, true
}

// HasParentRevision returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasParentRevision() bool {
	if o != nil && !IsNil(o.ParentRevision) {
		return true
	}

	return false
}

// SetParentRevision gets a reference to the given string and assigns it to the ParentRevision field.
func (o *ActionInstanceDto) SetParentRevision(v string) {
	o.ParentRevision = &v
}

// GetRevision returns the Revision field value
func (o *ActionInstanceDto) GetRevision() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetRevisionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *ActionInstanceDto) SetRevision(v string) {
	o.Revision = v
}

// GetIsCustomized returns the IsCustomized field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetIsCustomized() bool {
	if o == nil || IsNil(o.IsCustomized) {
		var ret bool
		return ret
	}
	return *o.IsCustomized
}

// GetIsCustomizedOk returns a tuple with the IsCustomized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetIsCustomizedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCustomized) {
		return nil, false
	}
	return o.IsCustomized, true
}

// HasIsCustomized returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasIsCustomized() bool {
	if o != nil && !IsNil(o.IsCustomized) {
		return true
	}

	return false
}

// SetIsCustomized gets a reference to the given bool and assigns it to the IsCustomized field.
func (o *ActionInstanceDto) SetIsCustomized(v bool) {
	o.IsCustomized = &v
}

// GetIsOutdated returns the IsOutdated field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetIsOutdated() bool {
	if o == nil || IsNil(o.IsOutdated) {
		var ret bool
		return ret
	}
	return *o.IsOutdated
}

// GetIsOutdatedOk returns a tuple with the IsOutdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetIsOutdatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOutdated) {
		return nil, false
	}
	return o.IsOutdated, true
}

// HasIsOutdated returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasIsOutdated() bool {
	if o != nil && !IsNil(o.IsOutdated) {
		return true
	}

	return false
}

// SetIsOutdated gets a reference to the given bool and assigns it to the IsOutdated field.
func (o *ActionInstanceDto) SetIsOutdated(v bool) {
	o.IsOutdated = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetError() map[string]interface{} {
	if o == nil || IsNil(o.Error) {
		var ret map[string]interface{}
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetErrorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Error) {
		return map[string]interface{}{}, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given map[string]interface{} and assigns it to the Error field.
func (o *ActionInstanceDto) SetError(v map[string]interface{}) {
	o.Error = v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetArchivedAt() string {
	if o == nil || IsNil(o.ArchivedAt) {
		var ret string
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetArchivedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ArchivedAt) {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasArchivedAt() bool {
	if o != nil && !IsNil(o.ArchivedAt) {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given string and assigns it to the ArchivedAt field.
func (o *ActionInstanceDto) SetArchivedAt(v string) {
	o.ArchivedAt = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetParent() ActionDto {
	if o == nil || IsNil(o.Parent) {
		var ret ActionDto
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetParentOk() (*ActionDto, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given ActionDto and assigns it to the Parent field.
func (o *ActionInstanceDto) SetParent(v ActionDto) {
	o.Parent = &v
}

// GetType returns the Type field value
func (o *ActionInstanceDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ActionInstanceDto) SetType(v string) {
	o.Type = v
}

// GetInputSchema returns the InputSchema field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetInputSchema() map[string]interface{} {
	if o == nil || IsNil(o.InputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.InputSchema
}

// GetInputSchemaOk returns a tuple with the InputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetInputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.InputSchema) {
		return map[string]interface{}{}, false
	}
	return o.InputSchema, true
}

// HasInputSchema returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasInputSchema() bool {
	if o != nil && !IsNil(o.InputSchema) {
		return true
	}

	return false
}

// SetInputSchema gets a reference to the given map[string]interface{} and assigns it to the InputSchema field.
func (o *ActionInstanceDto) SetInputSchema(v map[string]interface{}) {
	o.InputSchema = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *ActionInstanceDto) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetDefaultOutputSchema returns the DefaultOutputSchema field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetDefaultOutputSchema() map[string]interface{} {
	if o == nil || IsNil(o.DefaultOutputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultOutputSchema
}

// GetDefaultOutputSchemaOk returns a tuple with the DefaultOutputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetDefaultOutputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultOutputSchema) {
		return map[string]interface{}{}, false
	}
	return o.DefaultOutputSchema, true
}

// HasDefaultOutputSchema returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasDefaultOutputSchema() bool {
	if o != nil && !IsNil(o.DefaultOutputSchema) {
		return true
	}

	return false
}

// SetDefaultOutputSchema gets a reference to the given map[string]interface{} and assigns it to the DefaultOutputSchema field.
func (o *ActionInstanceDto) SetDefaultOutputSchema(v map[string]interface{}) {
	o.DefaultOutputSchema = v
}

// GetOutputSchema returns the OutputSchema field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetOutputSchema() map[string]interface{} {
	if o == nil || IsNil(o.OutputSchema) {
		var ret map[string]interface{}
		return ret
	}
	return o.OutputSchema
}

// GetOutputSchemaOk returns a tuple with the OutputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetOutputSchemaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OutputSchema) {
		return map[string]interface{}{}, false
	}
	return o.OutputSchema, true
}

// HasOutputSchema returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasOutputSchema() bool {
	if o != nil && !IsNil(o.OutputSchema) {
		return true
	}

	return false
}

// SetOutputSchema gets a reference to the given map[string]interface{} and assigns it to the OutputSchema field.
func (o *ActionInstanceDto) SetOutputSchema(v map[string]interface{}) {
	o.OutputSchema = v
}

// GetState returns the State field value
func (o *ActionInstanceDto) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ActionInstanceDto) SetState(v string) {
	o.State = v
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetDependencies() []IntegrationElementInstanceDependencyDto {
	if o == nil || IsNil(o.Dependencies) {
		var ret []IntegrationElementInstanceDependencyDto
		return ret
	}
	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetDependenciesOk() ([]IntegrationElementInstanceDependencyDto, bool) {
	if o == nil || IsNil(o.Dependencies) {
		return nil, false
	}
	return o.Dependencies, true
}

// HasDependencies returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasDependencies() bool {
	if o != nil && !IsNil(o.Dependencies) {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given []IntegrationElementInstanceDependencyDto and assigns it to the Dependencies field.
func (o *ActionInstanceDto) SetDependencies(v []IntegrationElementInstanceDependencyDto) {
	o.Dependencies = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ActionInstanceDto) GetErrors() []map[string]interface{} {
	if o == nil || IsNil(o.Errors) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionInstanceDto) GetErrorsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ActionInstanceDto) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []map[string]interface{} and assigns it to the Errors field.
func (o *ActionInstanceDto) SetErrors(v []map[string]interface{}) {
	o.Errors = v
}

func (o ActionInstanceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionInstanceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.InstanceKey) {
		toSerialize["instanceKey"] = o.InstanceKey
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connectionId"] = o.ConnectionId
	}
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	if !IsNil(o.IntegrationId) {
		toSerialize["integrationId"] = o.IntegrationId
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.ParentRevision) {
		toSerialize["parentRevision"] = o.ParentRevision
	}
	toSerialize["revision"] = o.Revision
	if !IsNil(o.IsCustomized) {
		toSerialize["isCustomized"] = o.IsCustomized
	}
	if !IsNil(o.IsOutdated) {
		toSerialize["isOutdated"] = o.IsOutdated
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.ArchivedAt) {
		toSerialize["archivedAt"] = o.ArchivedAt
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.InputSchema) {
		toSerialize["inputSchema"] = o.InputSchema
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.DefaultOutputSchema) {
		toSerialize["defaultOutputSchema"] = o.DefaultOutputSchema
	}
	if !IsNil(o.OutputSchema) {
		toSerialize["outputSchema"] = o.OutputSchema
	}
	toSerialize["state"] = o.State
	if !IsNil(o.Dependencies) {
		toSerialize["dependencies"] = o.Dependencies
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

func (o *ActionInstanceDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"revision",
		"type",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActionInstanceDto := _ActionInstanceDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActionInstanceDto)

	if err != nil {
		return err
	}

	*o = ActionInstanceDto(varActionInstanceDto)

	return err
}

type NullableActionInstanceDto struct {
	value *ActionInstanceDto
	isSet bool
}

func (v NullableActionInstanceDto) Get() *ActionInstanceDto {
	return v.value
}

func (v *NullableActionInstanceDto) Set(val *ActionInstanceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableActionInstanceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableActionInstanceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionInstanceDto(val *ActionInstanceDto) *NullableActionInstanceDto {
	return &NullableActionInstanceDto{value: val, isSet: true}
}

func (v NullableActionInstanceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionInstanceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


